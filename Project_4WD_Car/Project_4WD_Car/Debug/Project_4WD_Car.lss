
Project_4WD_Car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001420  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00001494  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  00800060  00800060  00001494  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001494  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000014c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  00001500  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000218a  00000000  00000000  00001758  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cf6  00000000  00000000  000038e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000175a  00000000  00000000  000045d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000054c  00000000  00000000  00005d34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c83  00000000  00000000  00006280  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000014ec  00000000  00000000  00006f03  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  000083ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 33 00 	jmp	0x66	; 0x66 <__ctors_end>
       4:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <__vector_1>
       8:	0c 94 38 05 	jmp	0xa70	; 0xa70 <__vector_2>
       c:	0c 94 64 05 	jmp	0xac8	; 0xac8 <__vector_3>
      10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      14:	0c 94 5b 07 	jmp	0xeb6	; 0xeb6 <__vector_5>
      18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      54:	0c 02       	muls	r16, r28
      56:	0f 02       	muls	r16, r31
      58:	12 02       	muls	r17, r18
      5a:	15 02       	muls	r17, r21
      5c:	18 02       	muls	r17, r24
      5e:	1b 02       	muls	r17, r27
      60:	1e 02       	muls	r17, r30
      62:	21 02       	muls	r18, r17
      64:	24 02       	muls	r18, r20

00000066 <__ctors_end>:
      66:	11 24       	eor	r1, r1
      68:	1f be       	out	0x3f, r1	; 63
      6a:	cf e5       	ldi	r28, 0x5F	; 95
      6c:	d8 e0       	ldi	r29, 0x08	; 8
      6e:	de bf       	out	0x3e, r29	; 62
      70:	cd bf       	out	0x3d, r28	; 61

00000072 <__do_copy_data>:
      72:	10 e0       	ldi	r17, 0x00	; 0
      74:	a0 e6       	ldi	r26, 0x60	; 96
      76:	b0 e0       	ldi	r27, 0x00	; 0
      78:	e0 e2       	ldi	r30, 0x20	; 32
      7a:	f4 e1       	ldi	r31, 0x14	; 20
      7c:	02 c0       	rjmp	.+4      	; 0x82 <__do_copy_data+0x10>
      7e:	05 90       	lpm	r0, Z+
      80:	0d 92       	st	X+, r0
      82:	a0 36       	cpi	r26, 0x60	; 96
      84:	b1 07       	cpc	r27, r17
      86:	d9 f7       	brne	.-10     	; 0x7e <__do_copy_data+0xc>

00000088 <__do_clear_bss>:
      88:	20 e0       	ldi	r18, 0x00	; 0
      8a:	a0 e6       	ldi	r26, 0x60	; 96
      8c:	b0 e0       	ldi	r27, 0x00	; 0
      8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
      90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
      92:	ac 37       	cpi	r26, 0x7C	; 124
      94:	b2 07       	cpc	r27, r18
      96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
      98:	0e 94 cd 02 	call	0x59a	; 0x59a <main>
      9c:	0c 94 0e 0a 	jmp	0x141c	; 0x141c <_exit>

000000a0 <__bad_interrupt>:
      a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <APP_init>:

//
EN_appError_t APP_init(void) {
	
  
  if(LED_init(PWM_LED_PORT , PWM_LED_PIN)!=LED_OK)// pwm
      a4:	60 e0       	ldi	r22, 0x00	; 0
      a6:	82 e4       	ldi	r24, 0x42	; 66
      a8:	0e 94 3a 02 	call	0x474	; 0x474 <LED_init>
      ac:	81 11       	cpse	r24, r1
      ae:	57 c0       	rjmp	.+174    	; 0x15e <APP_init+0xba>
  {
	  return APP_LED_ERROR;
	}
	// timer start
else if(LED_init(TIMER_PORT_CE ,TIMER_PIN_CE)!= LED_OK)
      b0:	63 e0       	ldi	r22, 0x03	; 3
      b2:	82 e4       	ldi	r24, 0x42	; 66
      b4:	0e 94 3a 02 	call	0x474	; 0x474 <LED_init>
      b8:	81 11       	cpse	r24, r1
      ba:	53 c0       	rjmp	.+166    	; 0x162 <APP_init+0xbe>
{
	  return APP_LED_ERROR;
}

// timer stops
else if(LED_init(TIMER_PORT_RST ,TIMER_PIN_RST)!= LED_OK)
      bc:	64 e0       	ldi	r22, 0x04	; 4
      be:	82 e4       	ldi	r24, 0x42	; 66
      c0:	0e 94 3a 02 	call	0x474	; 0x474 <LED_init>
      c4:	81 11       	cpse	r24, r1
      c6:	4f c0       	rjmp	.+158    	; 0x166 <APP_init+0xc2>
{
	return APP_LED_ERROR;
}

else if(BUTTON_init(BUTTON_STOP_PORT ,BUTTON_STOP_PIN)!= BTN_OK)
      c8:	62 e0       	ldi	r22, 0x02	; 2
      ca:	84 e4       	ldi	r24, 0x44	; 68
      cc:	0e 94 36 02 	call	0x46c	; 0x46c <BUTTON_init>
      d0:	81 11       	cpse	r24, r1
      d2:	4b c0       	rjmp	.+150    	; 0x16a <APP_init+0xc6>
{
	return APP_BTN_ERROR;
}
else if(BUTTON_init(BUTTON_START_PORT ,BUTTON_START_PIN)!= BTN_OK)
      d4:	63 e0       	ldi	r22, 0x03	; 3
      d6:	84 e4       	ldi	r24, 0x44	; 68
      d8:	0e 94 36 02 	call	0x46c	; 0x46c <BUTTON_init>
      dc:	81 11       	cpse	r24, r1
      de:	47 c0       	rjmp	.+142    	; 0x16e <APP_init+0xca>
{
	return APP_BTN_ERROR;
	
}
else if( LED_init(LED_0_PORT ,LED_0_PIN)!= LED_OK)
      e0:	60 e0       	ldi	r22, 0x00	; 0
      e2:	81 e4       	ldi	r24, 0x41	; 65
      e4:	0e 94 3a 02 	call	0x474	; 0x474 <LED_init>
      e8:	81 11       	cpse	r24, r1
      ea:	43 c0       	rjmp	.+134    	; 0x172 <APP_init+0xce>
{
	return APP_LED_ERROR;
	
}   
else if(LED_init(LED_1_PORT, LED_1_PIN)!= LED_OK)
      ec:	62 e0       	ldi	r22, 0x02	; 2
      ee:	81 e4       	ldi	r24, 0x41	; 65
      f0:	0e 94 3a 02 	call	0x474	; 0x474 <LED_init>
      f4:	81 11       	cpse	r24, r1
      f6:	3f c0       	rjmp	.+126    	; 0x176 <APP_init+0xd2>
{
	return APP_LED_ERROR;
	
}
else if(LED_init(LED_2_PORT, LED_2_PIN)!= LED_OK)
      f8:	65 e0       	ldi	r22, 0x05	; 5
      fa:	81 e4       	ldi	r24, 0x41	; 65
      fc:	0e 94 3a 02 	call	0x474	; 0x474 <LED_init>
     100:	81 11       	cpse	r24, r1
     102:	3b c0       	rjmp	.+118    	; 0x17a <APP_init+0xd6>
{
	return APP_LED_ERROR;
	
}
else if(LED_init(LED_3_PORT, LED_3_PIN)!= LED_OK)
     104:	67 e0       	ldi	r22, 0x07	; 7
     106:	81 e4       	ldi	r24, 0x41	; 65
     108:	0e 94 3a 02 	call	0x474	; 0x474 <LED_init>
     10c:	81 11       	cpse	r24, r1
     10e:	37 c0       	rjmp	.+110    	; 0x17e <APP_init+0xda>
{
	return APP_LED_ERROR;
	
}
else if( motor_init() != MOTOR_OK)
     110:	0e 94 46 02 	call	0x48c	; 0x48c <motor_init>
     114:	81 11       	cpse	r24, r1
     116:	35 c0       	rjmp	.+106    	; 0x182 <APP_init+0xde>
{
	return APP_MOTOR_ERROR;
}
else
{
  INTERRUPTS_enableGlobalInterrupt();
     118:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <INTERRUPTS_enableGlobalInterrupt>
  
  if(INTERRUPTS_enableExternalInterrupts(EXTERNAL_INTERRUPT_0)!=INTERRUPT_OK)
     11c:	80 e0       	ldi	r24, 0x00	; 0
     11e:	0e 94 55 04 	call	0x8aa	; 0x8aa <INTERRUPTS_enableExternalInterrupts>
     122:	81 11       	cpse	r24, r1
     124:	30 c0       	rjmp	.+96     	; 0x186 <APP_init+0xe2>
  {
	  return APP_INTERRUPT_ERROR;
  }
  else if(INTERRUPTS_enableExternalInterrupts(EXTERNAL_INTERRUPT_1)!=INTERRUPT_OK)
     126:	81 e0       	ldi	r24, 0x01	; 1
     128:	0e 94 55 04 	call	0x8aa	; 0x8aa <INTERRUPTS_enableExternalInterrupts>
     12c:	81 11       	cpse	r24, r1
     12e:	2d c0       	rjmp	.+90     	; 0x18a <APP_init+0xe6>
  {
	  return APP_INTERRUPT_ERROR;
  }
  else if( INTERRUPTS_EXT_SetCallBack(EXTERNAL_INTERRUPT_0,motor_stop)!= INTERRUPT_OK)
     130:	68 eb       	ldi	r22, 0xB8	; 184
     132:	72 e0       	ldi	r23, 0x02	; 2
     134:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <INTERRUPTS_EXT_SetCallBack>
     138:	81 11       	cpse	r24, r1
     13a:	29 c0       	rjmp	.+82     	; 0x18e <APP_init+0xea>
  {
	  return APP_INTERRUPT_ERROR;
  }
  else if( INTERRUPTS_extInterruptsEdge(EXTERNAL_INTERRUPT_0,LOW_LEVEL)!= INTERRUPT_OK)
     13c:	60 e0       	ldi	r22, 0x00	; 0
     13e:	0e 94 6e 04 	call	0x8dc	; 0x8dc <INTERRUPTS_extInterruptsEdge>
     142:	81 11       	cpse	r24, r1
     144:	26 c0       	rjmp	.+76     	; 0x192 <APP_init+0xee>
  {
	  return APP_INTERRUPT_ERROR;
  }
  else if( INTERRUPTS_extInterruptsEdge(EXTERNAL_INTERRUPT_1,LOW_LEVEL)!= INTERRUPT_OK)
     146:	60 e0       	ldi	r22, 0x00	; 0
     148:	81 e0       	ldi	r24, 0x01	; 1
     14a:	0e 94 6e 04 	call	0x8dc	; 0x8dc <INTERRUPTS_extInterruptsEdge>
     14e:	81 11       	cpse	r24, r1
     150:	22 c0       	rjmp	.+68     	; 0x196 <APP_init+0xf2>
  {
	  return APP_INTERRUPT_ERROR;
  }
  else if (TIMER_timer2Init()!=TIMER_OK)
     152:	0e 94 41 07 	call	0xe82	; 0xe82 <TIMER_timer2Init>
     156:	88 23       	and	r24, r24
     158:	01 f1       	breq	.+64     	; 0x19a <APP_init+0xf6>
  {
	  return APP_TIMER_ERROR;
     15a:	86 e0       	ldi	r24, 0x06	; 6
     15c:	08 95       	ret
EN_appError_t APP_init(void) {
	
  
  if(LED_init(PWM_LED_PORT , PWM_LED_PIN)!=LED_OK)// pwm
  {
	  return APP_LED_ERROR;
     15e:	81 e0       	ldi	r24, 0x01	; 1
     160:	08 95       	ret
	}
	// timer start
else if(LED_init(TIMER_PORT_CE ,TIMER_PIN_CE)!= LED_OK)
{
	  return APP_LED_ERROR;
     162:	81 e0       	ldi	r24, 0x01	; 1
     164:	08 95       	ret
}

// timer stops
else if(LED_init(TIMER_PORT_RST ,TIMER_PIN_RST)!= LED_OK)
{
	return APP_LED_ERROR;
     166:	81 e0       	ldi	r24, 0x01	; 1
     168:	08 95       	ret
}

else if(BUTTON_init(BUTTON_STOP_PORT ,BUTTON_STOP_PIN)!= BTN_OK)
{
	return APP_BTN_ERROR;
     16a:	82 e0       	ldi	r24, 0x02	; 2
     16c:	08 95       	ret
}
else if(BUTTON_init(BUTTON_START_PORT ,BUTTON_START_PIN)!= BTN_OK)
{
	return APP_BTN_ERROR;
     16e:	82 e0       	ldi	r24, 0x02	; 2
     170:	08 95       	ret
	
}
else if( LED_init(LED_0_PORT ,LED_0_PIN)!= LED_OK)
{
	return APP_LED_ERROR;
     172:	81 e0       	ldi	r24, 0x01	; 1
     174:	08 95       	ret
	
}   
else if(LED_init(LED_1_PORT, LED_1_PIN)!= LED_OK)
{
	return APP_LED_ERROR;
     176:	81 e0       	ldi	r24, 0x01	; 1
     178:	08 95       	ret
	
}
else if(LED_init(LED_2_PORT, LED_2_PIN)!= LED_OK)
{
	return APP_LED_ERROR;
     17a:	81 e0       	ldi	r24, 0x01	; 1
     17c:	08 95       	ret
	
}
else if(LED_init(LED_3_PORT, LED_3_PIN)!= LED_OK)
{
	return APP_LED_ERROR;
     17e:	81 e0       	ldi	r24, 0x01	; 1
     180:	08 95       	ret
	
}
else if( motor_init() != MOTOR_OK)
{
	return APP_MOTOR_ERROR;
     182:	85 e0       	ldi	r24, 0x05	; 5
     184:	08 95       	ret
{
  INTERRUPTS_enableGlobalInterrupt();
  
  if(INTERRUPTS_enableExternalInterrupts(EXTERNAL_INTERRUPT_0)!=INTERRUPT_OK)
  {
	  return APP_INTERRUPT_ERROR;
     186:	87 e0       	ldi	r24, 0x07	; 7
     188:	08 95       	ret
  }
  else if(INTERRUPTS_enableExternalInterrupts(EXTERNAL_INTERRUPT_1)!=INTERRUPT_OK)
  {
	  return APP_INTERRUPT_ERROR;
     18a:	87 e0       	ldi	r24, 0x07	; 7
     18c:	08 95       	ret
  }
  else if( INTERRUPTS_EXT_SetCallBack(EXTERNAL_INTERRUPT_0,motor_stop)!= INTERRUPT_OK)
  {
	  return APP_INTERRUPT_ERROR;
     18e:	87 e0       	ldi	r24, 0x07	; 7
     190:	08 95       	ret
  }
  else if( INTERRUPTS_extInterruptsEdge(EXTERNAL_INTERRUPT_0,LOW_LEVEL)!= INTERRUPT_OK)
  {
	  return APP_INTERRUPT_ERROR;
     192:	87 e0       	ldi	r24, 0x07	; 7
     194:	08 95       	ret
  }
  else if( INTERRUPTS_extInterruptsEdge(EXTERNAL_INTERRUPT_1,LOW_LEVEL)!= INTERRUPT_OK)
  {
	  return APP_INTERRUPT_ERROR;
     196:	87 e0       	ldi	r24, 0x07	; 7
     198:	08 95       	ret
	  
  }
  

}
  return APP_OK;
     19a:	80 e0       	ldi	r24, 0x00	; 0
  
  }
     19c:	08 95       	ret

0000019e <app_pwm_mode>:
	
}


EN_appError_t app_pwm_mode(float32 pwmValue)
{
     19e:	cf 92       	push	r12
     1a0:	df 92       	push	r13
     1a2:	ef 92       	push	r14
     1a4:	ff 92       	push	r15
	 f32_g_Timer0_speed= pwmValue/PWM_100;
     1a6:	20 e0       	ldi	r18, 0x00	; 0
     1a8:	30 e0       	ldi	r19, 0x00	; 0
     1aa:	48 ec       	ldi	r20, 0xC8	; 200
     1ac:	52 e4       	ldi	r21, 0x42	; 66
     1ae:	0e 94 3f 08 	call	0x107e	; 0x107e <__divsf3>
     1b2:	60 93 70 00 	sts	0x0070, r22	; 0x800070 <f32_g_Timer0_speed>
     1b6:	70 93 71 00 	sts	0x0071, r23	; 0x800071 <f32_g_Timer0_speed+0x1>
     1ba:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <f32_g_Timer0_speed+0x2>
     1be:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <f32_g_Timer0_speed+0x3>
	 f32_g_Timer0_time_1= (f32_g_Timer0_speed * PWM_256);
     1c2:	20 e0       	ldi	r18, 0x00	; 0
     1c4:	30 e0       	ldi	r19, 0x00	; 0
     1c6:	40 e8       	ldi	r20, 0x80	; 128
     1c8:	53 e4       	ldi	r21, 0x43	; 67
     1ca:	0e 94 9b 09 	call	0x1336	; 0x1336 <__mulsf3>
     1ce:	6b 01       	movw	r12, r22
     1d0:	7c 01       	movw	r14, r24
     1d2:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <f32_g_Timer0_time_1>
     1d6:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <f32_g_Timer0_time_1+0x1>
     1da:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <f32_g_Timer0_time_1+0x2>
     1de:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <f32_g_Timer0_time_1+0x3>
	 f32_g_Timer0_time_2= PWM_256-f32_g_Timer0_time_1;
     1e2:	9b 01       	movw	r18, r22
     1e4:	ac 01       	movw	r20, r24
     1e6:	60 e0       	ldi	r22, 0x00	; 0
     1e8:	70 e0       	ldi	r23, 0x00	; 0
     1ea:	80 e8       	ldi	r24, 0x80	; 128
     1ec:	93 e4       	ldi	r25, 0x43	; 67
     1ee:	0e 94 b6 07 	call	0xf6c	; 0xf6c <__subsf3>
     1f2:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <f32_g_Timer0_time_2>
     1f6:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <f32_g_Timer0_time_2+0x1>
     1fa:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <f32_g_Timer0_time_2+0x2>
     1fe:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <f32_g_Timer0_time_2+0x3>
	 if(TIMER_timer0PWM_mode(f32_g_Timer0_time_1)!= TIMER_OK)
     202:	c7 01       	movw	r24, r14
     204:	b6 01       	movw	r22, r12
     206:	0e 94 84 06 	call	0xd08	; 0xd08 <TIMER_timer0PWM_mode>
     20a:	81 11       	cpse	r24, r1
     20c:	1a c0       	rjmp	.+52     	; 0x242 <app_pwm_mode+0xa4>
	 {
		 return APP_TIMER_ERROR;
	 }
	 // this is used to set pin to high

	 if(LED_on(PORT_B,PIN0)!= LED_OK)
     20e:	60 e0       	ldi	r22, 0x00	; 0
     210:	82 e4       	ldi	r24, 0x42	; 66
     212:	0e 94 3e 02 	call	0x47c	; 0x47c <LED_on>
     216:	81 11       	cpse	r24, r1
     218:	16 c0       	rjmp	.+44     	; 0x246 <app_pwm_mode+0xa8>
	 {
		 return APP_TIMER_ERROR;
	} 
	  if(TIMER_timer0PWM_mode(f32_g_Timer0_time_2)!= TIMER_OK)
     21a:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <f32_g_Timer0_time_2>
     21e:	70 91 75 00 	lds	r23, 0x0075	; 0x800075 <f32_g_Timer0_time_2+0x1>
     222:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <f32_g_Timer0_time_2+0x2>
     226:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <f32_g_Timer0_time_2+0x3>
     22a:	0e 94 84 06 	call	0xd08	; 0xd08 <TIMER_timer0PWM_mode>
     22e:	81 11       	cpse	r24, r1
     230:	0c c0       	rjmp	.+24     	; 0x24a <app_pwm_mode+0xac>
	  {
		  return APP_TIMER_ERROR;
	  }
	 // this is used to set pin to low 
	 if(LED_off(PORT_B,PIN0)!= LED_OK)
     232:	60 e0       	ldi	r22, 0x00	; 0
     234:	82 e4       	ldi	r24, 0x42	; 66
     236:	0e 94 42 02 	call	0x484	; 0x484 <LED_off>
     23a:	88 23       	and	r24, r24
     23c:	41 f0       	breq	.+16     	; 0x24e <app_pwm_mode+0xb0>
	 {
		 return APP_TIMER_ERROR;
     23e:	86 e0       	ldi	r24, 0x06	; 6
     240:	07 c0       	rjmp	.+14     	; 0x250 <app_pwm_mode+0xb2>
	 f32_g_Timer0_speed= pwmValue/PWM_100;
	 f32_g_Timer0_time_1= (f32_g_Timer0_speed * PWM_256);
	 f32_g_Timer0_time_2= PWM_256-f32_g_Timer0_time_1;
	 if(TIMER_timer0PWM_mode(f32_g_Timer0_time_1)!= TIMER_OK)
	 {
		 return APP_TIMER_ERROR;
     242:	86 e0       	ldi	r24, 0x06	; 6
     244:	05 c0       	rjmp	.+10     	; 0x250 <app_pwm_mode+0xb2>
	 }
	 // this is used to set pin to high

	 if(LED_on(PORT_B,PIN0)!= LED_OK)
	 {
		 return APP_TIMER_ERROR;
     246:	86 e0       	ldi	r24, 0x06	; 6
     248:	03 c0       	rjmp	.+6      	; 0x250 <app_pwm_mode+0xb2>
	} 
	  if(TIMER_timer0PWM_mode(f32_g_Timer0_time_2)!= TIMER_OK)
	  {
		  return APP_TIMER_ERROR;
     24a:	86 e0       	ldi	r24, 0x06	; 6
     24c:	01 c0       	rjmp	.+2      	; 0x250 <app_pwm_mode+0xb2>
	 // this is used to set pin to low 
	 if(LED_off(PORT_B,PIN0)!= LED_OK)
	 {
		 return APP_TIMER_ERROR;
	 }
	 return APP_OK;
     24e:	80 e0       	ldi	r24, 0x00	; 0
}
     250:	ff 90       	pop	r15
     252:	ef 90       	pop	r14
     254:	df 90       	pop	r13
     256:	cf 90       	pop	r12
     258:	08 95       	ret

0000025a <app_move_short_slide>:

EN_appError_t app_move_short_slide(void)
{
	if(LED_off(LED_0_PORT,LED_0_PIN)!= LED_OK)
     25a:	60 e0       	ldi	r22, 0x00	; 0
     25c:	81 e4       	ldi	r24, 0x41	; 65
     25e:	0e 94 42 02 	call	0x484	; 0x484 <LED_off>
     262:	81 11       	cpse	r24, r1
     264:	20 c0       	rjmp	.+64     	; 0x2a6 <app_move_short_slide+0x4c>
	{
		return APP_LED_ERROR;
	}
	i32_g_TimeMode_ovf= MOVE_2_SEC; 
     266:	85 e8       	ldi	r24, 0x85	; 133
     268:	9e e1       	ldi	r25, 0x1E	; 30
     26a:	a0 e0       	ldi	r26, 0x00	; 0
     26c:	b0 e0       	ldi	r27, 0x00	; 0
     26e:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <i32_g_TimeMode_ovf>
     272:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <i32_g_TimeMode_ovf+0x1>
     276:	a0 93 6d 00 	sts	0x006D, r26	; 0x80006d <i32_g_TimeMode_ovf+0x2>
     27a:	b0 93 6e 00 	sts	0x006E, r27	; 0x80006e <i32_g_TimeMode_ovf+0x3>
	if(motor_move_forward()!=MOTOR_OK)
     27e:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <motor_move_forward>
     282:	81 11       	cpse	r24, r1
     284:	12 c0       	rjmp	.+36     	; 0x2aa <app_move_short_slide+0x50>
	{
		return APP_MOTOR_ERROR;
	}
	else if(LED_on(LED_2_PORT,LED_2_PIN)!= LED_OK)
     286:	65 e0       	ldi	r22, 0x05	; 5
     288:	81 e4       	ldi	r24, 0x41	; 65
     28a:	0e 94 3e 02 	call	0x47c	; 0x47c <LED_on>
     28e:	81 11       	cpse	r24, r1
     290:	0e c0       	rjmp	.+28     	; 0x2ae <app_move_short_slide+0x54>
	{
		return APP_LED_ERROR;
	}
	else if(app_pwm_mode(_30_PER_OF_MAX_SPEED)!=APP_OK)
     292:	60 e0       	ldi	r22, 0x00	; 0
     294:	70 e0       	ldi	r23, 0x00	; 0
     296:	80 ef       	ldi	r24, 0xF0	; 240
     298:	91 e4       	ldi	r25, 0x41	; 65
     29a:	0e 94 cf 00 	call	0x19e	; 0x19e <app_pwm_mode>
     29e:	88 23       	and	r24, r24
     2a0:	39 f0       	breq	.+14     	; 0x2b0 <app_move_short_slide+0x56>
	{
		return APP_ERROR_EXIT;
     2a2:	84 e0       	ldi	r24, 0x04	; 4
     2a4:	08 95       	ret

EN_appError_t app_move_short_slide(void)
{
	if(LED_off(LED_0_PORT,LED_0_PIN)!= LED_OK)
	{
		return APP_LED_ERROR;
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	08 95       	ret
	}
	i32_g_TimeMode_ovf= MOVE_2_SEC; 
	if(motor_move_forward()!=MOTOR_OK)
	{
		return APP_MOTOR_ERROR;
     2aa:	85 e0       	ldi	r24, 0x05	; 5
     2ac:	08 95       	ret
	}
	else if(LED_on(LED_2_PORT,LED_2_PIN)!= LED_OK)
	{
		return APP_LED_ERROR;
     2ae:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	
	return APP_OK;
	
}
     2b0:	08 95       	ret

000002b2 <app_car_stop>:

EN_appError_t app_car_stop(void)
{
	
	if(LED_off(LED_1_PORT, LED_1_PIN)!=LED_OK)
     2b2:	62 e0       	ldi	r22, 0x02	; 2
     2b4:	81 e4       	ldi	r24, 0x41	; 65
     2b6:	0e 94 42 02 	call	0x484	; 0x484 <LED_off>
     2ba:	81 11       	cpse	r24, r1
     2bc:	22 c0       	rjmp	.+68     	; 0x302 <app_car_stop+0x50>
	{
		return APP_LED_ERROR;
	}
	else if (LED_off(LED_2_PORT, LED_2_PIN)!= LED_OK)
     2be:	65 e0       	ldi	r22, 0x05	; 5
     2c0:	81 e4       	ldi	r24, 0x41	; 65
     2c2:	0e 94 42 02 	call	0x484	; 0x484 <LED_off>
     2c6:	81 11       	cpse	r24, r1
     2c8:	1e c0       	rjmp	.+60     	; 0x306 <app_car_stop+0x54>
	{
		return APP_LED_ERROR;
	}
	else if(LED_off(LED_3_PORT, LED_3_PIN)!= LED_OK)
     2ca:	67 e0       	ldi	r22, 0x07	; 7
     2cc:	81 e4       	ldi	r24, 0x41	; 65
     2ce:	0e 94 42 02 	call	0x484	; 0x484 <LED_off>
     2d2:	81 11       	cpse	r24, r1
     2d4:	1a c0       	rjmp	.+52     	; 0x30a <app_car_stop+0x58>
	{
		return APP_LED_ERROR;
	}
	else if(LED_on(LED_0_PORT, LED_0_PIN)!= LED_OK)
     2d6:	60 e0       	ldi	r22, 0x00	; 0
     2d8:	81 e4       	ldi	r24, 0x41	; 65
     2da:	0e 94 3e 02 	call	0x47c	; 0x47c <LED_on>
     2de:	81 11       	cpse	r24, r1
     2e0:	16 c0       	rjmp	.+44     	; 0x30e <app_car_stop+0x5c>
	{
		return APP_LED_ERROR;
	}
	else
	{
	i32_g_TimeMode_ovf= STOP_HALF_SEC;  // 5 seconds for simulation test
     2e2:	81 ea       	ldi	r24, 0xA1	; 161
     2e4:	97 e0       	ldi	r25, 0x07	; 7
     2e6:	a0 e0       	ldi	r26, 0x00	; 0
     2e8:	b0 e0       	ldi	r27, 0x00	; 0
     2ea:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <i32_g_TimeMode_ovf>
     2ee:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <i32_g_TimeMode_ovf+0x1>
     2f2:	a0 93 6d 00 	sts	0x006D, r26	; 0x80006d <i32_g_TimeMode_ovf+0x2>
     2f6:	b0 93 6e 00 	sts	0x006E, r27	; 0x80006e <i32_g_TimeMode_ovf+0x3>
	motor_stop();
     2fa:	0e 94 b8 02 	call	0x570	; 0x570 <motor_stop>
	}
	
	return APP_OK;
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	08 95       	ret
EN_appError_t app_car_stop(void)
{
	
	if(LED_off(LED_1_PORT, LED_1_PIN)!=LED_OK)
	{
		return APP_LED_ERROR;
     302:	81 e0       	ldi	r24, 0x01	; 1
     304:	08 95       	ret
	}
	else if (LED_off(LED_2_PORT, LED_2_PIN)!= LED_OK)
	{
		return APP_LED_ERROR;
     306:	81 e0       	ldi	r24, 0x01	; 1
     308:	08 95       	ret
	}
	else if(LED_off(LED_3_PORT, LED_3_PIN)!= LED_OK)
	{
		return APP_LED_ERROR;
     30a:	81 e0       	ldi	r24, 0x01	; 1
     30c:	08 95       	ret
	}
	else if(LED_on(LED_0_PORT, LED_0_PIN)!= LED_OK)
	{
		return APP_LED_ERROR;
     30e:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return APP_OK;
	
	
}
     310:	08 95       	ret

00000312 <app_move_long_slide>:

// car will move forward to create the longest side of the rectangle for 3 seconds with 50% of its maximum speed
EN_appError_t app_move_long_slide(void)
{
	if(LED_off(LED_0_PORT,LED_0_PIN)!=LED_OK)
     312:	60 e0       	ldi	r22, 0x00	; 0
     314:	81 e4       	ldi	r24, 0x41	; 65
     316:	0e 94 42 02 	call	0x484	; 0x484 <LED_off>
     31a:	81 11       	cpse	r24, r1
     31c:	20 c0       	rjmp	.+64     	; 0x35e <app_move_long_slide+0x4c>
	{
		return APP_LED_ERROR;
	}
	i32_g_TimeMode_ovf= MOVE_3_SEC; 
     31e:	87 ec       	ldi	r24, 0xC7	; 199
     320:	9d e2       	ldi	r25, 0x2D	; 45
     322:	a0 e0       	ldi	r26, 0x00	; 0
     324:	b0 e0       	ldi	r27, 0x00	; 0
     326:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <i32_g_TimeMode_ovf>
     32a:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <i32_g_TimeMode_ovf+0x1>
     32e:	a0 93 6d 00 	sts	0x006D, r26	; 0x80006d <i32_g_TimeMode_ovf+0x2>
     332:	b0 93 6e 00 	sts	0x006E, r27	; 0x80006e <i32_g_TimeMode_ovf+0x3>
	if(motor_move_forward()!= MOTOR_OK)
     336:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <motor_move_forward>
     33a:	81 11       	cpse	r24, r1
     33c:	12 c0       	rjmp	.+36     	; 0x362 <app_move_long_slide+0x50>
	{
		return APP_ERROR_EXIT;
	}
	else if(LED_on(LED_1_PORT,LED_1_PIN)!=LED_OK)
     33e:	62 e0       	ldi	r22, 0x02	; 2
     340:	81 e4       	ldi	r24, 0x41	; 65
     342:	0e 94 3e 02 	call	0x47c	; 0x47c <LED_on>
     346:	81 11       	cpse	r24, r1
     348:	0e c0       	rjmp	.+28     	; 0x366 <app_move_long_slide+0x54>
	{
		return APP_LED_ERROR;
		
	}
	else if(app_pwm_mode(_50_PER_OF_MAX_SPEED)!=APP_OK)
     34a:	60 e0       	ldi	r22, 0x00	; 0
     34c:	70 e0       	ldi	r23, 0x00	; 0
     34e:	88 e4       	ldi	r24, 0x48	; 72
     350:	92 e4       	ldi	r25, 0x42	; 66
     352:	0e 94 cf 00 	call	0x19e	; 0x19e <app_pwm_mode>
     356:	88 23       	and	r24, r24
     358:	39 f0       	breq	.+14     	; 0x368 <app_move_long_slide+0x56>
	{
		return APP_ERROR_EXIT;
     35a:	84 e0       	ldi	r24, 0x04	; 4
     35c:	08 95       	ret
// car will move forward to create the longest side of the rectangle for 3 seconds with 50% of its maximum speed
EN_appError_t app_move_long_slide(void)
{
	if(LED_off(LED_0_PORT,LED_0_PIN)!=LED_OK)
	{
		return APP_LED_ERROR;
     35e:	81 e0       	ldi	r24, 0x01	; 1
     360:	08 95       	ret
	}
	i32_g_TimeMode_ovf= MOVE_3_SEC; 
	if(motor_move_forward()!= MOTOR_OK)
	{
		return APP_ERROR_EXIT;
     362:	84 e0       	ldi	r24, 0x04	; 4
     364:	08 95       	ret
	}
	else if(LED_on(LED_1_PORT,LED_1_PIN)!=LED_OK)
	{
		return APP_LED_ERROR;
     366:	81 e0       	ldi	r24, 0x01	; 1
	
	
	
	return APP_OK;
	
}
     368:	08 95       	ret

0000036a <app_car_initial_state>:

void app_car_initial_state(void){
	
	i32_g_TimeMode_ovf= MOVE_1_SEC;  // 5 seconds for simulation test
     36a:	83 e4       	ldi	r24, 0x43	; 67
     36c:	9f e0       	ldi	r25, 0x0F	; 15
     36e:	a0 e0       	ldi	r26, 0x00	; 0
     370:	b0 e0       	ldi	r27, 0x00	; 0
     372:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <i32_g_TimeMode_ovf>
     376:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <i32_g_TimeMode_ovf+0x1>
     37a:	a0 93 6d 00 	sts	0x006D, r26	; 0x80006d <i32_g_TimeMode_ovf+0x2>
     37e:	b0 93 6e 00 	sts	0x006E, r27	; 0x80006e <i32_g_TimeMode_ovf+0x3>
	motor_stop();
     382:	0e 94 b8 02 	call	0x570	; 0x570 <motor_stop>
     386:	08 95       	ret

00000388 <app_rotate_car_90Deg>:
}


EN_appError_t app_rotate_car_90Deg(void)
{
	if(LED_off(LED_0_PORT,LED_0_PIN)!= LED_OK)
     388:	60 e0       	ldi	r22, 0x00	; 0
     38a:	81 e4       	ldi	r24, 0x41	; 65
     38c:	0e 94 42 02 	call	0x484	; 0x484 <LED_off>
     390:	81 11       	cpse	r24, r1
     392:	20 c0       	rjmp	.+64     	; 0x3d4 <app_rotate_car_90Deg+0x4c>
	wheel_circumference = MATH_PI*DISTANCE_BETWEEN_WHEELS;
	wheel_perimeter = MATH_PI*DIAMATER_OF_WHEEL;
	
	wheel_rotation = ((wheel_circumference)/(wheel_perimeter));
	rotation_time = ((wheel_rotation*QUARATER_CIRCLE)/(MAXIMUM_SPEED*WHEEL_APPROX))*WHEEL_DEGREE;
	i32_g_TimeMode_ovf = rotation_time/WHEEL_TIME_FREQ;
     394:	88 e3       	ldi	r24, 0x38	; 56
     396:	99 e3       	ldi	r25, 0x39	; 57
     398:	a0 e0       	ldi	r26, 0x00	; 0
     39a:	b0 e0       	ldi	r27, 0x00	; 0
     39c:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <i32_g_TimeMode_ovf>
     3a0:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <i32_g_TimeMode_ovf+0x1>
     3a4:	a0 93 6d 00 	sts	0x006D, r26	; 0x80006d <i32_g_TimeMode_ovf+0x2>
     3a8:	b0 93 6e 00 	sts	0x006E, r27	; 0x80006e <i32_g_TimeMode_ovf+0x3>

	if(motor_rotate()!=MOTOR_OK)
     3ac:	0e 94 92 02 	call	0x524	; 0x524 <motor_rotate>
     3b0:	81 11       	cpse	r24, r1
     3b2:	12 c0       	rjmp	.+36     	; 0x3d8 <app_rotate_car_90Deg+0x50>
	{
		return APP_MOTOR_ERROR;
	}
	else if(LED_on(LED_3_PORT,LED_3_PIN)!= LED_OK)
     3b4:	67 e0       	ldi	r22, 0x07	; 7
     3b6:	81 e4       	ldi	r24, 0x41	; 65
     3b8:	0e 94 3e 02 	call	0x47c	; 0x47c <LED_on>
     3bc:	81 11       	cpse	r24, r1
     3be:	0e c0       	rjmp	.+28     	; 0x3dc <app_rotate_car_90Deg+0x54>
	{
		return APP_LED_ERROR;
	}
	else if(app_pwm_mode(_10_PER_OF_MAX_SPEED)!=APP_OK)
     3c0:	60 e0       	ldi	r22, 0x00	; 0
     3c2:	70 e0       	ldi	r23, 0x00	; 0
     3c4:	80 e2       	ldi	r24, 0x20	; 32
     3c6:	91 e4       	ldi	r25, 0x41	; 65
     3c8:	0e 94 cf 00 	call	0x19e	; 0x19e <app_pwm_mode>
     3cc:	88 23       	and	r24, r24
     3ce:	39 f0       	breq	.+14     	; 0x3de <app_rotate_car_90Deg+0x56>
	{
		return APP_ERROR_EXIT;
     3d0:	84 e0       	ldi	r24, 0x04	; 4
     3d2:	08 95       	ret

EN_appError_t app_rotate_car_90Deg(void)
{
	if(LED_off(LED_0_PORT,LED_0_PIN)!= LED_OK)
	{
		return APP_LED_ERROR;
     3d4:	81 e0       	ldi	r24, 0x01	; 1
     3d6:	08 95       	ret
	rotation_time = ((wheel_rotation*QUARATER_CIRCLE)/(MAXIMUM_SPEED*WHEEL_APPROX))*WHEEL_DEGREE;
	i32_g_TimeMode_ovf = rotation_time/WHEEL_TIME_FREQ;

	if(motor_rotate()!=MOTOR_OK)
	{
		return APP_MOTOR_ERROR;
     3d8:	85 e0       	ldi	r24, 0x05	; 5
     3da:	08 95       	ret
	}
	else if(LED_on(LED_3_PORT,LED_3_PIN)!= LED_OK)
	{
		return APP_LED_ERROR;
     3dc:	81 e0       	ldi	r24, 0x01	; 1
		
	}
	
	return APP_OK;
	
}
     3de:	08 95       	ret

000003e0 <APP_start>:


EN_appError_t APP_start(void) {
	
while(1){
  if(u8_g_timerBtn_flag == 1){
     3e0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_end>
     3e4:	81 30       	cpi	r24, 0x01	; 1
     3e6:	99 f5       	brne	.+102    	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
	  
	  if(LED_on(TIMER_PORT_CE, TIMER_PIN_CE)!=LED_OK)
     3e8:	63 e0       	ldi	r22, 0x03	; 3
     3ea:	82 e4       	ldi	r24, 0x42	; 66
     3ec:	0e 94 3e 02 	call	0x47c	; 0x47c <LED_on>
     3f0:	81 11       	cpse	r24, r1
     3f2:	3a c0       	rjmp	.+116    	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
	  {
		  return APP_LED_ERROR;
		} 
		else if(LED_off(TIMER_PORT_RST, TIMER_PIN_RST)!= LED_OK)
     3f4:	64 e0       	ldi	r22, 0x04	; 4
     3f6:	82 e4       	ldi	r24, 0x42	; 66
     3f8:	0e 94 42 02 	call	0x484	; 0x484 <LED_off>
     3fc:	81 11       	cpse	r24, r1
     3fe:	34 c0       	rjmp	.+104    	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
		  return APP_LED_ERROR;
		  
		}
	  
	  
	  switch(u8_g_currentCarState)
     400:	e0 91 6f 00 	lds	r30, 0x006F	; 0x80006f <u8_g_currentCarState>
     404:	8e 2f       	mov	r24, r30
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	89 30       	cpi	r24, 0x09	; 9
     40a:	91 05       	cpc	r25, r1
     40c:	48 f7       	brcc	.-46     	; 0x3e0 <APP_start>
     40e:	fc 01       	movw	r30, r24
     410:	e6 5d       	subi	r30, 0xD6	; 214
     412:	ff 4f       	sbci	r31, 0xFF	; 255
     414:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__tablejump2__>
	  {
		  case CASE0:
		  app_car_initial_state();
     418:	0e 94 b5 01 	call	0x36a	; 0x36a <app_car_initial_state>
		  break;
     41c:	e1 cf       	rjmp	.-62     	; 0x3e0 <APP_start>
  		  case CASE1:
		  app_move_long_slide();
     41e:	0e 94 89 01 	call	0x312	; 0x312 <app_move_long_slide>
		  break;
     422:	de cf       	rjmp	.-68     	; 0x3e0 <APP_start>
		  case CASE2:
		  app_car_stop();
     424:	0e 94 59 01 	call	0x2b2	; 0x2b2 <app_car_stop>
		  break;
     428:	db cf       	rjmp	.-74     	; 0x3e0 <APP_start>
		  case CASE3:
		  app_rotate_car_90Deg();
     42a:	0e 94 c4 01 	call	0x388	; 0x388 <app_rotate_car_90Deg>
		  break;
     42e:	d8 cf       	rjmp	.-80     	; 0x3e0 <APP_start>
		  case CASE4:
		  app_car_stop();
     430:	0e 94 59 01 	call	0x2b2	; 0x2b2 <app_car_stop>
		  break;
     434:	d5 cf       	rjmp	.-86     	; 0x3e0 <APP_start>
		  case CASE5:
		  app_move_short_slide();
     436:	0e 94 2d 01 	call	0x25a	; 0x25a <app_move_short_slide>
		  break;
     43a:	d2 cf       	rjmp	.-92     	; 0x3e0 <APP_start>
		  case CASE6:
		  app_car_stop();
     43c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <app_car_stop>
		  break;
     440:	cf cf       	rjmp	.-98     	; 0x3e0 <APP_start>
		  case CASE7:
		  app_rotate_car_90Deg();
     442:	0e 94 c4 01 	call	0x388	; 0x388 <app_rotate_car_90Deg>
		  break;
     446:	cc cf       	rjmp	.-104    	; 0x3e0 <APP_start>
		  case CASE8:
		  app_car_stop();
     448:	0e 94 59 01 	call	0x2b2	; 0x2b2 <app_car_stop>
		  break;
     44c:	c9 cf       	rjmp	.-110    	; 0x3e0 <APP_start>
	  
	  }
	  else
	  {
	  //rest timer
	  if(LED_off(TIMER_PORT_CE, TIMER_PIN_CE)!=LED_OK)
     44e:	63 e0       	ldi	r22, 0x03	; 3
     450:	82 e4       	ldi	r24, 0x42	; 66
     452:	0e 94 42 02 	call	0x484	; 0x484 <LED_off>
     456:	81 11       	cpse	r24, r1
     458:	07 c0       	rjmp	.+14     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
	  {
		  return APP_LED_ERROR;
	  }
	  else if(LED_on(TIMER_PORT_RST, TIMER_PIN_RST)!= LED_OK)
     45a:	64 e0       	ldi	r22, 0x04	; 4
     45c:	82 e4       	ldi	r24, 0x42	; 66
     45e:	0e 94 3e 02 	call	0x47c	; 0x47c <LED_on>
     462:	88 23       	and	r24, r24
     464:	09 f4       	brne	.+2      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
     466:	bc cf       	rjmp	.-136    	; 0x3e0 <APP_start>
	  
	  }
}
	return APP_OK;
	
}
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	08 95       	ret

0000046c <BUTTON_init>:
 */ 

#include "button.h"
EN_btnError_t BUTTON_init(uint8_t buttonPort,uint8_t buttonPin)
{
	return(DIO_init(buttonPort,buttonPin,IN));
     46c:	40 e0       	ldi	r20, 0x00	; 0
     46e:	0e 94 46 03 	call	0x68c	; 0x68c <DIO_init>
	
}
     472:	08 95       	ret

00000474 <LED_init>:
 */ 

#include "led.h"

EN_ledError_t LED_init(uint8_t ledPort,uint8_t ledPin){
	return(DIO_init(ledPort,ledPin,OUT));
     474:	41 e0       	ldi	r20, 0x01	; 1
     476:	0e 94 46 03 	call	0x68c	; 0x68c <DIO_init>
}
     47a:	08 95       	ret

0000047c <LED_on>:
EN_ledError_t LED_on(uint8_t ledPort,uint8_t ledPin){
	return(DIO_write(ledPort,ledPin,HIGH));
     47c:	41 e0       	ldi	r20, 0x01	; 1
     47e:	0e 94 c3 03 	call	0x786	; 0x786 <DIO_write>
}
     482:	08 95       	ret

00000484 <LED_off>:
EN_ledError_t LED_off(uint8_t ledPort,uint8_t ledPin){
	return(DIO_write(ledPort,ledPin,LOW));
     484:	40 e0       	ldi	r20, 0x00	; 0
     486:	0e 94 c3 03 	call	0x786	; 0x786 <DIO_write>
}
     48a:	08 95       	ret

0000048c <motor_init>:

#include "motor.h"

EN_motorError_t motor_init(void)
{
		if(DIO_init(MOTOR_PORT0,MOTOR_PIN0,OUT)!=DIO_OK)
     48c:	41 e0       	ldi	r20, 0x01	; 1
     48e:	60 e0       	ldi	r22, 0x00	; 0
     490:	83 e4       	ldi	r24, 0x43	; 67
     492:	0e 94 46 03 	call	0x68c	; 0x68c <DIO_init>
     496:	81 11       	cpse	r24, r1
     498:	17 c0       	rjmp	.+46     	; 0x4c8 <motor_init+0x3c>
		{
			return MOTOR_INVALID_INIT;
			
		}
		else if(DIO_init(MOTOR_PORT1,MOTOR_PIN1,OUT)!=DIO_OK)
     49a:	41 e0       	ldi	r20, 0x01	; 1
     49c:	61 e0       	ldi	r22, 0x01	; 1
     49e:	83 e4       	ldi	r24, 0x43	; 67
     4a0:	0e 94 46 03 	call	0x68c	; 0x68c <DIO_init>
     4a4:	81 11       	cpse	r24, r1
     4a6:	12 c0       	rjmp	.+36     	; 0x4cc <motor_init+0x40>
		{
			return MOTOR_INVALID_INIT;
		}
		else if(DIO_init(MOTOR_PORT2,MOTOR_PIN2,OUT)!=DIO_OK)
     4a8:	41 e0       	ldi	r20, 0x01	; 1
     4aa:	62 e0       	ldi	r22, 0x02	; 2
     4ac:	83 e4       	ldi	r24, 0x43	; 67
     4ae:	0e 94 46 03 	call	0x68c	; 0x68c <DIO_init>
     4b2:	81 11       	cpse	r24, r1
     4b4:	0d c0       	rjmp	.+26     	; 0x4d0 <motor_init+0x44>
		{
			return MOTOR_INVALID_INIT;
		}
		else if(DIO_init(MOTOR_PORT3,MOTOR_PIN3,OUT)!= DIO_OK)
     4b6:	41 e0       	ldi	r20, 0x01	; 1
     4b8:	63 e0       	ldi	r22, 0x03	; 3
     4ba:	83 e4       	ldi	r24, 0x43	; 67
     4bc:	0e 94 46 03 	call	0x68c	; 0x68c <DIO_init>
     4c0:	88 23       	and	r24, r24
     4c2:	41 f0       	breq	.+16     	; 0x4d4 <motor_init+0x48>
		{
			return MOTOR_INVALID_INIT;
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	08 95       	ret

EN_motorError_t motor_init(void)
{
		if(DIO_init(MOTOR_PORT0,MOTOR_PIN0,OUT)!=DIO_OK)
		{
			return MOTOR_INVALID_INIT;
     4c8:	81 e0       	ldi	r24, 0x01	; 1
     4ca:	08 95       	ret
			
		}
		else if(DIO_init(MOTOR_PORT1,MOTOR_PIN1,OUT)!=DIO_OK)
		{
			return MOTOR_INVALID_INIT;
     4cc:	81 e0       	ldi	r24, 0x01	; 1
     4ce:	08 95       	ret
		}
		else if(DIO_init(MOTOR_PORT2,MOTOR_PIN2,OUT)!=DIO_OK)
		{
			return MOTOR_INVALID_INIT;
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	08 95       	ret
			return MOTOR_INVALID_INIT;
			
		}
		else
		{
			return MOTOR_OK;
     4d4:	80 e0       	ldi	r24, 0x00	; 0
		}
		
}
     4d6:	08 95       	ret

000004d8 <motor_move_forward>:

EN_motorError_t motor_move_forward()
{
	
		if(DIO_write(MOTOR_PORT0,MOTOR_PIN0,LOW)!=DIO_OK) 
     4d8:	40 e0       	ldi	r20, 0x00	; 0
     4da:	60 e0       	ldi	r22, 0x00	; 0
     4dc:	83 e4       	ldi	r24, 0x43	; 67
     4de:	0e 94 c3 03 	call	0x786	; 0x786 <DIO_write>
     4e2:	81 11       	cpse	r24, r1
     4e4:	17 c0       	rjmp	.+46     	; 0x514 <motor_move_forward+0x3c>
		{
			return MOTOR_INVALID_MOVEFWD;
			
		}
		else if(DIO_write(MOTOR_PORT1,MOTOR_PIN1,HIGH)!=DIO_OK)
     4e6:	41 e0       	ldi	r20, 0x01	; 1
     4e8:	61 e0       	ldi	r22, 0x01	; 1
     4ea:	83 e4       	ldi	r24, 0x43	; 67
     4ec:	0e 94 c3 03 	call	0x786	; 0x786 <DIO_write>
     4f0:	81 11       	cpse	r24, r1
     4f2:	12 c0       	rjmp	.+36     	; 0x518 <motor_move_forward+0x40>
		{
			return MOTOR_INVALID_MOVEFWD;
		}
		else if(DIO_write(MOTOR_PORT2,MOTOR_PIN2,LOW)!=DIO_OK)
     4f4:	40 e0       	ldi	r20, 0x00	; 0
     4f6:	62 e0       	ldi	r22, 0x02	; 2
     4f8:	83 e4       	ldi	r24, 0x43	; 67
     4fa:	0e 94 c3 03 	call	0x786	; 0x786 <DIO_write>
     4fe:	81 11       	cpse	r24, r1
     500:	0d c0       	rjmp	.+26     	; 0x51c <motor_move_forward+0x44>
		{
			return MOTOR_INVALID_MOVEFWD;
		}
		else if(DIO_write(MOTOR_PORT3,MOTOR_PIN3,HIGH)!= DIO_OK)
     502:	41 e0       	ldi	r20, 0x01	; 1
     504:	63 e0       	ldi	r22, 0x03	; 3
     506:	83 e4       	ldi	r24, 0x43	; 67
     508:	0e 94 c3 03 	call	0x786	; 0x786 <DIO_write>
     50c:	88 23       	and	r24, r24
     50e:	41 f0       	breq	.+16     	; 0x520 <motor_move_forward+0x48>
		{
			return MOTOR_INVALID_MOVEFWD;
     510:	82 e0       	ldi	r24, 0x02	; 2
     512:	08 95       	ret
EN_motorError_t motor_move_forward()
{
	
		if(DIO_write(MOTOR_PORT0,MOTOR_PIN0,LOW)!=DIO_OK) 
		{
			return MOTOR_INVALID_MOVEFWD;
     514:	82 e0       	ldi	r24, 0x02	; 2
     516:	08 95       	ret
			
		}
		else if(DIO_write(MOTOR_PORT1,MOTOR_PIN1,HIGH)!=DIO_OK)
		{
			return MOTOR_INVALID_MOVEFWD;
     518:	82 e0       	ldi	r24, 0x02	; 2
     51a:	08 95       	ret
		}
		else if(DIO_write(MOTOR_PORT2,MOTOR_PIN2,LOW)!=DIO_OK)
		{
			return MOTOR_INVALID_MOVEFWD;
     51c:	82 e0       	ldi	r24, 0x02	; 2
     51e:	08 95       	ret
			return MOTOR_INVALID_MOVEFWD;
			
		}
		else
		{
				return MOTOR_OK;
     520:	80 e0       	ldi	r24, 0x00	; 0
		}

	
	
}
     522:	08 95       	ret

00000524 <motor_rotate>:

EN_motorError_t motor_rotate(void)
{
	
	
	if(DIO_write(MOTOR_PORT0,MOTOR_PIN0,HIGH)!=DIO_OK) 
     524:	41 e0       	ldi	r20, 0x01	; 1
     526:	60 e0       	ldi	r22, 0x00	; 0
     528:	83 e4       	ldi	r24, 0x43	; 67
     52a:	0e 94 c3 03 	call	0x786	; 0x786 <DIO_write>
     52e:	81 11       	cpse	r24, r1
     530:	17 c0       	rjmp	.+46     	; 0x560 <motor_rotate+0x3c>
	{
		return MOTOR_INVALID_ROTATE;
		
	}
	else if(DIO_write(MOTOR_PORT1,MOTOR_PIN1,LOW)!=DIO_OK)
     532:	40 e0       	ldi	r20, 0x00	; 0
     534:	61 e0       	ldi	r22, 0x01	; 1
     536:	83 e4       	ldi	r24, 0x43	; 67
     538:	0e 94 c3 03 	call	0x786	; 0x786 <DIO_write>
     53c:	81 11       	cpse	r24, r1
     53e:	12 c0       	rjmp	.+36     	; 0x564 <motor_rotate+0x40>
	{
		return MOTOR_INVALID_ROTATE;
	}
	else if(DIO_write(MOTOR_PORT2,MOTOR_PIN2,LOW)!=DIO_OK)
     540:	40 e0       	ldi	r20, 0x00	; 0
     542:	62 e0       	ldi	r22, 0x02	; 2
     544:	83 e4       	ldi	r24, 0x43	; 67
     546:	0e 94 c3 03 	call	0x786	; 0x786 <DIO_write>
     54a:	81 11       	cpse	r24, r1
     54c:	0d c0       	rjmp	.+26     	; 0x568 <motor_rotate+0x44>
	{
		return MOTOR_INVALID_ROTATE;
	}
	else if(DIO_write(MOTOR_PORT3,MOTOR_PIN3,HIGH)!= DIO_OK)
     54e:	41 e0       	ldi	r20, 0x01	; 1
     550:	63 e0       	ldi	r22, 0x03	; 3
     552:	83 e4       	ldi	r24, 0x43	; 67
     554:	0e 94 c3 03 	call	0x786	; 0x786 <DIO_write>
     558:	88 23       	and	r24, r24
     55a:	41 f0       	breq	.+16     	; 0x56c <motor_rotate+0x48>
	{
		return MOTOR_INVALID_ROTATE;
     55c:	83 e0       	ldi	r24, 0x03	; 3
     55e:	08 95       	ret
{
	
	
	if(DIO_write(MOTOR_PORT0,MOTOR_PIN0,HIGH)!=DIO_OK) 
	{
		return MOTOR_INVALID_ROTATE;
     560:	83 e0       	ldi	r24, 0x03	; 3
     562:	08 95       	ret
		
	}
	else if(DIO_write(MOTOR_PORT1,MOTOR_PIN1,LOW)!=DIO_OK)
	{
		return MOTOR_INVALID_ROTATE;
     564:	83 e0       	ldi	r24, 0x03	; 3
     566:	08 95       	ret
	}
	else if(DIO_write(MOTOR_PORT2,MOTOR_PIN2,LOW)!=DIO_OK)
	{
		return MOTOR_INVALID_ROTATE;
     568:	83 e0       	ldi	r24, 0x03	; 3
     56a:	08 95       	ret
		return MOTOR_INVALID_ROTATE;
		
	}
	else
	{
		return MOTOR_OK;
     56c:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	
}
     56e:	08 95       	ret

00000570 <motor_stop>:


void motor_stop(void)
{
	DIO_write(MOTOR_PORT0,MOTOR_PIN0,LOW);
     570:	40 e0       	ldi	r20, 0x00	; 0
     572:	60 e0       	ldi	r22, 0x00	; 0
     574:	83 e4       	ldi	r24, 0x43	; 67
     576:	0e 94 c3 03 	call	0x786	; 0x786 <DIO_write>
	DIO_write(MOTOR_PORT1,MOTOR_PIN1,LOW);
     57a:	40 e0       	ldi	r20, 0x00	; 0
     57c:	61 e0       	ldi	r22, 0x01	; 1
     57e:	83 e4       	ldi	r24, 0x43	; 67
     580:	0e 94 c3 03 	call	0x786	; 0x786 <DIO_write>
	DIO_write(MOTOR_PORT2,MOTOR_PIN2,LOW);
     584:	40 e0       	ldi	r20, 0x00	; 0
     586:	62 e0       	ldi	r22, 0x02	; 2
     588:	83 e4       	ldi	r24, 0x43	; 67
     58a:	0e 94 c3 03 	call	0x786	; 0x786 <DIO_write>
	DIO_write(MOTOR_PORT3,MOTOR_PIN3,LOW);
     58e:	40 e0       	ldi	r20, 0x00	; 0
     590:	63 e0       	ldi	r22, 0x03	; 3
     592:	83 e4       	ldi	r24, 0x43	; 67
     594:	0e 94 c3 03 	call	0x786	; 0x786 <DIO_write>
     598:	08 95       	ret

0000059a <main>:

#include "./APP/application.h"

int main(void)
{
    APP_init();
     59a:	0e 94 52 00 	call	0xa4	; 0xa4 <APP_init>
	//while(1){
	APP_start();
     59e:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <APP_start>
	//}
}
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	08 95       	ret

000005a8 <DIO_clearBit>:
// function definitions
#include "dio.h"


void DIO_clearBit(uint8_t u8_a_portNumber,uint8_t u8_a_pinNumber){
	switch(u8_a_portNumber){
     5a8:	82 34       	cpi	r24, 0x42	; 66
     5aa:	a9 f0       	breq	.+42     	; 0x5d6 <DIO_clearBit+0x2e>
     5ac:	18 f4       	brcc	.+6      	; 0x5b4 <DIO_clearBit+0xc>
     5ae:	81 34       	cpi	r24, 0x41	; 65
     5b0:	31 f0       	breq	.+12     	; 0x5be <DIO_clearBit+0x16>
     5b2:	08 95       	ret
     5b4:	83 34       	cpi	r24, 0x43	; 67
     5b6:	d9 f0       	breq	.+54     	; 0x5ee <DIO_clearBit+0x46>
     5b8:	84 34       	cpi	r24, 0x44	; 68
     5ba:	29 f1       	breq	.+74     	; 0x606 <DIO_clearBit+0x5e>
     5bc:	08 95       	ret
		case PORT_A:{
			DDRA&=~(INITIAL_VALUE_1<<u8_a_pinNumber);
     5be:	2a b3       	in	r18, 0x1a	; 26
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	02 c0       	rjmp	.+4      	; 0x5ca <DIO_clearBit+0x22>
     5c6:	88 0f       	add	r24, r24
     5c8:	99 1f       	adc	r25, r25
     5ca:	6a 95       	dec	r22
     5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <DIO_clearBit+0x1e>
     5ce:	80 95       	com	r24
     5d0:	82 23       	and	r24, r18
     5d2:	8a bb       	out	0x1a, r24	; 26
			break;
     5d4:	08 95       	ret
		}
		
		case PORT_B:{
			DDRB&=~(INITIAL_VALUE_1<<u8_a_pinNumber);
     5d6:	27 b3       	in	r18, 0x17	; 23
     5d8:	81 e0       	ldi	r24, 0x01	; 1
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <DIO_clearBit+0x3a>
     5de:	88 0f       	add	r24, r24
     5e0:	99 1f       	adc	r25, r25
     5e2:	6a 95       	dec	r22
     5e4:	e2 f7       	brpl	.-8      	; 0x5de <DIO_clearBit+0x36>
     5e6:	80 95       	com	r24
     5e8:	82 23       	and	r24, r18
     5ea:	87 bb       	out	0x17, r24	; 23
			break;
     5ec:	08 95       	ret
		}
		case PORT_C:{
			DDRC&=~(INITIAL_VALUE_1<<u8_a_pinNumber);
     5ee:	24 b3       	in	r18, 0x14	; 20
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	02 c0       	rjmp	.+4      	; 0x5fa <DIO_clearBit+0x52>
     5f6:	88 0f       	add	r24, r24
     5f8:	99 1f       	adc	r25, r25
     5fa:	6a 95       	dec	r22
     5fc:	e2 f7       	brpl	.-8      	; 0x5f6 <DIO_clearBit+0x4e>
     5fe:	80 95       	com	r24
     600:	82 23       	and	r24, r18
     602:	84 bb       	out	0x14, r24	; 20
			break;
     604:	08 95       	ret
		}
		case PORT_D:{
			DDRD&=~(INITIAL_VALUE_1<<u8_a_pinNumber);
     606:	21 b3       	in	r18, 0x11	; 17
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	02 c0       	rjmp	.+4      	; 0x612 <DIO_clearBit+0x6a>
     60e:	88 0f       	add	r24, r24
     610:	99 1f       	adc	r25, r25
     612:	6a 95       	dec	r22
     614:	e2 f7       	brpl	.-8      	; 0x60e <DIO_clearBit+0x66>
     616:	80 95       	com	r24
     618:	82 23       	and	r24, r18
     61a:	81 bb       	out	0x11, r24	; 17
     61c:	08 95       	ret

0000061e <DIO_setBit>:
			break;
		}
	}
}
void DIO_setBit(uint8_t u8_a_portNumber,uint8_t u8_a_pinNumber){
		switch(u8_a_portNumber){
     61e:	82 34       	cpi	r24, 0x42	; 66
     620:	a1 f0       	breq	.+40     	; 0x64a <DIO_setBit+0x2c>
     622:	18 f4       	brcc	.+6      	; 0x62a <DIO_setBit+0xc>
     624:	81 34       	cpi	r24, 0x41	; 65
     626:	31 f0       	breq	.+12     	; 0x634 <DIO_setBit+0x16>
     628:	08 95       	ret
     62a:	83 34       	cpi	r24, 0x43	; 67
     62c:	c9 f0       	breq	.+50     	; 0x660 <DIO_setBit+0x42>
     62e:	84 34       	cpi	r24, 0x44	; 68
     630:	11 f1       	breq	.+68     	; 0x676 <DIO_setBit+0x58>
     632:	08 95       	ret
			case PORT_A:{
				DDRA|=(INITIAL_VALUE_1<<u8_a_pinNumber);
     634:	2a b3       	in	r18, 0x1a	; 26
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	02 c0       	rjmp	.+4      	; 0x640 <DIO_setBit+0x22>
     63c:	88 0f       	add	r24, r24
     63e:	99 1f       	adc	r25, r25
     640:	6a 95       	dec	r22
     642:	e2 f7       	brpl	.-8      	; 0x63c <DIO_setBit+0x1e>
     644:	82 2b       	or	r24, r18
     646:	8a bb       	out	0x1a, r24	; 26
				break;
     648:	08 95       	ret
			}
			
			case PORT_B:{
				DDRB|=(INITIAL_VALUE_1<<u8_a_pinNumber);
     64a:	27 b3       	in	r18, 0x17	; 23
     64c:	81 e0       	ldi	r24, 0x01	; 1
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	02 c0       	rjmp	.+4      	; 0x656 <DIO_setBit+0x38>
     652:	88 0f       	add	r24, r24
     654:	99 1f       	adc	r25, r25
     656:	6a 95       	dec	r22
     658:	e2 f7       	brpl	.-8      	; 0x652 <DIO_setBit+0x34>
     65a:	82 2b       	or	r24, r18
     65c:	87 bb       	out	0x17, r24	; 23
				break;
     65e:	08 95       	ret
			}
			case PORT_C:{
				DDRC|=(INITIAL_VALUE_1<<u8_a_pinNumber);
     660:	24 b3       	in	r18, 0x14	; 20
     662:	81 e0       	ldi	r24, 0x01	; 1
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	02 c0       	rjmp	.+4      	; 0x66c <DIO_setBit+0x4e>
     668:	88 0f       	add	r24, r24
     66a:	99 1f       	adc	r25, r25
     66c:	6a 95       	dec	r22
     66e:	e2 f7       	brpl	.-8      	; 0x668 <DIO_setBit+0x4a>
     670:	82 2b       	or	r24, r18
     672:	84 bb       	out	0x14, r24	; 20
				break;
     674:	08 95       	ret
			}
			case PORT_D:{
				DDRD|=(INITIAL_VALUE_1<<u8_a_pinNumber);
     676:	21 b3       	in	r18, 0x11	; 17
     678:	81 e0       	ldi	r24, 0x01	; 1
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	02 c0       	rjmp	.+4      	; 0x682 <DIO_setBit+0x64>
     67e:	88 0f       	add	r24, r24
     680:	99 1f       	adc	r25, r25
     682:	6a 95       	dec	r22
     684:	e2 f7       	brpl	.-8      	; 0x67e <DIO_setBit+0x60>
     686:	82 2b       	or	r24, r18
     688:	81 bb       	out	0x11, r24	; 17
     68a:	08 95       	ret

0000068c <DIO_init>:
		}
	}

EN_dioError_t DIO_init(uint8_t u8_a_portNumber,uint8_t u8_a_pinNumber,uint8_t u8_a_direction)
{
		if(u8_a_pinNumber>MAX_PORTS||u8_a_pinNumber<MIN_PORTS)
     68c:	68 30       	cpi	r22, 0x08	; 8
     68e:	08 f0       	brcs	.+2      	; 0x692 <DIO_init+0x6>
     690:	6e c0       	rjmp	.+220    	; 0x76e <DIO_init+0xe2>
		{
		return DIO_INVALID_PIN;
		}
		
	switch(u8_a_portNumber){
     692:	82 34       	cpi	r24, 0x42	; 66
     694:	19 f1       	breq	.+70     	; 0x6dc <DIO_init+0x50>
     696:	18 f4       	brcc	.+6      	; 0x69e <DIO_init+0x12>
     698:	81 34       	cpi	r24, 0x41	; 65
     69a:	39 f0       	breq	.+14     	; 0x6aa <DIO_init+0x1e>
     69c:	6a c0       	rjmp	.+212    	; 0x772 <DIO_init+0xe6>
     69e:	83 34       	cpi	r24, 0x43	; 67
     6a0:	b1 f1       	breq	.+108    	; 0x70e <DIO_init+0x82>
     6a2:	84 34       	cpi	r24, 0x44	; 68
     6a4:	09 f4       	brne	.+2      	; 0x6a8 <DIO_init+0x1c>
     6a6:	4b c0       	rjmp	.+150    	; 0x73e <DIO_init+0xb2>
     6a8:	64 c0       	rjmp	.+200    	; 0x772 <DIO_init+0xe6>
		case PORT_A:
		{
			if(u8_a_direction == IN){
     6aa:	41 11       	cpse	r20, r1
     6ac:	04 c0       	rjmp	.+8      	; 0x6b6 <DIO_init+0x2a>
				DIO_clearBit(u8_a_portNumber,u8_a_pinNumber);
     6ae:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <DIO_clearBit>
				return DIO_OK;
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	08 95       	ret
			}
			else if(u8_a_direction == OUT){
     6b6:	41 30       	cpi	r20, 0x01	; 1
     6b8:	09 f0       	breq	.+2      	; 0x6bc <DIO_init+0x30>
     6ba:	5d c0       	rjmp	.+186    	; 0x776 <DIO_init+0xea>
				CLEAR_BIT(PORTA,u8_a_pinNumber);
     6bc:	9b b3       	in	r25, 0x1b	; 27
     6be:	21 e0       	ldi	r18, 0x01	; 1
     6c0:	30 e0       	ldi	r19, 0x00	; 0
     6c2:	06 2e       	mov	r0, r22
     6c4:	02 c0       	rjmp	.+4      	; 0x6ca <DIO_init+0x3e>
     6c6:	22 0f       	add	r18, r18
     6c8:	33 1f       	adc	r19, r19
     6ca:	0a 94       	dec	r0
     6cc:	e2 f7       	brpl	.-8      	; 0x6c6 <DIO_init+0x3a>
     6ce:	20 95       	com	r18
     6d0:	29 23       	and	r18, r25
     6d2:	2b bb       	out	0x1b, r18	; 27
				DIO_setBit(u8_a_portNumber,u8_a_pinNumber);
     6d4:	0e 94 0f 03 	call	0x61e	; 0x61e <DIO_setBit>
				return DIO_OK;
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	08 95       	ret
			break;
		}
		
		case PORT_B:
		{
			if(u8_a_direction==IN){
     6dc:	41 11       	cpse	r20, r1
     6de:	04 c0       	rjmp	.+8      	; 0x6e8 <DIO_init+0x5c>
				DIO_clearBit(u8_a_portNumber,u8_a_pinNumber);
     6e0:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <DIO_clearBit>
				        return DIO_OK;
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	08 95       	ret
				        
			}
			else if(u8_a_direction==OUT){
     6e8:	41 30       	cpi	r20, 0x01	; 1
     6ea:	09 f0       	breq	.+2      	; 0x6ee <DIO_init+0x62>
     6ec:	46 c0       	rjmp	.+140    	; 0x77a <DIO_init+0xee>
				CLEAR_BIT(PORTB,u8_a_pinNumber);
     6ee:	98 b3       	in	r25, 0x18	; 24
     6f0:	21 e0       	ldi	r18, 0x01	; 1
     6f2:	30 e0       	ldi	r19, 0x00	; 0
     6f4:	06 2e       	mov	r0, r22
     6f6:	02 c0       	rjmp	.+4      	; 0x6fc <DIO_init+0x70>
     6f8:	22 0f       	add	r18, r18
     6fa:	33 1f       	adc	r19, r19
     6fc:	0a 94       	dec	r0
     6fe:	e2 f7       	brpl	.-8      	; 0x6f8 <DIO_init+0x6c>
     700:	20 95       	com	r18
     702:	29 23       	and	r18, r25
     704:	28 bb       	out	0x18, r18	; 24
				DIO_setBit(u8_a_portNumber,u8_a_pinNumber);
     706:	0e 94 0f 03 	call	0x61e	; 0x61e <DIO_setBit>
				        return DIO_OK;
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	08 95       	ret
			break;
		}
		
		case PORT_C:
		{
			if(u8_a_direction==IN){
     70e:	41 11       	cpse	r20, r1
     710:	04 c0       	rjmp	.+8      	; 0x71a <DIO_init+0x8e>
				DIO_clearBit(u8_a_portNumber,u8_a_pinNumber);
     712:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <DIO_clearBit>
				        return DIO_OK;
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	08 95       	ret
				        
			}
			else if(u8_a_direction==OUT){
     71a:	41 30       	cpi	r20, 0x01	; 1
     71c:	81 f5       	brne	.+96     	; 0x77e <DIO_init+0xf2>
				CLEAR_BIT(PORTC,u8_a_pinNumber);
     71e:	95 b3       	in	r25, 0x15	; 21
     720:	21 e0       	ldi	r18, 0x01	; 1
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	06 2e       	mov	r0, r22
     726:	02 c0       	rjmp	.+4      	; 0x72c <DIO_init+0xa0>
     728:	22 0f       	add	r18, r18
     72a:	33 1f       	adc	r19, r19
     72c:	0a 94       	dec	r0
     72e:	e2 f7       	brpl	.-8      	; 0x728 <DIO_init+0x9c>
     730:	20 95       	com	r18
     732:	29 23       	and	r18, r25
     734:	25 bb       	out	0x15, r18	; 21
				DIO_setBit(u8_a_portNumber,u8_a_pinNumber);
     736:	0e 94 0f 03 	call	0x61e	; 0x61e <DIO_setBit>
				        return DIO_OK;
     73a:	80 e0       	ldi	r24, 0x00	; 0
     73c:	08 95       	ret
			break;
		}
		
		case PORT_D:
		{
			if(u8_a_direction==IN){
     73e:	41 11       	cpse	r20, r1
     740:	04 c0       	rjmp	.+8      	; 0x74a <DIO_init+0xbe>
				DIO_clearBit(u8_a_portNumber,u8_a_pinNumber);
     742:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <DIO_clearBit>
				return DIO_OK;
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	08 95       	ret
			}
			else if(u8_a_direction==OUT){
     74a:	41 30       	cpi	r20, 0x01	; 1
     74c:	d1 f4       	brne	.+52     	; 0x782 <DIO_init+0xf6>
				CLEAR_BIT(PORTD,u8_a_pinNumber);
     74e:	92 b3       	in	r25, 0x12	; 18
     750:	21 e0       	ldi	r18, 0x01	; 1
     752:	30 e0       	ldi	r19, 0x00	; 0
     754:	06 2e       	mov	r0, r22
     756:	02 c0       	rjmp	.+4      	; 0x75c <DIO_init+0xd0>
     758:	22 0f       	add	r18, r18
     75a:	33 1f       	adc	r19, r19
     75c:	0a 94       	dec	r0
     75e:	e2 f7       	brpl	.-8      	; 0x758 <DIO_init+0xcc>
     760:	20 95       	com	r18
     762:	29 23       	and	r18, r25
     764:	22 bb       	out	0x12, r18	; 18
				DIO_setBit(u8_a_portNumber,u8_a_pinNumber);
     766:	0e 94 0f 03 	call	0x61e	; 0x61e <DIO_setBit>
				        return DIO_OK;
     76a:	80 e0       	ldi	r24, 0x00	; 0
     76c:	08 95       	ret

EN_dioError_t DIO_init(uint8_t u8_a_portNumber,uint8_t u8_a_pinNumber,uint8_t u8_a_direction)
{
		if(u8_a_pinNumber>MAX_PORTS||u8_a_pinNumber<MIN_PORTS)
		{
		return DIO_INVALID_PIN;
     76e:	82 e0       	ldi	r24, 0x02	; 2
     770:	08 95       	ret
				return DIO_INVALID_INIT;
			}
			break;
		}
		default:{
			return DIO_INVALID_PORT;
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	08 95       	ret
				CLEAR_BIT(PORTA,u8_a_pinNumber);
				DIO_setBit(u8_a_portNumber,u8_a_pinNumber);
				return DIO_OK;
			}
			else{
				return DIO_INVALID_INIT;
     776:	83 e0       	ldi	r24, 0x03	; 3
     778:	08 95       	ret
				DIO_setBit(u8_a_portNumber,u8_a_pinNumber);
				        return DIO_OK;
				        
			}
			else{
				return DIO_INVALID_INIT;
     77a:	83 e0       	ldi	r24, 0x03	; 3
     77c:	08 95       	ret
				DIO_setBit(u8_a_portNumber,u8_a_pinNumber);
				        return DIO_OK;
				        
			}
			else{
				return DIO_INVALID_INIT;
     77e:	83 e0       	ldi	r24, 0x03	; 3
     780:	08 95       	ret
				CLEAR_BIT(PORTD,u8_a_pinNumber);
				DIO_setBit(u8_a_portNumber,u8_a_pinNumber);
				        return DIO_OK;
			}
			else{
				return DIO_INVALID_INIT;
     782:	83 e0       	ldi	r24, 0x03	; 3
			return DIO_INVALID_PORT;
		}	
	}
			return DIO_INVALID_PORT;
			
}
     784:	08 95       	ret

00000786 <DIO_write>:

EN_dioError_t DIO_write(uint8_t u8_a_portNumber,uint8_t u8_a_pinNumber,uint8_t u8_a_value){
	if(u8_a_pinNumber>MAX_PORTS||u8_a_pinNumber<MIN_PORTS)
     786:	68 30       	cpi	r22, 0x08	; 8
     788:	08 f0       	brcs	.+2      	; 0x78c <DIO_write+0x6>
     78a:	83 c0       	rjmp	.+262    	; 0x892 <__stack+0x33>
	{
		return DIO_INVALID_PIN;

	}
	switch(u8_a_portNumber)
     78c:	82 34       	cpi	r24, 0x42	; 66
     78e:	49 f1       	breq	.+82     	; 0x7e2 <DIO_write+0x5c>
     790:	18 f4       	brcc	.+6      	; 0x798 <DIO_write+0x12>
     792:	81 34       	cpi	r24, 0x41	; 65
     794:	41 f0       	breq	.+16     	; 0x7a6 <DIO_write+0x20>
     796:	7f c0       	rjmp	.+254    	; 0x896 <__stack+0x37>
     798:	83 34       	cpi	r24, 0x43	; 67
     79a:	09 f4       	brne	.+2      	; 0x79e <DIO_write+0x18>
     79c:	40 c0       	rjmp	.+128    	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
     79e:	84 34       	cpi	r24, 0x44	; 68
     7a0:	09 f4       	brne	.+2      	; 0x7a4 <DIO_write+0x1e>
     7a2:	5a c0       	rjmp	.+180    	; 0x858 <__DATA_REGION_LENGTH__+0x58>
     7a4:	78 c0       	rjmp	.+240    	; 0x896 <__stack+0x37>
	{
		case PORT_A:{
			if(u8_a_value==LOW){
     7a6:	41 11       	cpse	r20, r1
     7a8:	0d c0       	rjmp	.+26     	; 0x7c4 <DIO_write+0x3e>
				PORTA&=~(INITIAL_VALUE_1<<u8_a_pinNumber); 
     7aa:	2b b3       	in	r18, 0x1b	; 27
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <DIO_write+0x30>
     7b2:	88 0f       	add	r24, r24
     7b4:	99 1f       	adc	r25, r25
     7b6:	6a 95       	dec	r22
     7b8:	e2 f7       	brpl	.-8      	; 0x7b2 <DIO_write+0x2c>
     7ba:	80 95       	com	r24
     7bc:	82 23       	and	r24, r18
     7be:	8b bb       	out	0x1b, r24	; 27
			 return DIO_OK;
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	08 95       	ret
			}
			else if(u8_a_value==HIGH){
     7c4:	41 30       	cpi	r20, 0x01	; 1
     7c6:	09 f0       	breq	.+2      	; 0x7ca <DIO_write+0x44>
     7c8:	68 c0       	rjmp	.+208    	; 0x89a <__stack+0x3b>
				PORTA|=(INITIAL_VALUE_1<<u8_a_pinNumber);
     7ca:	2b b3       	in	r18, 0x1b	; 27
     7cc:	81 e0       	ldi	r24, 0x01	; 1
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <DIO_write+0x50>
     7d2:	88 0f       	add	r24, r24
     7d4:	99 1f       	adc	r25, r25
     7d6:	6a 95       	dec	r22
     7d8:	e2 f7       	brpl	.-8      	; 0x7d2 <DIO_write+0x4c>
     7da:	82 2b       	or	r24, r18
     7dc:	8b bb       	out	0x1b, r24	; 27
			 return DIO_OK;
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	08 95       	ret
			}
			break;
		}
		
		case PORT_B:{
			if(u8_a_value==LOW){
     7e2:	41 11       	cpse	r20, r1
     7e4:	0d c0       	rjmp	.+26     	; 0x800 <__DATA_REGION_LENGTH__>
				PORTB&=~(INITIAL_VALUE_1<<u8_a_pinNumber);
     7e6:	28 b3       	in	r18, 0x18	; 24
     7e8:	81 e0       	ldi	r24, 0x01	; 1
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	02 c0       	rjmp	.+4      	; 0x7f2 <DIO_write+0x6c>
     7ee:	88 0f       	add	r24, r24
     7f0:	99 1f       	adc	r25, r25
     7f2:	6a 95       	dec	r22
     7f4:	e2 f7       	brpl	.-8      	; 0x7ee <DIO_write+0x68>
     7f6:	80 95       	com	r24
     7f8:	82 23       	and	r24, r18
     7fa:	88 bb       	out	0x18, r24	; 24
			 return DIO_OK;
     7fc:	80 e0       	ldi	r24, 0x00	; 0
     7fe:	08 95       	ret
			 
			}
			else if(u8_a_value==HIGH){
     800:	41 30       	cpi	r20, 0x01	; 1
     802:	09 f0       	breq	.+2      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     804:	4c c0       	rjmp	.+152    	; 0x89e <__stack+0x3f>
				PORTB|=(INITIAL_VALUE_1<<u8_a_pinNumber);
     806:	28 b3       	in	r18, 0x18	; 24
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	02 c0       	rjmp	.+4      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     80e:	88 0f       	add	r24, r24
     810:	99 1f       	adc	r25, r25
     812:	6a 95       	dec	r22
     814:	e2 f7       	brpl	.-8      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     816:	82 2b       	or	r24, r18
     818:	88 bb       	out	0x18, r24	; 24
			 return DIO_OK;
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	08 95       	ret
			}
			break;
		}
		
		case PORT_C:{
			if(u8_a_value==LOW){
     81e:	41 11       	cpse	r20, r1
     820:	0d c0       	rjmp	.+26     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
				PORTC&=~(INITIAL_VALUE_1<<u8_a_pinNumber);
     822:	25 b3       	in	r18, 0x15	; 21
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	02 c0       	rjmp	.+4      	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
     82a:	88 0f       	add	r24, r24
     82c:	99 1f       	adc	r25, r25
     82e:	6a 95       	dec	r22
     830:	e2 f7       	brpl	.-8      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
     832:	80 95       	com	r24
     834:	82 23       	and	r24, r18
     836:	85 bb       	out	0x15, r24	; 21
			 return DIO_OK;
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	08 95       	ret
			 
			}
			else if(u8_a_value==HIGH){
     83c:	41 30       	cpi	r20, 0x01	; 1
     83e:	89 f5       	brne	.+98     	; 0x8a2 <__stack+0x43>
				PORTC|=(INITIAL_VALUE_1<<u8_a_pinNumber);
     840:	25 b3       	in	r18, 0x15	; 21
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	02 c0       	rjmp	.+4      	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
     848:	88 0f       	add	r24, r24
     84a:	99 1f       	adc	r25, r25
     84c:	6a 95       	dec	r22
     84e:	e2 f7       	brpl	.-8      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
     850:	82 2b       	or	r24, r18
     852:	85 bb       	out	0x15, r24	; 21
			 return DIO_OK;
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	08 95       	ret
			}
			break;
		}
		
		case PORT_D:{
			if(u8_a_value == LOW)
     858:	41 11       	cpse	r20, r1
     85a:	0d c0       	rjmp	.+26     	; 0x876 <__stack+0x17>
			{
				PORTD&=~(INITIAL_VALUE_1<<u8_a_pinNumber);
     85c:	22 b3       	in	r18, 0x12	; 18
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	02 c0       	rjmp	.+4      	; 0x868 <__stack+0x9>
     864:	88 0f       	add	r24, r24
     866:	99 1f       	adc	r25, r25
     868:	6a 95       	dec	r22
     86a:	e2 f7       	brpl	.-8      	; 0x864 <__stack+0x5>
     86c:	80 95       	com	r24
     86e:	82 23       	and	r24, r18
     870:	82 bb       	out	0x12, r24	; 18
			 return DIO_OK;
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	08 95       	ret
			 
			}
			else if(u8_a_value == HIGH)
     876:	41 30       	cpi	r20, 0x01	; 1
     878:	b1 f4       	brne	.+44     	; 0x8a6 <__stack+0x47>
			{
			PORTD|=(INITIAL_VALUE_1<<u8_a_pinNumber);
     87a:	22 b3       	in	r18, 0x12	; 18
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	02 c0       	rjmp	.+4      	; 0x886 <__stack+0x27>
     882:	88 0f       	add	r24, r24
     884:	99 1f       	adc	r25, r25
     886:	6a 95       	dec	r22
     888:	e2 f7       	brpl	.-8      	; 0x882 <__stack+0x23>
     88a:	82 2b       	or	r24, r18
     88c:	82 bb       	out	0x12, r24	; 18
			return DIO_OK;
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	08 95       	ret
}

EN_dioError_t DIO_write(uint8_t u8_a_portNumber,uint8_t u8_a_pinNumber,uint8_t u8_a_value){
	if(u8_a_pinNumber>MAX_PORTS||u8_a_pinNumber<MIN_PORTS)
	{
		return DIO_INVALID_PIN;
     892:	82 e0       	ldi	r24, 0x02	; 2
     894:	08 95       	ret
				return DIO_INVALID_VALUE;
			}
			break;
		}
		default:{
			return DIO_INVALID_PORT;
     896:	81 e0       	ldi	r24, 0x01	; 1
     898:	08 95       	ret
				PORTA|=(INITIAL_VALUE_1<<u8_a_pinNumber);
			 return DIO_OK;
			 
			}
			else{
				return DIO_INVALID_VALUE;
     89a:	84 e0       	ldi	r24, 0x04	; 4
     89c:	08 95       	ret
				PORTB|=(INITIAL_VALUE_1<<u8_a_pinNumber);
			 return DIO_OK;
			 
			}
			else{
				return DIO_INVALID_VALUE;
     89e:	84 e0       	ldi	r24, 0x04	; 4
     8a0:	08 95       	ret
				PORTC|=(INITIAL_VALUE_1<<u8_a_pinNumber);
			 return DIO_OK;
			 
			}
			else{
				return DIO_INVALID_VALUE;
     8a2:	84 e0       	ldi	r24, 0x04	; 4
     8a4:	08 95       	ret
			{
			PORTD|=(INITIAL_VALUE_1<<u8_a_pinNumber);
			return DIO_OK;
			}
			else{
				return DIO_INVALID_VALUE;
     8a6:	84 e0       	ldi	r24, 0x04	; 4
		}
		default:{
			return DIO_INVALID_PORT;
		}
	}
}
     8a8:	08 95       	ret

000008aa <INTERRUPTS_enableExternalInterrupts>:
}
// Disable global interrupts
void INTERRUPTS_disableGlobalInterrupt(void)
{
	
	cli();
     8aa:	81 30       	cpi	r24, 0x01	; 1
     8ac:	49 f0       	breq	.+18     	; 0x8c0 <INTERRUPTS_enableExternalInterrupts+0x16>
     8ae:	18 f0       	brcs	.+6      	; 0x8b6 <INTERRUPTS_enableExternalInterrupts+0xc>
     8b0:	82 30       	cpi	r24, 0x02	; 2
     8b2:	59 f0       	breq	.+22     	; 0x8ca <INTERRUPTS_enableExternalInterrupts+0x20>
     8b4:	0f c0       	rjmp	.+30     	; 0x8d4 <INTERRUPTS_enableExternalInterrupts+0x2a>
     8b6:	8b b7       	in	r24, 0x3b	; 59
     8b8:	80 64       	ori	r24, 0x40	; 64
     8ba:	8b bf       	out	0x3b, r24	; 59
     8bc:	80 e0       	ldi	r24, 0x00	; 0
     8be:	08 95       	ret
     8c0:	8b b7       	in	r24, 0x3b	; 59
     8c2:	80 68       	ori	r24, 0x80	; 128
     8c4:	8b bf       	out	0x3b, r24	; 59
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	08 95       	ret
     8ca:	8b b7       	in	r24, 0x3b	; 59
     8cc:	80 62       	ori	r24, 0x20	; 32
     8ce:	8b bf       	out	0x3b, r24	; 59
     8d0:	80 e0       	ldi	r24, 0x00	; 0
     8d2:	08 95       	ret
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	08 95       	ret

000008d8 <INTERRUPTS_enableGlobalInterrupt>:
     8d8:	78 94       	sei
     8da:	08 95       	ret

000008dc <INTERRUPTS_extInterruptsEdge>:


EN_InterruptError_t INTERRUPTS_extInterruptsEdge(uint8_t u8_a_interrupt, uint8_t u8_a_edge)
{
	
	switch (u8_a_interrupt)
     8dc:	81 30       	cpi	r24, 0x01	; 1
     8de:	69 f1       	breq	.+90     	; 0x93a <INTERRUPTS_extInterruptsEdge+0x5e>
     8e0:	20 f0       	brcs	.+8      	; 0x8ea <INTERRUPTS_extInterruptsEdge+0xe>
     8e2:	82 30       	cpi	r24, 0x02	; 2
     8e4:	09 f4       	brne	.+2      	; 0x8e8 <INTERRUPTS_extInterruptsEdge+0xc>
     8e6:	51 c0       	rjmp	.+162    	; 0x98a <INTERRUPTS_extInterruptsEdge+0xae>
     8e8:	5f c0       	rjmp	.+190    	; 0x9a8 <INTERRUPTS_extInterruptsEdge+0xcc>
	{	
		case EXTERNAL_INTERRUPT_0:
		switch (u8_a_edge)
     8ea:	61 30       	cpi	r22, 0x01	; 1
     8ec:	71 f0       	breq	.+28     	; 0x90a <INTERRUPTS_extInterruptsEdge+0x2e>
     8ee:	28 f0       	brcs	.+10     	; 0x8fa <INTERRUPTS_extInterruptsEdge+0x1e>
     8f0:	62 30       	cpi	r22, 0x02	; 2
     8f2:	99 f0       	breq	.+38     	; 0x91a <INTERRUPTS_extInterruptsEdge+0x3e>
     8f4:	63 30       	cpi	r22, 0x03	; 3
     8f6:	c9 f0       	breq	.+50     	; 0x92a <INTERRUPTS_extInterruptsEdge+0x4e>
     8f8:	59 c0       	rjmp	.+178    	; 0x9ac <INTERRUPTS_extInterruptsEdge+0xd0>
		{
			case LOW_LEVEL:
			CLEAR_BIT(MCUCR,ISC00);
     8fa:	85 b7       	in	r24, 0x35	; 53
     8fc:	8e 7f       	andi	r24, 0xFE	; 254
     8fe:	85 bf       	out	0x35, r24	; 53
			CLEAR_BIT(MCUCR,ISC01);
     900:	85 b7       	in	r24, 0x35	; 53
     902:	8d 7f       	andi	r24, 0xFD	; 253
     904:	85 bf       	out	0x35, r24	; 53
			return INTERRUPT_OK;
     906:	80 e0       	ldi	r24, 0x00	; 0
     908:	08 95       	ret
			
			case LOGICAL_CHANGE:
			SET_BIT(MCUCR,ISC00);
     90a:	85 b7       	in	r24, 0x35	; 53
     90c:	81 60       	ori	r24, 0x01	; 1
     90e:	85 bf       	out	0x35, r24	; 53
			CLEAR_BIT(MCUCR,ISC01);
     910:	85 b7       	in	r24, 0x35	; 53
     912:	8d 7f       	andi	r24, 0xFD	; 253
     914:	85 bf       	out	0x35, r24	; 53
			return INTERRUPT_OK;
     916:	80 e0       	ldi	r24, 0x00	; 0
     918:	08 95       	ret
			
			case FALLING_EDGE:
			CLEAR_BIT(MCUCR,ISC00);
     91a:	85 b7       	in	r24, 0x35	; 53
     91c:	8e 7f       	andi	r24, 0xFE	; 254
     91e:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC01);
     920:	85 b7       	in	r24, 0x35	; 53
     922:	82 60       	ori	r24, 0x02	; 2
     924:	85 bf       	out	0x35, r24	; 53
			return INTERRUPT_OK;
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	08 95       	ret
			
			case RISING_EDGE:
			SET_BIT(MCUCR,ISC00);
     92a:	85 b7       	in	r24, 0x35	; 53
     92c:	81 60       	ori	r24, 0x01	; 1
     92e:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC01);
     930:	85 b7       	in	r24, 0x35	; 53
     932:	82 60       	ori	r24, 0x02	; 2
     934:	85 bf       	out	0x35, r24	; 53
			return INTERRUPT_OK;
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	08 95       	ret
			//do nothing
			return INTERRUPT_INVALID_EDGE;
		
		}
		case EXTERNAL_INTERRUPT_1:
		switch (u8_a_edge)
     93a:	61 30       	cpi	r22, 0x01	; 1
     93c:	71 f0       	breq	.+28     	; 0x95a <INTERRUPTS_extInterruptsEdge+0x7e>
     93e:	28 f0       	brcs	.+10     	; 0x94a <INTERRUPTS_extInterruptsEdge+0x6e>
     940:	62 30       	cpi	r22, 0x02	; 2
     942:	99 f0       	breq	.+38     	; 0x96a <INTERRUPTS_extInterruptsEdge+0x8e>
     944:	63 30       	cpi	r22, 0x03	; 3
     946:	c9 f0       	breq	.+50     	; 0x97a <INTERRUPTS_extInterruptsEdge+0x9e>
     948:	33 c0       	rjmp	.+102    	; 0x9b0 <INTERRUPTS_extInterruptsEdge+0xd4>
		{
			case LOW_LEVEL:
			CLEAR_BIT(MCUCR,ISC10);
     94a:	85 b7       	in	r24, 0x35	; 53
     94c:	8b 7f       	andi	r24, 0xFB	; 251
     94e:	85 bf       	out	0x35, r24	; 53
			CLEAR_BIT(MCUCR,ISC11);
     950:	85 b7       	in	r24, 0x35	; 53
     952:	87 7f       	andi	r24, 0xF7	; 247
     954:	85 bf       	out	0x35, r24	; 53
			return INTERRUPT_OK;
     956:	80 e0       	ldi	r24, 0x00	; 0
     958:	08 95       	ret
			
			case LOGICAL_CHANGE:
			SET_BIT(MCUCR,ISC10);
     95a:	85 b7       	in	r24, 0x35	; 53
     95c:	84 60       	ori	r24, 0x04	; 4
     95e:	85 bf       	out	0x35, r24	; 53
			CLEAR_BIT(MCUCR,ISC11);
     960:	85 b7       	in	r24, 0x35	; 53
     962:	87 7f       	andi	r24, 0xF7	; 247
     964:	85 bf       	out	0x35, r24	; 53
			return INTERRUPT_OK;
     966:	80 e0       	ldi	r24, 0x00	; 0
     968:	08 95       	ret
			
			case FALLING_EDGE:
			CLEAR_BIT(MCUCR,ISC10);
     96a:	85 b7       	in	r24, 0x35	; 53
     96c:	8b 7f       	andi	r24, 0xFB	; 251
     96e:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC11);
     970:	85 b7       	in	r24, 0x35	; 53
     972:	88 60       	ori	r24, 0x08	; 8
     974:	85 bf       	out	0x35, r24	; 53
			return INTERRUPT_OK;
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	08 95       	ret
			
			case RISING_EDGE:
			SET_BIT(MCUCR,ISC10);
     97a:	85 b7       	in	r24, 0x35	; 53
     97c:	84 60       	ori	r24, 0x04	; 4
     97e:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC11);
     980:	85 b7       	in	r24, 0x35	; 53
     982:	88 60       	ori	r24, 0x08	; 8
     984:	85 bf       	out	0x35, r24	; 53
			return INTERRUPT_OK;
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	08 95       	ret
			
		}
		return INTERRUPT_OK;
			
		case EXTERNAL_INTERRUPT_2:
		switch (u8_a_edge)
     98a:	62 30       	cpi	r22, 0x02	; 2
     98c:	19 f0       	breq	.+6      	; 0x994 <INTERRUPTS_extInterruptsEdge+0xb8>
     98e:	63 30       	cpi	r22, 0x03	; 3
     990:	31 f0       	breq	.+12     	; 0x99e <INTERRUPTS_extInterruptsEdge+0xc2>
     992:	10 c0       	rjmp	.+32     	; 0x9b4 <INTERRUPTS_extInterruptsEdge+0xd8>
		{
			
			case FALLING_EDGE:
			CLEAR_BIT(MCUCSR,ISC2);
     994:	84 b7       	in	r24, 0x34	; 52
     996:	8f 7b       	andi	r24, 0xBF	; 191
     998:	84 bf       	out	0x34, r24	; 52
			return INTERRUPT_OK;
     99a:	80 e0       	ldi	r24, 0x00	; 0
     99c:	08 95       	ret
			
			case RISING_EDGE:
			SET_BIT(MCUCSR,ISC2);
     99e:	84 b7       	in	r24, 0x34	; 52
     9a0:	80 64       	ori	r24, 0x40	; 64
     9a2:	84 bf       	out	0x34, r24	; 52
			return INTERRUPT_OK;
     9a4:	80 e0       	ldi	r24, 0x00	; 0
     9a6:	08 95       	ret
		}
		return INTERRUPT_OK;
			
		default:
		//do nothing
		return INTERRUPT_INVALID_EDGE;
     9a8:	82 e0       	ldi	r24, 0x02	; 2
     9aa:	08 95       	ret
			SET_BIT(MCUCR,ISC01);
			return INTERRUPT_OK;
			
			default:
			//do nothing
			return INTERRUPT_INVALID_EDGE;
     9ac:	82 e0       	ldi	r24, 0x02	; 2
     9ae:	08 95       	ret
			SET_BIT(MCUCR,ISC11);
			return INTERRUPT_OK;
			
			default:
			//do nothing
			return INTERRUPT_INVALID_EDGE;
     9b0:	82 e0       	ldi	r24, 0x02	; 2
     9b2:	08 95       	ret
			SET_BIT(MCUCSR,ISC2);
			return INTERRUPT_OK;
			
			default:
			//do nothing
			return INTERRUPT_INVALID_EDGE;
     9b4:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	
	
	
}
     9b6:	08 95       	ret

000009b8 <INTERRUPTS_EXT_SetCallBack>:

/************************************Call back functions*********************************************/

EN_InterruptError_t INTERRUPTS_EXT_SetCallBack(uint8_t u8_a_interrupt, void(*LocalPtr)(void))
{
	switch(u8_a_interrupt)
     9b8:	81 30       	cpi	r24, 0x01	; 1
     9ba:	51 f0       	breq	.+20     	; 0x9d0 <INTERRUPTS_EXT_SetCallBack+0x18>
     9bc:	18 f0       	brcs	.+6      	; 0x9c4 <INTERRUPTS_EXT_SetCallBack+0xc>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	69 f0       	breq	.+26     	; 0x9dc <INTERRUPTS_EXT_SetCallBack+0x24>
     9c2:	12 c0       	rjmp	.+36     	; 0x9e8 <INTERRUPTS_EXT_SetCallBack+0x30>
	{
		case EXTERNAL_INTERRUPT_0:	
		INT0_CallBack_ptr=LocalPtr;
     9c4:	70 93 66 00 	sts	0x0066, r23	; 0x800066 <INT0_CallBack_ptr+0x1>
     9c8:	60 93 65 00 	sts	0x0065, r22	; 0x800065 <INT0_CallBack_ptr>
		return INTERRUPT_OK;
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	08 95       	ret
		
		case EXTERNAL_INTERRUPT_1:
		INT1_CallBack_ptr=LocalPtr;
     9d0:	70 93 64 00 	sts	0x0064, r23	; 0x800064 <INT1_CallBack_ptr+0x1>
     9d4:	60 93 63 00 	sts	0x0063, r22	; 0x800063 <INT1_CallBack_ptr>
		return INTERRUPT_OK;
     9d8:	80 e0       	ldi	r24, 0x00	; 0
     9da:	08 95       	ret
		
		case EXTERNAL_INTERRUPT_2:
		INT2_CallBack_ptr=LocalPtr;
     9dc:	70 93 62 00 	sts	0x0062, r23	; 0x800062 <INT2_CallBack_ptr+0x1>
     9e0:	60 93 61 00 	sts	0x0061, r22	; 0x800061 <INT2_CallBack_ptr>
		return INTERRUPT_OK;
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	08 95       	ret
		
		default:
		//do nothing
		return INTERRUPT_SETCB_FAIL;
     9e8:	83 e0       	ldi	r24, 0x03	; 3
	}
		
}
     9ea:	08 95       	ret

000009ec <INTERRUPTS_leds_init>:

void INTERRUPTS_leds_init(void)
{
		DIO_write(LED_0_PORT, LED_0_PIN,LOW);
     9ec:	40 e0       	ldi	r20, 0x00	; 0
     9ee:	60 e0       	ldi	r22, 0x00	; 0
     9f0:	81 e4       	ldi	r24, 0x41	; 65
     9f2:	0e 94 c3 03 	call	0x786	; 0x786 <DIO_write>
		DIO_write(LED_1_PORT, LED_1_PIN,LOW);
     9f6:	40 e0       	ldi	r20, 0x00	; 0
     9f8:	62 e0       	ldi	r22, 0x02	; 2
     9fa:	81 e4       	ldi	r24, 0x41	; 65
     9fc:	0e 94 c3 03 	call	0x786	; 0x786 <DIO_write>
		DIO_write(LED_2_PORT, LED_2_PIN,LOW);
     a00:	40 e0       	ldi	r20, 0x00	; 0
     a02:	65 e0       	ldi	r22, 0x05	; 5
     a04:	81 e4       	ldi	r24, 0x41	; 65
     a06:	0e 94 c3 03 	call	0x786	; 0x786 <DIO_write>
		DIO_write(LED_3_PORT, LED_3_PIN,LOW);
     a0a:	40 e0       	ldi	r20, 0x00	; 0
     a0c:	67 e0       	ldi	r22, 0x07	; 7
     a0e:	81 e4       	ldi	r24, 0x41	; 65
     a10:	0e 94 c3 03 	call	0x786	; 0x786 <DIO_write>
     a14:	08 95       	ret

00000a16 <__vector_1>:
}

//ISR functions for EXI0, and EXI1

ISR (EXT_INT_0)
{
     a16:	1f 92       	push	r1
     a18:	0f 92       	push	r0
     a1a:	0f b6       	in	r0, 0x3f	; 63
     a1c:	0f 92       	push	r0
     a1e:	11 24       	eor	r1, r1
     a20:	2f 93       	push	r18
     a22:	3f 93       	push	r19
     a24:	4f 93       	push	r20
     a26:	5f 93       	push	r21
     a28:	6f 93       	push	r22
     a2a:	7f 93       	push	r23
     a2c:	8f 93       	push	r24
     a2e:	9f 93       	push	r25
     a30:	af 93       	push	r26
     a32:	bf 93       	push	r27
     a34:	ef 93       	push	r30
     a36:	ff 93       	push	r31
	u8_g_timerBtn_flag = INITIAL_VALUE_0;
     a38:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_end>
	if (INT0_CallBack_ptr != NULLPTR)
     a3c:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <INT0_CallBack_ptr>
     a40:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <INT0_CallBack_ptr+0x1>
     a44:	30 97       	sbiw	r30, 0x00	; 0
     a46:	19 f0       	breq	.+6      	; 0xa4e <__vector_1+0x38>
	{
		INT0_CallBack_ptr();
     a48:	09 95       	icall
		INTERRUPTS_leds_init();
     a4a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <INTERRUPTS_leds_init>
	}
}
     a4e:	ff 91       	pop	r31
     a50:	ef 91       	pop	r30
     a52:	bf 91       	pop	r27
     a54:	af 91       	pop	r26
     a56:	9f 91       	pop	r25
     a58:	8f 91       	pop	r24
     a5a:	7f 91       	pop	r23
     a5c:	6f 91       	pop	r22
     a5e:	5f 91       	pop	r21
     a60:	4f 91       	pop	r20
     a62:	3f 91       	pop	r19
     a64:	2f 91       	pop	r18
     a66:	0f 90       	pop	r0
     a68:	0f be       	out	0x3f, r0	; 63
     a6a:	0f 90       	pop	r0
     a6c:	1f 90       	pop	r1
     a6e:	18 95       	reti

00000a70 <__vector_2>:

ISR(EXT_INT_1)
{
     a70:	1f 92       	push	r1
     a72:	0f 92       	push	r0
     a74:	0f b6       	in	r0, 0x3f	; 63
     a76:	0f 92       	push	r0
     a78:	11 24       	eor	r1, r1
     a7a:	2f 93       	push	r18
     a7c:	3f 93       	push	r19
     a7e:	4f 93       	push	r20
     a80:	5f 93       	push	r21
     a82:	6f 93       	push	r22
     a84:	7f 93       	push	r23
     a86:	8f 93       	push	r24
     a88:	9f 93       	push	r25
     a8a:	af 93       	push	r26
     a8c:	bf 93       	push	r27
     a8e:	ef 93       	push	r30
     a90:	ff 93       	push	r31
	if (INT1_CallBack_ptr!=NULLPTR)
     a92:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <INT1_CallBack_ptr>
     a96:	f0 91 64 00 	lds	r31, 0x0064	; 0x800064 <INT1_CallBack_ptr+0x1>
     a9a:	30 97       	sbiw	r30, 0x00	; 0
     a9c:	09 f0       	breq	.+2      	; 0xaa0 <__vector_2+0x30>
	{
		INT1_CallBack_ptr();
     a9e:	09 95       	icall
	}
	u8_g_timerBtn_flag = INITIAL_VALUE_1;
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_end>
}
     aa6:	ff 91       	pop	r31
     aa8:	ef 91       	pop	r30
     aaa:	bf 91       	pop	r27
     aac:	af 91       	pop	r26
     aae:	9f 91       	pop	r25
     ab0:	8f 91       	pop	r24
     ab2:	7f 91       	pop	r23
     ab4:	6f 91       	pop	r22
     ab6:	5f 91       	pop	r21
     ab8:	4f 91       	pop	r20
     aba:	3f 91       	pop	r19
     abc:	2f 91       	pop	r18
     abe:	0f 90       	pop	r0
     ac0:	0f be       	out	0x3f, r0	; 63
     ac2:	0f 90       	pop	r0
     ac4:	1f 90       	pop	r1
     ac6:	18 95       	reti

00000ac8 <__vector_3>:
ISR(EXT_INT_2)
{
     ac8:	1f 92       	push	r1
     aca:	0f 92       	push	r0
     acc:	0f b6       	in	r0, 0x3f	; 63
     ace:	0f 92       	push	r0
     ad0:	11 24       	eor	r1, r1
     ad2:	2f 93       	push	r18
     ad4:	3f 93       	push	r19
     ad6:	4f 93       	push	r20
     ad8:	5f 93       	push	r21
     ada:	6f 93       	push	r22
     adc:	7f 93       	push	r23
     ade:	8f 93       	push	r24
     ae0:	9f 93       	push	r25
     ae2:	af 93       	push	r26
     ae4:	bf 93       	push	r27
     ae6:	ef 93       	push	r30
     ae8:	ff 93       	push	r31
	if (INT2_CallBack_ptr!=NULLPTR)
     aea:	e0 91 61 00 	lds	r30, 0x0061	; 0x800061 <INT2_CallBack_ptr>
     aee:	f0 91 62 00 	lds	r31, 0x0062	; 0x800062 <INT2_CallBack_ptr+0x1>
     af2:	30 97       	sbiw	r30, 0x00	; 0
     af4:	09 f0       	breq	.+2      	; 0xaf8 <__vector_3+0x30>
	{
		INT2_CallBack_ptr();
     af6:	09 95       	icall
	}
}
     af8:	ff 91       	pop	r31
     afa:	ef 91       	pop	r30
     afc:	bf 91       	pop	r27
     afe:	af 91       	pop	r26
     b00:	9f 91       	pop	r25
     b02:	8f 91       	pop	r24
     b04:	7f 91       	pop	r23
     b06:	6f 91       	pop	r22
     b08:	5f 91       	pop	r21
     b0a:	4f 91       	pop	r20
     b0c:	3f 91       	pop	r19
     b0e:	2f 91       	pop	r18
     b10:	0f 90       	pop	r0
     b12:	0f be       	out	0x3f, r0	; 63
     b14:	0f 90       	pop	r0
     b16:	1f 90       	pop	r1
     b18:	18 95       	reti

00000b1a <TIMER_timer0InitMode>:


/********************** TIMERS FUNCTIONS *******************/
void TIMER_clrOF_Flag(void)
{
	TIFR |= (TIMER_1<<TIMER_0);
     b1a:	81 11       	cpse	r24, r1
     b1c:	08 c0       	rjmp	.+16     	; 0xb2e <TIMER_timer0InitMode+0x14>
     b1e:	83 b7       	in	r24, 0x33	; 51
     b20:	8f 7b       	andi	r24, 0xBF	; 191
     b22:	83 bf       	out	0x33, r24	; 51
     b24:	83 b7       	in	r24, 0x33	; 51
     b26:	87 7f       	andi	r24, 0xF7	; 247
     b28:	83 bf       	out	0x33, r24	; 51
     b2a:	80 e0       	ldi	r24, 0x00	; 0
     b2c:	08 95       	ret
     b2e:	81 30       	cpi	r24, 0x01	; 1
     b30:	41 f4       	brne	.+16     	; 0xb42 <TIMER_timer0InitMode+0x28>
     b32:	83 b7       	in	r24, 0x33	; 51
     b34:	8f 7b       	andi	r24, 0xBF	; 191
     b36:	83 bf       	out	0x33, r24	; 51
     b38:	83 b7       	in	r24, 0x33	; 51
     b3a:	88 60       	ori	r24, 0x08	; 8
     b3c:	83 bf       	out	0x33, r24	; 51
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	08 95       	ret
     b42:	82 30       	cpi	r24, 0x02	; 2
     b44:	41 f4       	brne	.+16     	; 0xb56 <TIMER_timer0InitMode+0x3c>
     b46:	83 b7       	in	r24, 0x33	; 51
     b48:	80 64       	ori	r24, 0x40	; 64
     b4a:	83 bf       	out	0x33, r24	; 51
     b4c:	83 b7       	in	r24, 0x33	; 51
     b4e:	87 7f       	andi	r24, 0xF7	; 247
     b50:	83 bf       	out	0x33, r24	; 51
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	08 95       	ret
     b56:	83 30       	cpi	r24, 0x03	; 3
     b58:	41 f4       	brne	.+16     	; 0xb6a <TIMER_timer0InitMode+0x50>
     b5a:	83 b7       	in	r24, 0x33	; 51
     b5c:	80 64       	ori	r24, 0x40	; 64
     b5e:	83 bf       	out	0x33, r24	; 51
     b60:	83 b7       	in	r24, 0x33	; 51
     b62:	88 60       	ori	r24, 0x08	; 8
     b64:	83 bf       	out	0x33, r24	; 51
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	08 95       	ret
     b6a:	81 e0       	ldi	r24, 0x01	; 1
     b6c:	08 95       	ret

00000b6e <TIMER_timer0Prescalar>:
     b6e:	81 11       	cpse	r24, r1
     b70:	0b c0       	rjmp	.+22     	; 0xb88 <TIMER_timer0Prescalar+0x1a>
     b72:	83 b7       	in	r24, 0x33	; 51
     b74:	8e 7f       	andi	r24, 0xFE	; 254
     b76:	83 bf       	out	0x33, r24	; 51
     b78:	83 b7       	in	r24, 0x33	; 51
     b7a:	8d 7f       	andi	r24, 0xFD	; 253
     b7c:	83 bf       	out	0x33, r24	; 51
     b7e:	83 b7       	in	r24, 0x33	; 51
     b80:	8b 7f       	andi	r24, 0xFB	; 251
     b82:	83 bf       	out	0x33, r24	; 51
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	08 95       	ret
     b88:	81 30       	cpi	r24, 0x01	; 1
     b8a:	59 f4       	brne	.+22     	; 0xba2 <TIMER_timer0Prescalar+0x34>
     b8c:	83 b7       	in	r24, 0x33	; 51
     b8e:	81 60       	ori	r24, 0x01	; 1
     b90:	83 bf       	out	0x33, r24	; 51
     b92:	83 b7       	in	r24, 0x33	; 51
     b94:	8d 7f       	andi	r24, 0xFD	; 253
     b96:	83 bf       	out	0x33, r24	; 51
     b98:	83 b7       	in	r24, 0x33	; 51
     b9a:	8b 7f       	andi	r24, 0xFB	; 251
     b9c:	83 bf       	out	0x33, r24	; 51
     b9e:	80 e0       	ldi	r24, 0x00	; 0
     ba0:	08 95       	ret
     ba2:	82 30       	cpi	r24, 0x02	; 2
     ba4:	59 f4       	brne	.+22     	; 0xbbc <TIMER_timer0Prescalar+0x4e>
     ba6:	83 b7       	in	r24, 0x33	; 51
     ba8:	8e 7f       	andi	r24, 0xFE	; 254
     baa:	83 bf       	out	0x33, r24	; 51
     bac:	83 b7       	in	r24, 0x33	; 51
     bae:	82 60       	ori	r24, 0x02	; 2
     bb0:	83 bf       	out	0x33, r24	; 51
     bb2:	83 b7       	in	r24, 0x33	; 51
     bb4:	8b 7f       	andi	r24, 0xFB	; 251
     bb6:	83 bf       	out	0x33, r24	; 51
     bb8:	80 e0       	ldi	r24, 0x00	; 0
     bba:	08 95       	ret
     bbc:	83 30       	cpi	r24, 0x03	; 3
     bbe:	59 f4       	brne	.+22     	; 0xbd6 <TIMER_timer0Prescalar+0x68>
     bc0:	83 b7       	in	r24, 0x33	; 51
     bc2:	81 60       	ori	r24, 0x01	; 1
     bc4:	83 bf       	out	0x33, r24	; 51
     bc6:	83 b7       	in	r24, 0x33	; 51
     bc8:	82 60       	ori	r24, 0x02	; 2
     bca:	83 bf       	out	0x33, r24	; 51
     bcc:	83 b7       	in	r24, 0x33	; 51
     bce:	8b 7f       	andi	r24, 0xFB	; 251
     bd0:	83 bf       	out	0x33, r24	; 51
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	08 95       	ret
     bd6:	84 30       	cpi	r24, 0x04	; 4
     bd8:	59 f4       	brne	.+22     	; 0xbf0 <TIMER_timer0Prescalar+0x82>
     bda:	83 b7       	in	r24, 0x33	; 51
     bdc:	8e 7f       	andi	r24, 0xFE	; 254
     bde:	83 bf       	out	0x33, r24	; 51
     be0:	83 b7       	in	r24, 0x33	; 51
     be2:	8d 7f       	andi	r24, 0xFD	; 253
     be4:	83 bf       	out	0x33, r24	; 51
     be6:	83 b7       	in	r24, 0x33	; 51
     be8:	84 60       	ori	r24, 0x04	; 4
     bea:	83 bf       	out	0x33, r24	; 51
     bec:	80 e0       	ldi	r24, 0x00	; 0
     bee:	08 95       	ret
     bf0:	85 30       	cpi	r24, 0x05	; 5
     bf2:	59 f4       	brne	.+22     	; 0xc0a <TIMER_timer0Prescalar+0x9c>
     bf4:	83 b7       	in	r24, 0x33	; 51
     bf6:	81 60       	ori	r24, 0x01	; 1
     bf8:	83 bf       	out	0x33, r24	; 51
     bfa:	83 b7       	in	r24, 0x33	; 51
     bfc:	8d 7f       	andi	r24, 0xFD	; 253
     bfe:	83 bf       	out	0x33, r24	; 51
     c00:	83 b7       	in	r24, 0x33	; 51
     c02:	84 60       	ori	r24, 0x04	; 4
     c04:	83 bf       	out	0x33, r24	; 51
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	08 95       	ret
     c0a:	86 30       	cpi	r24, 0x06	; 6
     c0c:	59 f4       	brne	.+22     	; 0xc24 <TIMER_timer0Prescalar+0xb6>
     c0e:	83 b7       	in	r24, 0x33	; 51
     c10:	8e 7f       	andi	r24, 0xFE	; 254
     c12:	83 bf       	out	0x33, r24	; 51
     c14:	83 b7       	in	r24, 0x33	; 51
     c16:	82 60       	ori	r24, 0x02	; 2
     c18:	83 bf       	out	0x33, r24	; 51
     c1a:	83 b7       	in	r24, 0x33	; 51
     c1c:	84 60       	ori	r24, 0x04	; 4
     c1e:	83 bf       	out	0x33, r24	; 51
     c20:	80 e0       	ldi	r24, 0x00	; 0
     c22:	08 95       	ret
     c24:	87 30       	cpi	r24, 0x07	; 7
     c26:	59 f4       	brne	.+22     	; 0xc3e <TIMER_timer0Prescalar+0xd0>
     c28:	83 b7       	in	r24, 0x33	; 51
     c2a:	81 60       	ori	r24, 0x01	; 1
     c2c:	83 bf       	out	0x33, r24	; 51
     c2e:	83 b7       	in	r24, 0x33	; 51
     c30:	82 60       	ori	r24, 0x02	; 2
     c32:	83 bf       	out	0x33, r24	; 51
     c34:	83 b7       	in	r24, 0x33	; 51
     c36:	84 60       	ori	r24, 0x04	; 4
     c38:	83 bf       	out	0x33, r24	; 51
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	08 95       	ret
     c3e:	82 e0       	ldi	r24, 0x02	; 2
     c40:	08 95       	ret

00000c42 <TIMER_timer0_OVF_Number>:
     c42:	8f 92       	push	r8
     c44:	9f 92       	push	r9
     c46:	af 92       	push	r10
     c48:	bf 92       	push	r11
     c4a:	cf 92       	push	r12
     c4c:	df 92       	push	r13
     c4e:	ef 92       	push	r14
     c50:	ff 92       	push	r15
     c52:	4b 01       	movw	r8, r22
     c54:	5c 01       	movw	r10, r24
     c56:	20 e0       	ldi	r18, 0x00	; 0
     c58:	30 e0       	ldi	r19, 0x00	; 0
     c5a:	a9 01       	movw	r20, r18
     c5c:	0e 94 96 09 	call	0x132c	; 0x132c <__gesf2>
     c60:	18 16       	cp	r1, r24
     c62:	94 f0       	brlt	.+36     	; 0xc88 <TIMER_timer0_OVF_Number+0x46>
     c64:	1e c0       	rjmp	.+60     	; 0xca2 <TIMER_timer0_OVF_Number+0x60>
     c66:	08 b6       	in	r0, 0x38	; 56
     c68:	00 fe       	sbrs	r0, 0
     c6a:	fd cf       	rjmp	.-6      	; 0xc66 <TIMER_timer0_OVF_Number+0x24>
     c6c:	88 b7       	in	r24, 0x38	; 56
     c6e:	81 60       	ori	r24, 0x01	; 1
     c70:	88 bf       	out	0x38, r24	; 56
     c72:	20 e0       	ldi	r18, 0x00	; 0
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	40 e8       	ldi	r20, 0x80	; 128
     c78:	5f e3       	ldi	r21, 0x3F	; 63
     c7a:	c7 01       	movw	r24, r14
     c7c:	b6 01       	movw	r22, r12
     c7e:	0e 94 b7 07 	call	0xf6e	; 0xf6e <__addsf3>
     c82:	6b 01       	movw	r12, r22
     c84:	7c 01       	movw	r14, r24
     c86:	03 c0       	rjmp	.+6      	; 0xc8e <TIMER_timer0_OVF_Number+0x4c>
     c88:	c1 2c       	mov	r12, r1
     c8a:	d1 2c       	mov	r13, r1
     c8c:	76 01       	movw	r14, r12
     c8e:	a5 01       	movw	r20, r10
     c90:	94 01       	movw	r18, r8
     c92:	c7 01       	movw	r24, r14
     c94:	b6 01       	movw	r22, r12
     c96:	0e 94 3a 08 	call	0x1074	; 0x1074 <__cmpsf2>
     c9a:	88 23       	and	r24, r24
     c9c:	24 f3       	brlt	.-56     	; 0xc66 <TIMER_timer0_OVF_Number+0x24>
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	2a c0       	rjmp	.+84     	; 0xcf6 <TIMER_timer0_OVF_Number+0xb4>
     ca2:	20 e0       	ldi	r18, 0x00	; 0
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	a9 01       	movw	r20, r18
     ca8:	c5 01       	movw	r24, r10
     caa:	b4 01       	movw	r22, r8
     cac:	0e 94 3a 08 	call	0x1074	; 0x1074 <__cmpsf2>
     cb0:	18 16       	cp	r1, r24
     cb2:	9c f4       	brge	.+38     	; 0xcda <TIMER_timer0_OVF_Number+0x98>
     cb4:	85 e0       	ldi	r24, 0x05	; 5
     cb6:	1f c0       	rjmp	.+62     	; 0xcf6 <TIMER_timer0_OVF_Number+0xb4>
     cb8:	08 b6       	in	r0, 0x38	; 56
     cba:	00 fe       	sbrs	r0, 0
     cbc:	fd cf       	rjmp	.-6      	; 0xcb8 <TIMER_timer0_OVF_Number+0x76>
     cbe:	88 b7       	in	r24, 0x38	; 56
     cc0:	81 60       	ori	r24, 0x01	; 1
     cc2:	88 bf       	out	0x38, r24	; 56
     cc4:	20 e0       	ldi	r18, 0x00	; 0
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	40 e8       	ldi	r20, 0x80	; 128
     cca:	5f e3       	ldi	r21, 0x3F	; 63
     ccc:	c7 01       	movw	r24, r14
     cce:	b6 01       	movw	r22, r12
     cd0:	0e 94 b7 07 	call	0xf6e	; 0xf6e <__addsf3>
     cd4:	6b 01       	movw	r12, r22
     cd6:	7c 01       	movw	r14, r24
     cd8:	03 c0       	rjmp	.+6      	; 0xce0 <TIMER_timer0_OVF_Number+0x9e>
     cda:	c1 2c       	mov	r12, r1
     cdc:	d1 2c       	mov	r13, r1
     cde:	76 01       	movw	r14, r12
     ce0:	20 e0       	ldi	r18, 0x00	; 0
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	40 e8       	ldi	r20, 0x80	; 128
     ce6:	5f e3       	ldi	r21, 0x3F	; 63
     ce8:	c7 01       	movw	r24, r14
     cea:	b6 01       	movw	r22, r12
     cec:	0e 94 3a 08 	call	0x1074	; 0x1074 <__cmpsf2>
     cf0:	88 23       	and	r24, r24
     cf2:	14 f3       	brlt	.-60     	; 0xcb8 <TIMER_timer0_OVF_Number+0x76>
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	ff 90       	pop	r15
     cf8:	ef 90       	pop	r14
     cfa:	df 90       	pop	r13
     cfc:	cf 90       	pop	r12
     cfe:	bf 90       	pop	r11
     d00:	af 90       	pop	r10
     d02:	9f 90       	pop	r9
     d04:	8f 90       	pop	r8
     d06:	08 95       	ret

00000d08 <TIMER_timer0PWM_mode>:
     d08:	cf 93       	push	r28
     d0a:	0e 94 23 08 	call	0x1046	; 0x1046 <ceil>
     d0e:	0e 94 b1 08 	call	0x1162	; 0x1162 <__fixunssfsi>
     d12:	c6 2f       	mov	r28, r22
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	0e 94 8d 05 	call	0xb1a	; 0xb1a <TIMER_timer0InitMode>
     d1a:	81 11       	cpse	r24, r1
     d1c:	14 c0       	rjmp	.+40     	; 0xd46 <TIMER_timer0PWM_mode+0x3e>
     d1e:	c2 bf       	out	0x32, r28	; 50
     d20:	85 e0       	ldi	r24, 0x05	; 5
     d22:	0e 94 b7 05 	call	0xb6e	; 0xb6e <TIMER_timer0Prescalar>
     d26:	81 11       	cpse	r24, r1
     d28:	10 c0       	rjmp	.+32     	; 0xd4a <TIMER_timer0PWM_mode+0x42>
     d2a:	60 e0       	ldi	r22, 0x00	; 0
     d2c:	70 e0       	ldi	r23, 0x00	; 0
     d2e:	80 e8       	ldi	r24, 0x80	; 128
     d30:	9f e3       	ldi	r25, 0x3F	; 63
     d32:	0e 94 21 06 	call	0xc42	; 0xc42 <TIMER_timer0_OVF_Number>
     d36:	81 11       	cpse	r24, r1
     d38:	0a c0       	rjmp	.+20     	; 0xd4e <TIMER_timer0PWM_mode+0x46>
     d3a:	13 be       	out	0x33, r1	; 51
     d3c:	12 be       	out	0x32, r1	; 50
     d3e:	98 b7       	in	r25, 0x38	; 56
     d40:	91 60       	ori	r25, 0x01	; 1
     d42:	98 bf       	out	0x38, r25	; 56
     d44:	05 c0       	rjmp	.+10     	; 0xd50 <TIMER_timer0PWM_mode+0x48>
     d46:	86 e0       	ldi	r24, 0x06	; 6
     d48:	03 c0       	rjmp	.+6      	; 0xd50 <TIMER_timer0PWM_mode+0x48>
     d4a:	86 e0       	ldi	r24, 0x06	; 6
     d4c:	01 c0       	rjmp	.+2      	; 0xd50 <TIMER_timer0PWM_mode+0x48>
     d4e:	86 e0       	ldi	r24, 0x06	; 6
     d50:	cf 91       	pop	r28
     d52:	08 95       	ret

00000d54 <TIMER_timer2InitMode>:
     d54:	81 11       	cpse	r24, r1
     d56:	08 c0       	rjmp	.+16     	; 0xd68 <TIMER_timer2InitMode+0x14>
     d58:	85 b5       	in	r24, 0x25	; 37
     d5a:	8f 7b       	andi	r24, 0xBF	; 191
     d5c:	85 bd       	out	0x25, r24	; 37
     d5e:	85 b5       	in	r24, 0x25	; 37
     d60:	87 7f       	andi	r24, 0xF7	; 247
     d62:	85 bd       	out	0x25, r24	; 37
     d64:	80 e0       	ldi	r24, 0x00	; 0
     d66:	08 95       	ret
     d68:	81 30       	cpi	r24, 0x01	; 1
     d6a:	41 f4       	brne	.+16     	; 0xd7c <TIMER_timer2InitMode+0x28>
     d6c:	85 b5       	in	r24, 0x25	; 37
     d6e:	8f 7b       	andi	r24, 0xBF	; 191
     d70:	85 bd       	out	0x25, r24	; 37
     d72:	85 b5       	in	r24, 0x25	; 37
     d74:	88 60       	ori	r24, 0x08	; 8
     d76:	85 bd       	out	0x25, r24	; 37
     d78:	80 e0       	ldi	r24, 0x00	; 0
     d7a:	08 95       	ret
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	41 f4       	brne	.+16     	; 0xd90 <TIMER_timer2InitMode+0x3c>
     d80:	85 b5       	in	r24, 0x25	; 37
     d82:	80 64       	ori	r24, 0x40	; 64
     d84:	85 bd       	out	0x25, r24	; 37
     d86:	85 b5       	in	r24, 0x25	; 37
     d88:	87 7f       	andi	r24, 0xF7	; 247
     d8a:	85 bd       	out	0x25, r24	; 37
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	08 95       	ret
     d90:	83 30       	cpi	r24, 0x03	; 3
     d92:	41 f4       	brne	.+16     	; 0xda4 <TIMER_timer2InitMode+0x50>
     d94:	85 b5       	in	r24, 0x25	; 37
     d96:	80 64       	ori	r24, 0x40	; 64
     d98:	85 bd       	out	0x25, r24	; 37
     d9a:	85 b5       	in	r24, 0x25	; 37
     d9c:	88 60       	ori	r24, 0x08	; 8
     d9e:	85 bd       	out	0x25, r24	; 37
     da0:	80 e0       	ldi	r24, 0x00	; 0
     da2:	08 95       	ret
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	08 95       	ret

00000da8 <TIMER_timer2Prescalar>:
     da8:	81 11       	cpse	r24, r1
     daa:	0b c0       	rjmp	.+22     	; 0xdc2 <TIMER_timer2Prescalar+0x1a>
     dac:	85 b5       	in	r24, 0x25	; 37
     dae:	8e 7f       	andi	r24, 0xFE	; 254
     db0:	85 bd       	out	0x25, r24	; 37
     db2:	85 b5       	in	r24, 0x25	; 37
     db4:	8d 7f       	andi	r24, 0xFD	; 253
     db6:	85 bd       	out	0x25, r24	; 37
     db8:	85 b5       	in	r24, 0x25	; 37
     dba:	8b 7f       	andi	r24, 0xFB	; 251
     dbc:	85 bd       	out	0x25, r24	; 37
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	08 95       	ret
     dc2:	81 30       	cpi	r24, 0x01	; 1
     dc4:	59 f4       	brne	.+22     	; 0xddc <TIMER_timer2Prescalar+0x34>
     dc6:	85 b5       	in	r24, 0x25	; 37
     dc8:	81 60       	ori	r24, 0x01	; 1
     dca:	85 bd       	out	0x25, r24	; 37
     dcc:	85 b5       	in	r24, 0x25	; 37
     dce:	8d 7f       	andi	r24, 0xFD	; 253
     dd0:	85 bd       	out	0x25, r24	; 37
     dd2:	85 b5       	in	r24, 0x25	; 37
     dd4:	8b 7f       	andi	r24, 0xFB	; 251
     dd6:	85 bd       	out	0x25, r24	; 37
     dd8:	80 e0       	ldi	r24, 0x00	; 0
     dda:	08 95       	ret
     ddc:	82 30       	cpi	r24, 0x02	; 2
     dde:	59 f4       	brne	.+22     	; 0xdf6 <TIMER_timer2Prescalar+0x4e>
     de0:	85 b5       	in	r24, 0x25	; 37
     de2:	8e 7f       	andi	r24, 0xFE	; 254
     de4:	85 bd       	out	0x25, r24	; 37
     de6:	85 b5       	in	r24, 0x25	; 37
     de8:	82 60       	ori	r24, 0x02	; 2
     dea:	85 bd       	out	0x25, r24	; 37
     dec:	85 b5       	in	r24, 0x25	; 37
     dee:	8b 7f       	andi	r24, 0xFB	; 251
     df0:	85 bd       	out	0x25, r24	; 37
     df2:	80 e0       	ldi	r24, 0x00	; 0
     df4:	08 95       	ret
     df6:	83 30       	cpi	r24, 0x03	; 3
     df8:	59 f4       	brne	.+22     	; 0xe10 <TIMER_timer2Prescalar+0x68>
     dfa:	85 b5       	in	r24, 0x25	; 37
     dfc:	81 60       	ori	r24, 0x01	; 1
     dfe:	85 bd       	out	0x25, r24	; 37
     e00:	85 b5       	in	r24, 0x25	; 37
     e02:	82 60       	ori	r24, 0x02	; 2
     e04:	85 bd       	out	0x25, r24	; 37
     e06:	85 b5       	in	r24, 0x25	; 37
     e08:	8b 7f       	andi	r24, 0xFB	; 251
     e0a:	85 bd       	out	0x25, r24	; 37
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	08 95       	ret
     e10:	84 30       	cpi	r24, 0x04	; 4
     e12:	59 f4       	brne	.+22     	; 0xe2a <TIMER_timer2Prescalar+0x82>
     e14:	85 b5       	in	r24, 0x25	; 37
     e16:	8e 7f       	andi	r24, 0xFE	; 254
     e18:	85 bd       	out	0x25, r24	; 37
     e1a:	85 b5       	in	r24, 0x25	; 37
     e1c:	8d 7f       	andi	r24, 0xFD	; 253
     e1e:	85 bd       	out	0x25, r24	; 37
     e20:	85 b5       	in	r24, 0x25	; 37
     e22:	84 60       	ori	r24, 0x04	; 4
     e24:	85 bd       	out	0x25, r24	; 37
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	08 95       	ret
     e2a:	84 30       	cpi	r24, 0x04	; 4
     e2c:	59 f4       	brne	.+22     	; 0xe44 <TIMER_timer2Prescalar+0x9c>
     e2e:	85 b5       	in	r24, 0x25	; 37
     e30:	81 60       	ori	r24, 0x01	; 1
     e32:	85 bd       	out	0x25, r24	; 37
     e34:	85 b5       	in	r24, 0x25	; 37
     e36:	8d 7f       	andi	r24, 0xFD	; 253
     e38:	85 bd       	out	0x25, r24	; 37
     e3a:	85 b5       	in	r24, 0x25	; 37
     e3c:	84 60       	ori	r24, 0x04	; 4
     e3e:	85 bd       	out	0x25, r24	; 37
     e40:	80 e0       	ldi	r24, 0x00	; 0
     e42:	08 95       	ret
     e44:	85 30       	cpi	r24, 0x05	; 5
     e46:	59 f4       	brne	.+22     	; 0xe5e <TIMER_timer2Prescalar+0xb6>
     e48:	85 b5       	in	r24, 0x25	; 37
     e4a:	8e 7f       	andi	r24, 0xFE	; 254
     e4c:	85 bd       	out	0x25, r24	; 37
     e4e:	85 b5       	in	r24, 0x25	; 37
     e50:	82 60       	ori	r24, 0x02	; 2
     e52:	85 bd       	out	0x25, r24	; 37
     e54:	85 b5       	in	r24, 0x25	; 37
     e56:	84 60       	ori	r24, 0x04	; 4
     e58:	85 bd       	out	0x25, r24	; 37
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	08 95       	ret
     e5e:	86 30       	cpi	r24, 0x06	; 6
     e60:	59 f4       	brne	.+22     	; 0xe78 <TIMER_timer2Prescalar+0xd0>
     e62:	85 b5       	in	r24, 0x25	; 37
     e64:	81 60       	ori	r24, 0x01	; 1
     e66:	85 bd       	out	0x25, r24	; 37
     e68:	85 b5       	in	r24, 0x25	; 37
     e6a:	82 60       	ori	r24, 0x02	; 2
     e6c:	85 bd       	out	0x25, r24	; 37
     e6e:	85 b5       	in	r24, 0x25	; 37
     e70:	84 60       	ori	r24, 0x04	; 4
     e72:	85 bd       	out	0x25, r24	; 37
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	08 95       	ret
     e78:	82 e0       	ldi	r24, 0x02	; 2
     e7a:	08 95       	ret

00000e7c <TIMER_timer2SetInitial>:
     e7c:	84 bd       	out	0x24, r24	; 36
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	08 95       	ret

00000e82 <TIMER_timer2Init>:
     e82:	89 b7       	in	r24, 0x39	; 57
     e84:	80 64       	ori	r24, 0x40	; 64
     e86:	89 bf       	out	0x39, r24	; 57
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	0e 94 aa 06 	call	0xd54	; 0xd54 <TIMER_timer2InitMode>
     e8e:	81 11       	cpse	r24, r1
     e90:	0c c0       	rjmp	.+24     	; 0xeaa <TIMER_timer2Init+0x28>
     e92:	0e 94 3e 07 	call	0xe7c	; 0xe7c <TIMER_timer2SetInitial>
     e96:	81 11       	cpse	r24, r1
     e98:	0a c0       	rjmp	.+20     	; 0xeae <TIMER_timer2Init+0x2c>
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	0e 94 d4 06 	call	0xda8	; 0xda8 <TIMER_timer2Prescalar>
     ea0:	81 11       	cpse	r24, r1
     ea2:	07 c0       	rjmp	.+14     	; 0xeb2 <TIMER_timer2Init+0x30>
     ea4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_end>
     ea8:	08 95       	ret
     eaa:	87 e0       	ldi	r24, 0x07	; 7
     eac:	08 95       	ret
     eae:	87 e0       	ldi	r24, 0x07	; 7
     eb0:	08 95       	ret
     eb2:	87 e0       	ldi	r24, 0x07	; 7
     eb4:	08 95       	ret

00000eb6 <__vector_5>:
}


ISR(TIMER2_OVF_vect){
     eb6:	1f 92       	push	r1
     eb8:	0f 92       	push	r0
     eba:	0f b6       	in	r0, 0x3f	; 63
     ebc:	0f 92       	push	r0
     ebe:	11 24       	eor	r1, r1
     ec0:	4f 93       	push	r20
     ec2:	5f 93       	push	r21
     ec4:	6f 93       	push	r22
     ec6:	7f 93       	push	r23
     ec8:	8f 93       	push	r24
     eca:	9f 93       	push	r25
     ecc:	af 93       	push	r26
     ece:	bf 93       	push	r27
	
	if(u8_g_timerBtn_flag == INITIAL_VALUE_1)
     ed0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_end>
     ed4:	81 30       	cpi	r24, 0x01	; 1
     ed6:	e9 f5       	brne	.+122    	; 0xf52 <__vector_5+0x9c>
	{
		
		if (i32_gs_TimeDec_ovf < i32_g_TimeMode_ovf )
     ed8:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <i32_gs_TimeDec_ovf>
     edc:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <i32_gs_TimeDec_ovf+0x1>
     ee0:	a0 91 69 00 	lds	r26, 0x0069	; 0x800069 <i32_gs_TimeDec_ovf+0x2>
     ee4:	b0 91 6a 00 	lds	r27, 0x006A	; 0x80006a <i32_gs_TimeDec_ovf+0x3>
     ee8:	40 91 6b 00 	lds	r20, 0x006B	; 0x80006b <i32_g_TimeMode_ovf>
     eec:	50 91 6c 00 	lds	r21, 0x006C	; 0x80006c <i32_g_TimeMode_ovf+0x1>
     ef0:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <i32_g_TimeMode_ovf+0x2>
     ef4:	70 91 6e 00 	lds	r23, 0x006E	; 0x80006e <i32_g_TimeMode_ovf+0x3>
     ef8:	84 17       	cp	r24, r20
     efa:	95 07       	cpc	r25, r21
     efc:	a6 07       	cpc	r26, r22
     efe:	b7 07       	cpc	r27, r23
     f00:	64 f4       	brge	.+24     	; 0xf1a <__vector_5+0x64>
		{
			i32_gs_TimeDec_ovf++;
     f02:	01 96       	adiw	r24, 0x01	; 1
     f04:	a1 1d       	adc	r26, r1
     f06:	b1 1d       	adc	r27, r1
     f08:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <i32_gs_TimeDec_ovf>
     f0c:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <i32_gs_TimeDec_ovf+0x1>
     f10:	a0 93 69 00 	sts	0x0069, r26	; 0x800069 <i32_gs_TimeDec_ovf+0x2>
     f14:	b0 93 6a 00 	sts	0x006A, r27	; 0x80006a <i32_gs_TimeDec_ovf+0x3>
     f18:	1c c0       	rjmp	.+56     	; 0xf52 <__vector_5+0x9c>
		}
		else if ( i32_gs_TimeDec_ovf == i32_g_TimeMode_ovf && i32_g_TimeMode_ovf!=INITIAL_VALUE_0)
     f1a:	84 17       	cp	r24, r20
     f1c:	95 07       	cpc	r25, r21
     f1e:	a6 07       	cpc	r26, r22
     f20:	b7 07       	cpc	r27, r23
     f22:	b9 f4       	brne	.+46     	; 0xf52 <__vector_5+0x9c>
     f24:	45 2b       	or	r20, r21
     f26:	46 2b       	or	r20, r22
     f28:	47 2b       	or	r20, r23
     f2a:	99 f0       	breq	.+38     	; 0xf52 <__vector_5+0x9c>
		{
			i32_gs_TimeDec_ovf = INITIAL_VALUE_0;
     f2c:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <i32_gs_TimeDec_ovf>
     f30:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <i32_gs_TimeDec_ovf+0x1>
     f34:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <i32_gs_TimeDec_ovf+0x2>
     f38:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <i32_gs_TimeDec_ovf+0x3>
			
			if (u8_g_currentCarState < CAR_MODES)
     f3c:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <u8_g_currentCarState>
     f40:	88 30       	cpi	r24, 0x08	; 8
     f42:	20 f4       	brcc	.+8      	; 0xf4c <__vector_5+0x96>
			{
				u8_g_currentCarState++;
     f44:	8f 5f       	subi	r24, 0xFF	; 255
     f46:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <u8_g_currentCarState>
     f4a:	03 c0       	rjmp	.+6      	; 0xf52 <__vector_5+0x9c>
				
			}
			else
			{
				u8_g_currentCarState = INITIAL_VALUE_1;
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <u8_g_currentCarState>
			
		}
		
	}
	
     f52:	bf 91       	pop	r27
     f54:	af 91       	pop	r26
     f56:	9f 91       	pop	r25
     f58:	8f 91       	pop	r24
     f5a:	7f 91       	pop	r23
     f5c:	6f 91       	pop	r22
     f5e:	5f 91       	pop	r21
     f60:	4f 91       	pop	r20
     f62:	0f 90       	pop	r0
     f64:	0f be       	out	0x3f, r0	; 63
     f66:	0f 90       	pop	r0
     f68:	1f 90       	pop	r1
     f6a:	18 95       	reti

00000f6c <__subsf3>:
     f6c:	50 58       	subi	r21, 0x80	; 128

00000f6e <__addsf3>:
     f6e:	bb 27       	eor	r27, r27
     f70:	aa 27       	eor	r26, r26
     f72:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__addsf3x>
     f76:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__fp_round>
     f7a:	0e 94 36 09 	call	0x126c	; 0x126c <__fp_pscA>
     f7e:	38 f0       	brcs	.+14     	; 0xf8e <__addsf3+0x20>
     f80:	0e 94 3d 09 	call	0x127a	; 0x127a <__fp_pscB>
     f84:	20 f0       	brcs	.+8      	; 0xf8e <__addsf3+0x20>
     f86:	39 f4       	brne	.+14     	; 0xf96 <__addsf3+0x28>
     f88:	9f 3f       	cpi	r25, 0xFF	; 255
     f8a:	19 f4       	brne	.+6      	; 0xf92 <__addsf3+0x24>
     f8c:	26 f4       	brtc	.+8      	; 0xf96 <__addsf3+0x28>
     f8e:	0c 94 33 09 	jmp	0x1266	; 0x1266 <__fp_nan>
     f92:	0e f4       	brtc	.+2      	; 0xf96 <__addsf3+0x28>
     f94:	e0 95       	com	r30
     f96:	e7 fb       	bst	r30, 7
     f98:	0c 94 04 09 	jmp	0x1208	; 0x1208 <__fp_inf>

00000f9c <__addsf3x>:
     f9c:	e9 2f       	mov	r30, r25
     f9e:	0e 94 55 09 	call	0x12aa	; 0x12aa <__fp_split3>
     fa2:	58 f3       	brcs	.-42     	; 0xf7a <__addsf3+0xc>
     fa4:	ba 17       	cp	r27, r26
     fa6:	62 07       	cpc	r22, r18
     fa8:	73 07       	cpc	r23, r19
     faa:	84 07       	cpc	r24, r20
     fac:	95 07       	cpc	r25, r21
     fae:	20 f0       	brcs	.+8      	; 0xfb8 <__addsf3x+0x1c>
     fb0:	79 f4       	brne	.+30     	; 0xfd0 <__addsf3x+0x34>
     fb2:	a6 f5       	brtc	.+104    	; 0x101c <__addsf3x+0x80>
     fb4:	0c 94 8f 09 	jmp	0x131e	; 0x131e <__fp_zero>
     fb8:	0e f4       	brtc	.+2      	; 0xfbc <__addsf3x+0x20>
     fba:	e0 95       	com	r30
     fbc:	0b 2e       	mov	r0, r27
     fbe:	ba 2f       	mov	r27, r26
     fc0:	a0 2d       	mov	r26, r0
     fc2:	0b 01       	movw	r0, r22
     fc4:	b9 01       	movw	r22, r18
     fc6:	90 01       	movw	r18, r0
     fc8:	0c 01       	movw	r0, r24
     fca:	ca 01       	movw	r24, r20
     fcc:	a0 01       	movw	r20, r0
     fce:	11 24       	eor	r1, r1
     fd0:	ff 27       	eor	r31, r31
     fd2:	59 1b       	sub	r21, r25
     fd4:	99 f0       	breq	.+38     	; 0xffc <__addsf3x+0x60>
     fd6:	59 3f       	cpi	r21, 0xF9	; 249
     fd8:	50 f4       	brcc	.+20     	; 0xfee <__addsf3x+0x52>
     fda:	50 3e       	cpi	r21, 0xE0	; 224
     fdc:	68 f1       	brcs	.+90     	; 0x1038 <__addsf3x+0x9c>
     fde:	1a 16       	cp	r1, r26
     fe0:	f0 40       	sbci	r31, 0x00	; 0
     fe2:	a2 2f       	mov	r26, r18
     fe4:	23 2f       	mov	r18, r19
     fe6:	34 2f       	mov	r19, r20
     fe8:	44 27       	eor	r20, r20
     fea:	58 5f       	subi	r21, 0xF8	; 248
     fec:	f3 cf       	rjmp	.-26     	; 0xfd4 <__addsf3x+0x38>
     fee:	46 95       	lsr	r20
     ff0:	37 95       	ror	r19
     ff2:	27 95       	ror	r18
     ff4:	a7 95       	ror	r26
     ff6:	f0 40       	sbci	r31, 0x00	; 0
     ff8:	53 95       	inc	r21
     ffa:	c9 f7       	brne	.-14     	; 0xfee <__addsf3x+0x52>
     ffc:	7e f4       	brtc	.+30     	; 0x101c <__addsf3x+0x80>
     ffe:	1f 16       	cp	r1, r31
    1000:	ba 0b       	sbc	r27, r26
    1002:	62 0b       	sbc	r22, r18
    1004:	73 0b       	sbc	r23, r19
    1006:	84 0b       	sbc	r24, r20
    1008:	ba f0       	brmi	.+46     	; 0x1038 <__addsf3x+0x9c>
    100a:	91 50       	subi	r25, 0x01	; 1
    100c:	a1 f0       	breq	.+40     	; 0x1036 <__addsf3x+0x9a>
    100e:	ff 0f       	add	r31, r31
    1010:	bb 1f       	adc	r27, r27
    1012:	66 1f       	adc	r22, r22
    1014:	77 1f       	adc	r23, r23
    1016:	88 1f       	adc	r24, r24
    1018:	c2 f7       	brpl	.-16     	; 0x100a <__addsf3x+0x6e>
    101a:	0e c0       	rjmp	.+28     	; 0x1038 <__addsf3x+0x9c>
    101c:	ba 0f       	add	r27, r26
    101e:	62 1f       	adc	r22, r18
    1020:	73 1f       	adc	r23, r19
    1022:	84 1f       	adc	r24, r20
    1024:	48 f4       	brcc	.+18     	; 0x1038 <__addsf3x+0x9c>
    1026:	87 95       	ror	r24
    1028:	77 95       	ror	r23
    102a:	67 95       	ror	r22
    102c:	b7 95       	ror	r27
    102e:	f7 95       	ror	r31
    1030:	9e 3f       	cpi	r25, 0xFE	; 254
    1032:	08 f0       	brcs	.+2      	; 0x1036 <__addsf3x+0x9a>
    1034:	b0 cf       	rjmp	.-160    	; 0xf96 <__addsf3+0x28>
    1036:	93 95       	inc	r25
    1038:	88 0f       	add	r24, r24
    103a:	08 f0       	brcs	.+2      	; 0x103e <__addsf3x+0xa2>
    103c:	99 27       	eor	r25, r25
    103e:	ee 0f       	add	r30, r30
    1040:	97 95       	ror	r25
    1042:	87 95       	ror	r24
    1044:	08 95       	ret

00001046 <ceil>:
    1046:	0e 94 77 09 	call	0x12ee	; 0x12ee <__fp_trunc>
    104a:	90 f0       	brcs	.+36     	; 0x1070 <ceil+0x2a>
    104c:	9f 37       	cpi	r25, 0x7F	; 127
    104e:	48 f4       	brcc	.+18     	; 0x1062 <ceil+0x1c>
    1050:	91 11       	cpse	r25, r1
    1052:	16 f4       	brtc	.+4      	; 0x1058 <ceil+0x12>
    1054:	0c 94 90 09 	jmp	0x1320	; 0x1320 <__fp_szero>
    1058:	60 e0       	ldi	r22, 0x00	; 0
    105a:	70 e0       	ldi	r23, 0x00	; 0
    105c:	80 e8       	ldi	r24, 0x80	; 128
    105e:	9f e3       	ldi	r25, 0x3F	; 63
    1060:	08 95       	ret
    1062:	26 f0       	brts	.+8      	; 0x106c <ceil+0x26>
    1064:	1b 16       	cp	r1, r27
    1066:	61 1d       	adc	r22, r1
    1068:	71 1d       	adc	r23, r1
    106a:	81 1d       	adc	r24, r1
    106c:	0c 94 0a 09 	jmp	0x1214	; 0x1214 <__fp_mintl>
    1070:	0c 94 25 09 	jmp	0x124a	; 0x124a <__fp_mpack>

00001074 <__cmpsf2>:
    1074:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <__fp_cmp>
    1078:	08 f4       	brcc	.+2      	; 0x107c <__cmpsf2+0x8>
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	08 95       	ret

0000107e <__divsf3>:
    107e:	0e 94 53 08 	call	0x10a6	; 0x10a6 <__divsf3x>
    1082:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__fp_round>
    1086:	0e 94 3d 09 	call	0x127a	; 0x127a <__fp_pscB>
    108a:	58 f0       	brcs	.+22     	; 0x10a2 <__divsf3+0x24>
    108c:	0e 94 36 09 	call	0x126c	; 0x126c <__fp_pscA>
    1090:	40 f0       	brcs	.+16     	; 0x10a2 <__divsf3+0x24>
    1092:	29 f4       	brne	.+10     	; 0x109e <__divsf3+0x20>
    1094:	5f 3f       	cpi	r21, 0xFF	; 255
    1096:	29 f0       	breq	.+10     	; 0x10a2 <__divsf3+0x24>
    1098:	0c 94 04 09 	jmp	0x1208	; 0x1208 <__fp_inf>
    109c:	51 11       	cpse	r21, r1
    109e:	0c 94 90 09 	jmp	0x1320	; 0x1320 <__fp_szero>
    10a2:	0c 94 33 09 	jmp	0x1266	; 0x1266 <__fp_nan>

000010a6 <__divsf3x>:
    10a6:	0e 94 55 09 	call	0x12aa	; 0x12aa <__fp_split3>
    10aa:	68 f3       	brcs	.-38     	; 0x1086 <__divsf3+0x8>

000010ac <__divsf3_pse>:
    10ac:	99 23       	and	r25, r25
    10ae:	b1 f3       	breq	.-20     	; 0x109c <__divsf3+0x1e>
    10b0:	55 23       	and	r21, r21
    10b2:	91 f3       	breq	.-28     	; 0x1098 <__divsf3+0x1a>
    10b4:	95 1b       	sub	r25, r21
    10b6:	55 0b       	sbc	r21, r21
    10b8:	bb 27       	eor	r27, r27
    10ba:	aa 27       	eor	r26, r26
    10bc:	62 17       	cp	r22, r18
    10be:	73 07       	cpc	r23, r19
    10c0:	84 07       	cpc	r24, r20
    10c2:	38 f0       	brcs	.+14     	; 0x10d2 <__divsf3_pse+0x26>
    10c4:	9f 5f       	subi	r25, 0xFF	; 255
    10c6:	5f 4f       	sbci	r21, 0xFF	; 255
    10c8:	22 0f       	add	r18, r18
    10ca:	33 1f       	adc	r19, r19
    10cc:	44 1f       	adc	r20, r20
    10ce:	aa 1f       	adc	r26, r26
    10d0:	a9 f3       	breq	.-22     	; 0x10bc <__divsf3_pse+0x10>
    10d2:	35 d0       	rcall	.+106    	; 0x113e <__divsf3_pse+0x92>
    10d4:	0e 2e       	mov	r0, r30
    10d6:	3a f0       	brmi	.+14     	; 0x10e6 <__divsf3_pse+0x3a>
    10d8:	e0 e8       	ldi	r30, 0x80	; 128
    10da:	32 d0       	rcall	.+100    	; 0x1140 <__divsf3_pse+0x94>
    10dc:	91 50       	subi	r25, 0x01	; 1
    10de:	50 40       	sbci	r21, 0x00	; 0
    10e0:	e6 95       	lsr	r30
    10e2:	00 1c       	adc	r0, r0
    10e4:	ca f7       	brpl	.-14     	; 0x10d8 <__divsf3_pse+0x2c>
    10e6:	2b d0       	rcall	.+86     	; 0x113e <__divsf3_pse+0x92>
    10e8:	fe 2f       	mov	r31, r30
    10ea:	29 d0       	rcall	.+82     	; 0x113e <__divsf3_pse+0x92>
    10ec:	66 0f       	add	r22, r22
    10ee:	77 1f       	adc	r23, r23
    10f0:	88 1f       	adc	r24, r24
    10f2:	bb 1f       	adc	r27, r27
    10f4:	26 17       	cp	r18, r22
    10f6:	37 07       	cpc	r19, r23
    10f8:	48 07       	cpc	r20, r24
    10fa:	ab 07       	cpc	r26, r27
    10fc:	b0 e8       	ldi	r27, 0x80	; 128
    10fe:	09 f0       	breq	.+2      	; 0x1102 <__divsf3_pse+0x56>
    1100:	bb 0b       	sbc	r27, r27
    1102:	80 2d       	mov	r24, r0
    1104:	bf 01       	movw	r22, r30
    1106:	ff 27       	eor	r31, r31
    1108:	93 58       	subi	r25, 0x83	; 131
    110a:	5f 4f       	sbci	r21, 0xFF	; 255
    110c:	3a f0       	brmi	.+14     	; 0x111c <__divsf3_pse+0x70>
    110e:	9e 3f       	cpi	r25, 0xFE	; 254
    1110:	51 05       	cpc	r21, r1
    1112:	78 f0       	brcs	.+30     	; 0x1132 <__divsf3_pse+0x86>
    1114:	0c 94 04 09 	jmp	0x1208	; 0x1208 <__fp_inf>
    1118:	0c 94 90 09 	jmp	0x1320	; 0x1320 <__fp_szero>
    111c:	5f 3f       	cpi	r21, 0xFF	; 255
    111e:	e4 f3       	brlt	.-8      	; 0x1118 <__divsf3_pse+0x6c>
    1120:	98 3e       	cpi	r25, 0xE8	; 232
    1122:	d4 f3       	brlt	.-12     	; 0x1118 <__divsf3_pse+0x6c>
    1124:	86 95       	lsr	r24
    1126:	77 95       	ror	r23
    1128:	67 95       	ror	r22
    112a:	b7 95       	ror	r27
    112c:	f7 95       	ror	r31
    112e:	9f 5f       	subi	r25, 0xFF	; 255
    1130:	c9 f7       	brne	.-14     	; 0x1124 <__divsf3_pse+0x78>
    1132:	88 0f       	add	r24, r24
    1134:	91 1d       	adc	r25, r1
    1136:	96 95       	lsr	r25
    1138:	87 95       	ror	r24
    113a:	97 f9       	bld	r25, 7
    113c:	08 95       	ret
    113e:	e1 e0       	ldi	r30, 0x01	; 1
    1140:	66 0f       	add	r22, r22
    1142:	77 1f       	adc	r23, r23
    1144:	88 1f       	adc	r24, r24
    1146:	bb 1f       	adc	r27, r27
    1148:	62 17       	cp	r22, r18
    114a:	73 07       	cpc	r23, r19
    114c:	84 07       	cpc	r24, r20
    114e:	ba 07       	cpc	r27, r26
    1150:	20 f0       	brcs	.+8      	; 0x115a <__divsf3_pse+0xae>
    1152:	62 1b       	sub	r22, r18
    1154:	73 0b       	sbc	r23, r19
    1156:	84 0b       	sbc	r24, r20
    1158:	ba 0b       	sbc	r27, r26
    115a:	ee 1f       	adc	r30, r30
    115c:	88 f7       	brcc	.-30     	; 0x1140 <__divsf3_pse+0x94>
    115e:	e0 95       	com	r30
    1160:	08 95       	ret

00001162 <__fixunssfsi>:
    1162:	0e 94 5d 09 	call	0x12ba	; 0x12ba <__fp_splitA>
    1166:	88 f0       	brcs	.+34     	; 0x118a <__fixunssfsi+0x28>
    1168:	9f 57       	subi	r25, 0x7F	; 127
    116a:	98 f0       	brcs	.+38     	; 0x1192 <__fixunssfsi+0x30>
    116c:	b9 2f       	mov	r27, r25
    116e:	99 27       	eor	r25, r25
    1170:	b7 51       	subi	r27, 0x17	; 23
    1172:	b0 f0       	brcs	.+44     	; 0x11a0 <__fixunssfsi+0x3e>
    1174:	e1 f0       	breq	.+56     	; 0x11ae <__fixunssfsi+0x4c>
    1176:	66 0f       	add	r22, r22
    1178:	77 1f       	adc	r23, r23
    117a:	88 1f       	adc	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	1a f0       	brmi	.+6      	; 0x1186 <__fixunssfsi+0x24>
    1180:	ba 95       	dec	r27
    1182:	c9 f7       	brne	.-14     	; 0x1176 <__fixunssfsi+0x14>
    1184:	14 c0       	rjmp	.+40     	; 0x11ae <__fixunssfsi+0x4c>
    1186:	b1 30       	cpi	r27, 0x01	; 1
    1188:	91 f0       	breq	.+36     	; 0x11ae <__fixunssfsi+0x4c>
    118a:	0e 94 8f 09 	call	0x131e	; 0x131e <__fp_zero>
    118e:	b1 e0       	ldi	r27, 0x01	; 1
    1190:	08 95       	ret
    1192:	0c 94 8f 09 	jmp	0x131e	; 0x131e <__fp_zero>
    1196:	67 2f       	mov	r22, r23
    1198:	78 2f       	mov	r23, r24
    119a:	88 27       	eor	r24, r24
    119c:	b8 5f       	subi	r27, 0xF8	; 248
    119e:	39 f0       	breq	.+14     	; 0x11ae <__fixunssfsi+0x4c>
    11a0:	b9 3f       	cpi	r27, 0xF9	; 249
    11a2:	cc f3       	brlt	.-14     	; 0x1196 <__fixunssfsi+0x34>
    11a4:	86 95       	lsr	r24
    11a6:	77 95       	ror	r23
    11a8:	67 95       	ror	r22
    11aa:	b3 95       	inc	r27
    11ac:	d9 f7       	brne	.-10     	; 0x11a4 <__fixunssfsi+0x42>
    11ae:	3e f4       	brtc	.+14     	; 0x11be <__fixunssfsi+0x5c>
    11b0:	90 95       	com	r25
    11b2:	80 95       	com	r24
    11b4:	70 95       	com	r23
    11b6:	61 95       	neg	r22
    11b8:	7f 4f       	sbci	r23, 0xFF	; 255
    11ba:	8f 4f       	sbci	r24, 0xFF	; 255
    11bc:	9f 4f       	sbci	r25, 0xFF	; 255
    11be:	08 95       	ret

000011c0 <__fp_cmp>:
    11c0:	99 0f       	add	r25, r25
    11c2:	00 08       	sbc	r0, r0
    11c4:	55 0f       	add	r21, r21
    11c6:	aa 0b       	sbc	r26, r26
    11c8:	e0 e8       	ldi	r30, 0x80	; 128
    11ca:	fe ef       	ldi	r31, 0xFE	; 254
    11cc:	16 16       	cp	r1, r22
    11ce:	17 06       	cpc	r1, r23
    11d0:	e8 07       	cpc	r30, r24
    11d2:	f9 07       	cpc	r31, r25
    11d4:	c0 f0       	brcs	.+48     	; 0x1206 <__fp_cmp+0x46>
    11d6:	12 16       	cp	r1, r18
    11d8:	13 06       	cpc	r1, r19
    11da:	e4 07       	cpc	r30, r20
    11dc:	f5 07       	cpc	r31, r21
    11de:	98 f0       	brcs	.+38     	; 0x1206 <__fp_cmp+0x46>
    11e0:	62 1b       	sub	r22, r18
    11e2:	73 0b       	sbc	r23, r19
    11e4:	84 0b       	sbc	r24, r20
    11e6:	95 0b       	sbc	r25, r21
    11e8:	39 f4       	brne	.+14     	; 0x11f8 <__fp_cmp+0x38>
    11ea:	0a 26       	eor	r0, r26
    11ec:	61 f0       	breq	.+24     	; 0x1206 <__fp_cmp+0x46>
    11ee:	23 2b       	or	r18, r19
    11f0:	24 2b       	or	r18, r20
    11f2:	25 2b       	or	r18, r21
    11f4:	21 f4       	brne	.+8      	; 0x11fe <__fp_cmp+0x3e>
    11f6:	08 95       	ret
    11f8:	0a 26       	eor	r0, r26
    11fa:	09 f4       	brne	.+2      	; 0x11fe <__fp_cmp+0x3e>
    11fc:	a1 40       	sbci	r26, 0x01	; 1
    11fe:	a6 95       	lsr	r26
    1200:	8f ef       	ldi	r24, 0xFF	; 255
    1202:	81 1d       	adc	r24, r1
    1204:	81 1d       	adc	r24, r1
    1206:	08 95       	ret

00001208 <__fp_inf>:
    1208:	97 f9       	bld	r25, 7
    120a:	9f 67       	ori	r25, 0x7F	; 127
    120c:	80 e8       	ldi	r24, 0x80	; 128
    120e:	70 e0       	ldi	r23, 0x00	; 0
    1210:	60 e0       	ldi	r22, 0x00	; 0
    1212:	08 95       	ret

00001214 <__fp_mintl>:
    1214:	88 23       	and	r24, r24
    1216:	71 f4       	brne	.+28     	; 0x1234 <__fp_mintl+0x20>
    1218:	77 23       	and	r23, r23
    121a:	21 f0       	breq	.+8      	; 0x1224 <__fp_mintl+0x10>
    121c:	98 50       	subi	r25, 0x08	; 8
    121e:	87 2b       	or	r24, r23
    1220:	76 2f       	mov	r23, r22
    1222:	07 c0       	rjmp	.+14     	; 0x1232 <__fp_mintl+0x1e>
    1224:	66 23       	and	r22, r22
    1226:	11 f4       	brne	.+4      	; 0x122c <__fp_mintl+0x18>
    1228:	99 27       	eor	r25, r25
    122a:	0d c0       	rjmp	.+26     	; 0x1246 <__fp_mintl+0x32>
    122c:	90 51       	subi	r25, 0x10	; 16
    122e:	86 2b       	or	r24, r22
    1230:	70 e0       	ldi	r23, 0x00	; 0
    1232:	60 e0       	ldi	r22, 0x00	; 0
    1234:	2a f0       	brmi	.+10     	; 0x1240 <__fp_mintl+0x2c>
    1236:	9a 95       	dec	r25
    1238:	66 0f       	add	r22, r22
    123a:	77 1f       	adc	r23, r23
    123c:	88 1f       	adc	r24, r24
    123e:	da f7       	brpl	.-10     	; 0x1236 <__fp_mintl+0x22>
    1240:	88 0f       	add	r24, r24
    1242:	96 95       	lsr	r25
    1244:	87 95       	ror	r24
    1246:	97 f9       	bld	r25, 7
    1248:	08 95       	ret

0000124a <__fp_mpack>:
    124a:	9f 3f       	cpi	r25, 0xFF	; 255
    124c:	31 f0       	breq	.+12     	; 0x125a <__fp_mpack_finite+0xc>

0000124e <__fp_mpack_finite>:
    124e:	91 50       	subi	r25, 0x01	; 1
    1250:	20 f4       	brcc	.+8      	; 0x125a <__fp_mpack_finite+0xc>
    1252:	87 95       	ror	r24
    1254:	77 95       	ror	r23
    1256:	67 95       	ror	r22
    1258:	b7 95       	ror	r27
    125a:	88 0f       	add	r24, r24
    125c:	91 1d       	adc	r25, r1
    125e:	96 95       	lsr	r25
    1260:	87 95       	ror	r24
    1262:	97 f9       	bld	r25, 7
    1264:	08 95       	ret

00001266 <__fp_nan>:
    1266:	9f ef       	ldi	r25, 0xFF	; 255
    1268:	80 ec       	ldi	r24, 0xC0	; 192
    126a:	08 95       	ret

0000126c <__fp_pscA>:
    126c:	00 24       	eor	r0, r0
    126e:	0a 94       	dec	r0
    1270:	16 16       	cp	r1, r22
    1272:	17 06       	cpc	r1, r23
    1274:	18 06       	cpc	r1, r24
    1276:	09 06       	cpc	r0, r25
    1278:	08 95       	ret

0000127a <__fp_pscB>:
    127a:	00 24       	eor	r0, r0
    127c:	0a 94       	dec	r0
    127e:	12 16       	cp	r1, r18
    1280:	13 06       	cpc	r1, r19
    1282:	14 06       	cpc	r1, r20
    1284:	05 06       	cpc	r0, r21
    1286:	08 95       	ret

00001288 <__fp_round>:
    1288:	09 2e       	mov	r0, r25
    128a:	03 94       	inc	r0
    128c:	00 0c       	add	r0, r0
    128e:	11 f4       	brne	.+4      	; 0x1294 <__fp_round+0xc>
    1290:	88 23       	and	r24, r24
    1292:	52 f0       	brmi	.+20     	; 0x12a8 <__fp_round+0x20>
    1294:	bb 0f       	add	r27, r27
    1296:	40 f4       	brcc	.+16     	; 0x12a8 <__fp_round+0x20>
    1298:	bf 2b       	or	r27, r31
    129a:	11 f4       	brne	.+4      	; 0x12a0 <__fp_round+0x18>
    129c:	60 ff       	sbrs	r22, 0
    129e:	04 c0       	rjmp	.+8      	; 0x12a8 <__fp_round+0x20>
    12a0:	6f 5f       	subi	r22, 0xFF	; 255
    12a2:	7f 4f       	sbci	r23, 0xFF	; 255
    12a4:	8f 4f       	sbci	r24, 0xFF	; 255
    12a6:	9f 4f       	sbci	r25, 0xFF	; 255
    12a8:	08 95       	ret

000012aa <__fp_split3>:
    12aa:	57 fd       	sbrc	r21, 7
    12ac:	90 58       	subi	r25, 0x80	; 128
    12ae:	44 0f       	add	r20, r20
    12b0:	55 1f       	adc	r21, r21
    12b2:	59 f0       	breq	.+22     	; 0x12ca <__fp_splitA+0x10>
    12b4:	5f 3f       	cpi	r21, 0xFF	; 255
    12b6:	71 f0       	breq	.+28     	; 0x12d4 <__fp_splitA+0x1a>
    12b8:	47 95       	ror	r20

000012ba <__fp_splitA>:
    12ba:	88 0f       	add	r24, r24
    12bc:	97 fb       	bst	r25, 7
    12be:	99 1f       	adc	r25, r25
    12c0:	61 f0       	breq	.+24     	; 0x12da <__fp_splitA+0x20>
    12c2:	9f 3f       	cpi	r25, 0xFF	; 255
    12c4:	79 f0       	breq	.+30     	; 0x12e4 <__fp_splitA+0x2a>
    12c6:	87 95       	ror	r24
    12c8:	08 95       	ret
    12ca:	12 16       	cp	r1, r18
    12cc:	13 06       	cpc	r1, r19
    12ce:	14 06       	cpc	r1, r20
    12d0:	55 1f       	adc	r21, r21
    12d2:	f2 cf       	rjmp	.-28     	; 0x12b8 <__fp_split3+0xe>
    12d4:	46 95       	lsr	r20
    12d6:	f1 df       	rcall	.-30     	; 0x12ba <__fp_splitA>
    12d8:	08 c0       	rjmp	.+16     	; 0x12ea <__fp_splitA+0x30>
    12da:	16 16       	cp	r1, r22
    12dc:	17 06       	cpc	r1, r23
    12de:	18 06       	cpc	r1, r24
    12e0:	99 1f       	adc	r25, r25
    12e2:	f1 cf       	rjmp	.-30     	; 0x12c6 <__fp_splitA+0xc>
    12e4:	86 95       	lsr	r24
    12e6:	71 05       	cpc	r23, r1
    12e8:	61 05       	cpc	r22, r1
    12ea:	08 94       	sec
    12ec:	08 95       	ret

000012ee <__fp_trunc>:
    12ee:	0e 94 5d 09 	call	0x12ba	; 0x12ba <__fp_splitA>
    12f2:	a0 f0       	brcs	.+40     	; 0x131c <__fp_trunc+0x2e>
    12f4:	be e7       	ldi	r27, 0x7E	; 126
    12f6:	b9 17       	cp	r27, r25
    12f8:	88 f4       	brcc	.+34     	; 0x131c <__fp_trunc+0x2e>
    12fa:	bb 27       	eor	r27, r27
    12fc:	9f 38       	cpi	r25, 0x8F	; 143
    12fe:	60 f4       	brcc	.+24     	; 0x1318 <__fp_trunc+0x2a>
    1300:	16 16       	cp	r1, r22
    1302:	b1 1d       	adc	r27, r1
    1304:	67 2f       	mov	r22, r23
    1306:	78 2f       	mov	r23, r24
    1308:	88 27       	eor	r24, r24
    130a:	98 5f       	subi	r25, 0xF8	; 248
    130c:	f7 cf       	rjmp	.-18     	; 0x12fc <__fp_trunc+0xe>
    130e:	86 95       	lsr	r24
    1310:	77 95       	ror	r23
    1312:	67 95       	ror	r22
    1314:	b1 1d       	adc	r27, r1
    1316:	93 95       	inc	r25
    1318:	96 39       	cpi	r25, 0x96	; 150
    131a:	c8 f3       	brcs	.-14     	; 0x130e <__fp_trunc+0x20>
    131c:	08 95       	ret

0000131e <__fp_zero>:
    131e:	e8 94       	clt

00001320 <__fp_szero>:
    1320:	bb 27       	eor	r27, r27
    1322:	66 27       	eor	r22, r22
    1324:	77 27       	eor	r23, r23
    1326:	cb 01       	movw	r24, r22
    1328:	97 f9       	bld	r25, 7
    132a:	08 95       	ret

0000132c <__gesf2>:
    132c:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <__fp_cmp>
    1330:	08 f4       	brcc	.+2      	; 0x1334 <__gesf2+0x8>
    1332:	8f ef       	ldi	r24, 0xFF	; 255
    1334:	08 95       	ret

00001336 <__mulsf3>:
    1336:	0e 94 ae 09 	call	0x135c	; 0x135c <__mulsf3x>
    133a:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__fp_round>
    133e:	0e 94 36 09 	call	0x126c	; 0x126c <__fp_pscA>
    1342:	38 f0       	brcs	.+14     	; 0x1352 <__mulsf3+0x1c>
    1344:	0e 94 3d 09 	call	0x127a	; 0x127a <__fp_pscB>
    1348:	20 f0       	brcs	.+8      	; 0x1352 <__mulsf3+0x1c>
    134a:	95 23       	and	r25, r21
    134c:	11 f0       	breq	.+4      	; 0x1352 <__mulsf3+0x1c>
    134e:	0c 94 04 09 	jmp	0x1208	; 0x1208 <__fp_inf>
    1352:	0c 94 33 09 	jmp	0x1266	; 0x1266 <__fp_nan>
    1356:	11 24       	eor	r1, r1
    1358:	0c 94 90 09 	jmp	0x1320	; 0x1320 <__fp_szero>

0000135c <__mulsf3x>:
    135c:	0e 94 55 09 	call	0x12aa	; 0x12aa <__fp_split3>
    1360:	70 f3       	brcs	.-36     	; 0x133e <__mulsf3+0x8>

00001362 <__mulsf3_pse>:
    1362:	95 9f       	mul	r25, r21
    1364:	c1 f3       	breq	.-16     	; 0x1356 <__mulsf3+0x20>
    1366:	95 0f       	add	r25, r21
    1368:	50 e0       	ldi	r21, 0x00	; 0
    136a:	55 1f       	adc	r21, r21
    136c:	62 9f       	mul	r22, r18
    136e:	f0 01       	movw	r30, r0
    1370:	72 9f       	mul	r23, r18
    1372:	bb 27       	eor	r27, r27
    1374:	f0 0d       	add	r31, r0
    1376:	b1 1d       	adc	r27, r1
    1378:	63 9f       	mul	r22, r19
    137a:	aa 27       	eor	r26, r26
    137c:	f0 0d       	add	r31, r0
    137e:	b1 1d       	adc	r27, r1
    1380:	aa 1f       	adc	r26, r26
    1382:	64 9f       	mul	r22, r20
    1384:	66 27       	eor	r22, r22
    1386:	b0 0d       	add	r27, r0
    1388:	a1 1d       	adc	r26, r1
    138a:	66 1f       	adc	r22, r22
    138c:	82 9f       	mul	r24, r18
    138e:	22 27       	eor	r18, r18
    1390:	b0 0d       	add	r27, r0
    1392:	a1 1d       	adc	r26, r1
    1394:	62 1f       	adc	r22, r18
    1396:	73 9f       	mul	r23, r19
    1398:	b0 0d       	add	r27, r0
    139a:	a1 1d       	adc	r26, r1
    139c:	62 1f       	adc	r22, r18
    139e:	83 9f       	mul	r24, r19
    13a0:	a0 0d       	add	r26, r0
    13a2:	61 1d       	adc	r22, r1
    13a4:	22 1f       	adc	r18, r18
    13a6:	74 9f       	mul	r23, r20
    13a8:	33 27       	eor	r19, r19
    13aa:	a0 0d       	add	r26, r0
    13ac:	61 1d       	adc	r22, r1
    13ae:	23 1f       	adc	r18, r19
    13b0:	84 9f       	mul	r24, r20
    13b2:	60 0d       	add	r22, r0
    13b4:	21 1d       	adc	r18, r1
    13b6:	82 2f       	mov	r24, r18
    13b8:	76 2f       	mov	r23, r22
    13ba:	6a 2f       	mov	r22, r26
    13bc:	11 24       	eor	r1, r1
    13be:	9f 57       	subi	r25, 0x7F	; 127
    13c0:	50 40       	sbci	r21, 0x00	; 0
    13c2:	9a f0       	brmi	.+38     	; 0x13ea <__mulsf3_pse+0x88>
    13c4:	f1 f0       	breq	.+60     	; 0x1402 <__mulsf3_pse+0xa0>
    13c6:	88 23       	and	r24, r24
    13c8:	4a f0       	brmi	.+18     	; 0x13dc <__mulsf3_pse+0x7a>
    13ca:	ee 0f       	add	r30, r30
    13cc:	ff 1f       	adc	r31, r31
    13ce:	bb 1f       	adc	r27, r27
    13d0:	66 1f       	adc	r22, r22
    13d2:	77 1f       	adc	r23, r23
    13d4:	88 1f       	adc	r24, r24
    13d6:	91 50       	subi	r25, 0x01	; 1
    13d8:	50 40       	sbci	r21, 0x00	; 0
    13da:	a9 f7       	brne	.-22     	; 0x13c6 <__mulsf3_pse+0x64>
    13dc:	9e 3f       	cpi	r25, 0xFE	; 254
    13de:	51 05       	cpc	r21, r1
    13e0:	80 f0       	brcs	.+32     	; 0x1402 <__mulsf3_pse+0xa0>
    13e2:	0c 94 04 09 	jmp	0x1208	; 0x1208 <__fp_inf>
    13e6:	0c 94 90 09 	jmp	0x1320	; 0x1320 <__fp_szero>
    13ea:	5f 3f       	cpi	r21, 0xFF	; 255
    13ec:	e4 f3       	brlt	.-8      	; 0x13e6 <__mulsf3_pse+0x84>
    13ee:	98 3e       	cpi	r25, 0xE8	; 232
    13f0:	d4 f3       	brlt	.-12     	; 0x13e6 <__mulsf3_pse+0x84>
    13f2:	86 95       	lsr	r24
    13f4:	77 95       	ror	r23
    13f6:	67 95       	ror	r22
    13f8:	b7 95       	ror	r27
    13fa:	f7 95       	ror	r31
    13fc:	e7 95       	ror	r30
    13fe:	9f 5f       	subi	r25, 0xFF	; 255
    1400:	c1 f7       	brne	.-16     	; 0x13f2 <__mulsf3_pse+0x90>
    1402:	fe 2b       	or	r31, r30
    1404:	88 0f       	add	r24, r24
    1406:	91 1d       	adc	r25, r1
    1408:	96 95       	lsr	r25
    140a:	87 95       	ror	r24
    140c:	97 f9       	bld	r25, 7
    140e:	08 95       	ret

00001410 <__tablejump2__>:
    1410:	ee 0f       	add	r30, r30
    1412:	ff 1f       	adc	r31, r31
    1414:	05 90       	lpm	r0, Z+
    1416:	f4 91       	lpm	r31, Z
    1418:	e0 2d       	mov	r30, r0
    141a:	09 94       	ijmp

0000141c <_exit>:
    141c:	f8 94       	cli

0000141e <__stop_program>:
    141e:	ff cf       	rjmp	.-2      	; 0x141e <__stop_program>
