
Project_4WD_Car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001490  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00001490  00001524  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800062  00800062  00001526  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001526  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001558  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000280  00000000  00000000  00001594  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000247b  00000000  00000000  00001814  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cff  00000000  00000000  00003c8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001906  00000000  00000000  0000498e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005f4  00000000  00000000  00006294  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c97  00000000  00000000  00006888  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001732  00000000  00000000  0000751f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  00008c51  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 33 00 	jmp	0x66	; 0x66 <__ctors_end>
       4:	0c 94 28 05 	jmp	0xa50	; 0xa50 <__vector_1>
       8:	0c 94 55 05 	jmp	0xaaa	; 0xaaa <__vector_2>
       c:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__vector_3>
      10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      14:	0c 94 93 07 	jmp	0xf26	; 0xf26 <__vector_5>
      18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      54:	fd 01       	movw	r30, r26
      56:	00 02       	muls	r16, r16
      58:	05 02       	muls	r16, r21
      5a:	0a 02       	muls	r16, r26
      5c:	0f 02       	muls	r16, r31
      5e:	14 02       	muls	r17, r20
      60:	19 02       	muls	r17, r25
      62:	1f 02       	muls	r17, r31
      64:	25 02       	muls	r18, r21

00000066 <__ctors_end>:
      66:	11 24       	eor	r1, r1
      68:	1f be       	out	0x3f, r1	; 63
      6a:	cf e5       	ldi	r28, 0x5F	; 95
      6c:	d8 e0       	ldi	r29, 0x08	; 8
      6e:	de bf       	out	0x3e, r29	; 62
      70:	cd bf       	out	0x3d, r28	; 61

00000072 <__do_copy_data>:
      72:	10 e0       	ldi	r17, 0x00	; 0
      74:	a0 e6       	ldi	r26, 0x60	; 96
      76:	b0 e0       	ldi	r27, 0x00	; 0
      78:	e0 e9       	ldi	r30, 0x90	; 144
      7a:	f4 e1       	ldi	r31, 0x14	; 20
      7c:	02 c0       	rjmp	.+4      	; 0x82 <__do_copy_data+0x10>
      7e:	05 90       	lpm	r0, Z+
      80:	0d 92       	st	X+, r0
      82:	a2 36       	cpi	r26, 0x62	; 98
      84:	b1 07       	cpc	r27, r17
      86:	d9 f7       	brne	.-10     	; 0x7e <__do_copy_data+0xc>

00000088 <__do_clear_bss>:
      88:	20 e0       	ldi	r18, 0x00	; 0
      8a:	a2 e6       	ldi	r26, 0x62	; 98
      8c:	b0 e0       	ldi	r27, 0x00	; 0
      8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
      90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
      92:	a4 37       	cpi	r26, 0x74	; 116
      94:	b2 07       	cpc	r27, r18
      96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
      98:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <main>
      9c:	0c 94 46 0a 	jmp	0x148c	; 0x148c <_exit>

000000a0 <__bad_interrupt>:
      a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <APP_init>:
uint8_t btn_pin_tst = BUTTON_START_PIN;
uint8_t ext_tst = EXTERNAL_INTERRUPT_0;

EN_appError_t APP_init(void) {

   if (LED_init(PWM_LED_PORT, PWM_LED_PIN) != LED_OK) {
      a4:	60 e0       	ldi	r22, 0x00	; 0
      a6:	82 e4       	ldi	r24, 0x42	; 66
      a8:	0e 94 54 02 	call	0x4a8	; 0x4a8 <LED_init>
      ac:	81 11       	cpse	r24, r1
      ae:	5a c0       	rjmp	.+180    	; 0x164 <APP_init+0xc0>
      return APP_LED_ERROR;
   } else if (LED_init(TIMER_PORT_CE, led_pin_tst) != LED_OK) {
      b0:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <led_pin_tst>
      b4:	82 e4       	ldi	r24, 0x42	; 66
      b6:	0e 94 54 02 	call	0x4a8	; 0x4a8 <LED_init>
      ba:	81 11       	cpse	r24, r1
      bc:	55 c0       	rjmp	.+170    	; 0x168 <APP_init+0xc4>
      return APP_LED_ERROR;
   } else if (LED_init(TIMER_PORT_RST, TIMER_PIN_RST) != LED_OK) {
      be:	64 e0       	ldi	r22, 0x04	; 4
      c0:	82 e4       	ldi	r24, 0x42	; 66
      c2:	0e 94 54 02 	call	0x4a8	; 0x4a8 <LED_init>
      c6:	81 11       	cpse	r24, r1
      c8:	51 c0       	rjmp	.+162    	; 0x16c <APP_init+0xc8>
      return APP_LED_ERROR;
   } else if (BUTTON_init(BUTTON_STOP_PORT, BUTTON_STOP_PIN) != BTN_OK) {
      ca:	62 e0       	ldi	r22, 0x02	; 2
      cc:	84 e4       	ldi	r24, 0x44	; 68
      ce:	0e 94 50 02 	call	0x4a0	; 0x4a0 <BUTTON_init>
      d2:	81 11       	cpse	r24, r1
      d4:	4d c0       	rjmp	.+154    	; 0x170 <APP_init+0xcc>
      return APP_BTN_ERROR;
   } else if (BUTTON_init(BUTTON_START_PORT, btn_pin_tst) != BTN_OK) {
      d6:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
      da:	84 e4       	ldi	r24, 0x44	; 68
      dc:	0e 94 50 02 	call	0x4a0	; 0x4a0 <BUTTON_init>
      e0:	81 11       	cpse	r24, r1
      e2:	48 c0       	rjmp	.+144    	; 0x174 <APP_init+0xd0>
      return APP_BTN_ERROR;

   } else if (LED_init(LED_0_PORT, LED_0_PIN) != LED_OK) {
      e4:	60 e0       	ldi	r22, 0x00	; 0
      e6:	81 e4       	ldi	r24, 0x41	; 65
      e8:	0e 94 54 02 	call	0x4a8	; 0x4a8 <LED_init>
      ec:	81 11       	cpse	r24, r1
      ee:	44 c0       	rjmp	.+136    	; 0x178 <APP_init+0xd4>
      return APP_LED_ERROR;

   } else if (LED_init(LED_1_PORT, LED_1_PIN) != LED_OK) {
      f0:	62 e0       	ldi	r22, 0x02	; 2
      f2:	81 e4       	ldi	r24, 0x41	; 65
      f4:	0e 94 54 02 	call	0x4a8	; 0x4a8 <LED_init>
      f8:	81 11       	cpse	r24, r1
      fa:	40 c0       	rjmp	.+128    	; 0x17c <APP_init+0xd8>
      return APP_LED_ERROR;

   } else if (LED_init(LED_2_PORT, LED_2_PIN) != LED_OK) {
      fc:	65 e0       	ldi	r22, 0x05	; 5
      fe:	81 e4       	ldi	r24, 0x41	; 65
     100:	0e 94 54 02 	call	0x4a8	; 0x4a8 <LED_init>
     104:	81 11       	cpse	r24, r1
     106:	3c c0       	rjmp	.+120    	; 0x180 <APP_init+0xdc>
      return APP_LED_ERROR;

   } else if (LED_init(LED_3_PORT, LED_3_PIN) != LED_OK) {
     108:	67 e0       	ldi	r22, 0x07	; 7
     10a:	81 e4       	ldi	r24, 0x41	; 65
     10c:	0e 94 54 02 	call	0x4a8	; 0x4a8 <LED_init>
     110:	81 11       	cpse	r24, r1
     112:	38 c0       	rjmp	.+112    	; 0x184 <APP_init+0xe0>
      return APP_LED_ERROR;

   } else if (MOTOR_init() != MOTOR_OK) {
     114:	0e 94 60 02 	call	0x4c0	; 0x4c0 <MOTOR_init>
     118:	81 11       	cpse	r24, r1
     11a:	36 c0       	rjmp	.+108    	; 0x188 <APP_init+0xe4>
      return APP_MOTOR_ERROR;
   } else {
      INTERRUPTS_enableGlobalInterrupt();
     11c:	0e 94 89 04 	call	0x912	; 0x912 <INTERRUPTS_enableGlobalInterrupt>

      if (INTERRUPTS_enableExternalInterrupts(ext_tst) != INTERRUPT_OK) {
     120:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
     124:	0e 94 72 04 	call	0x8e4	; 0x8e4 <INTERRUPTS_enableExternalInterrupts>
     128:	81 11       	cpse	r24, r1
     12a:	30 c0       	rjmp	.+96     	; 0x18c <APP_init+0xe8>
         return APP_INTERRUPT_ERROR;
      } else if (INTERRUPTS_enableExternalInterrupts(EXTERNAL_INTERRUPT_1) != INTERRUPT_OK) {
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	0e 94 72 04 	call	0x8e4	; 0x8e4 <INTERRUPTS_enableExternalInterrupts>
     132:	81 11       	cpse	r24, r1
     134:	2d c0       	rjmp	.+90     	; 0x190 <APP_init+0xec>
         return APP_INTERRUPT_ERROR;
      } else if (INTERRUPTS_EXT_SetCallBack(EXTERNAL_INTERRUPT_0, MOTOR_stop) != INTERRUPT_OK) {
     136:	65 ed       	ldi	r22, 0xD5	; 213
     138:	72 e0       	ldi	r23, 0x02	; 2
     13a:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <INTERRUPTS_EXT_SetCallBack>
     13e:	81 11       	cpse	r24, r1
     140:	29 c0       	rjmp	.+82     	; 0x194 <APP_init+0xf0>
         return APP_INTERRUPT_ERROR;
      } else if (INTERRUPTS_extInterruptsEdge(EXTERNAL_INTERRUPT_0, LOW_LEVEL) != INTERRUPT_OK) {
     142:	60 e0       	ldi	r22, 0x00	; 0
     144:	0e 94 8b 04 	call	0x916	; 0x916 <INTERRUPTS_extInterruptsEdge>
     148:	81 11       	cpse	r24, r1
     14a:	26 c0       	rjmp	.+76     	; 0x198 <APP_init+0xf4>
         return APP_INTERRUPT_ERROR;
      } else if (INTERRUPTS_extInterruptsEdge(EXTERNAL_INTERRUPT_1, LOW_LEVEL) != INTERRUPT_OK) {
     14c:	60 e0       	ldi	r22, 0x00	; 0
     14e:	81 e0       	ldi	r24, 0x01	; 1
     150:	0e 94 8b 04 	call	0x916	; 0x916 <INTERRUPTS_extInterruptsEdge>
     154:	81 11       	cpse	r24, r1
     156:	22 c0       	rjmp	.+68     	; 0x19c <APP_init+0xf8>
         return APP_INTERRUPT_ERROR;
      } else if (TIMER_timer2Init() != TIMER_OK) {
     158:	0e 94 77 07 	call	0xeee	; 0xeee <TIMER_timer2Init>
     15c:	88 23       	and	r24, r24
     15e:	01 f1       	breq	.+64     	; 0x1a0 <APP_init+0xfc>
         return APP_TIMER_ERROR;
     160:	86 e0       	ldi	r24, 0x06	; 6
     162:	08 95       	ret
uint8_t ext_tst = EXTERNAL_INTERRUPT_0;

EN_appError_t APP_init(void) {

   if (LED_init(PWM_LED_PORT, PWM_LED_PIN) != LED_OK) {
      return APP_LED_ERROR;
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	08 95       	ret
   } else if (LED_init(TIMER_PORT_CE, led_pin_tst) != LED_OK) {
      return APP_LED_ERROR;
     168:	81 e0       	ldi	r24, 0x01	; 1
     16a:	08 95       	ret
   } else if (LED_init(TIMER_PORT_RST, TIMER_PIN_RST) != LED_OK) {
      return APP_LED_ERROR;
     16c:	81 e0       	ldi	r24, 0x01	; 1
     16e:	08 95       	ret
   } else if (BUTTON_init(BUTTON_STOP_PORT, BUTTON_STOP_PIN) != BTN_OK) {
      return APP_BTN_ERROR;
     170:	82 e0       	ldi	r24, 0x02	; 2
     172:	08 95       	ret
   } else if (BUTTON_init(BUTTON_START_PORT, btn_pin_tst) != BTN_OK) {
      return APP_BTN_ERROR;
     174:	82 e0       	ldi	r24, 0x02	; 2
     176:	08 95       	ret

   } else if (LED_init(LED_0_PORT, LED_0_PIN) != LED_OK) {
      return APP_LED_ERROR;
     178:	81 e0       	ldi	r24, 0x01	; 1
     17a:	08 95       	ret

   } else if (LED_init(LED_1_PORT, LED_1_PIN) != LED_OK) {
      return APP_LED_ERROR;
     17c:	81 e0       	ldi	r24, 0x01	; 1
     17e:	08 95       	ret

   } else if (LED_init(LED_2_PORT, LED_2_PIN) != LED_OK) {
      return APP_LED_ERROR;
     180:	81 e0       	ldi	r24, 0x01	; 1
     182:	08 95       	ret

   } else if (LED_init(LED_3_PORT, LED_3_PIN) != LED_OK) {
      return APP_LED_ERROR;
     184:	81 e0       	ldi	r24, 0x01	; 1
     186:	08 95       	ret

   } else if (MOTOR_init() != MOTOR_OK) {
      return APP_MOTOR_ERROR;
     188:	85 e0       	ldi	r24, 0x05	; 5
     18a:	08 95       	ret
   } else {
      INTERRUPTS_enableGlobalInterrupt();

      if (INTERRUPTS_enableExternalInterrupts(ext_tst) != INTERRUPT_OK) {
         return APP_INTERRUPT_ERROR;
     18c:	87 e0       	ldi	r24, 0x07	; 7
     18e:	08 95       	ret
      } else if (INTERRUPTS_enableExternalInterrupts(EXTERNAL_INTERRUPT_1) != INTERRUPT_OK) {
         return APP_INTERRUPT_ERROR;
     190:	87 e0       	ldi	r24, 0x07	; 7
     192:	08 95       	ret
      } else if (INTERRUPTS_EXT_SetCallBack(EXTERNAL_INTERRUPT_0, MOTOR_stop) != INTERRUPT_OK) {
         return APP_INTERRUPT_ERROR;
     194:	87 e0       	ldi	r24, 0x07	; 7
     196:	08 95       	ret
      } else if (INTERRUPTS_extInterruptsEdge(EXTERNAL_INTERRUPT_0, LOW_LEVEL) != INTERRUPT_OK) {
         return APP_INTERRUPT_ERROR;
     198:	87 e0       	ldi	r24, 0x07	; 7
     19a:	08 95       	ret
      } else if (INTERRUPTS_extInterruptsEdge(EXTERNAL_INTERRUPT_1, LOW_LEVEL) != INTERRUPT_OK) {
         return APP_INTERRUPT_ERROR;
     19c:	87 e0       	ldi	r24, 0x07	; 7
     19e:	08 95       	ret
         return APP_TIMER_ERROR;

      }

   }
   return APP_OK;
     1a0:	80 e0       	ldi	r24, 0x00	; 0

}
     1a2:	08 95       	ret

000001a4 <APP_pwmMode>:
   }
   return APP_OK;

}

EN_appError_t APP_pwmMode(float32 f32_a_pwmValue) {
     1a4:	8f 92       	push	r8
     1a6:	9f 92       	push	r9
     1a8:	af 92       	push	r10
     1aa:	bf 92       	push	r11
     1ac:	cf 92       	push	r12
     1ae:	df 92       	push	r13
     1b0:	ef 92       	push	r14
     1b2:	ff 92       	push	r15
   float32 f32_v_Timer0_time_1, f32_v_Timer0_time_2;
   f32_v_Timer0_time_1 = ((f32_a_pwmValue / PWM_100) * PWM_256);
     1b4:	20 e0       	ldi	r18, 0x00	; 0
     1b6:	30 e0       	ldi	r19, 0x00	; 0
     1b8:	48 ec       	ldi	r20, 0xC8	; 200
     1ba:	52 e4       	ldi	r21, 0x42	; 66
     1bc:	0e 94 77 08 	call	0x10ee	; 0x10ee <__divsf3>
     1c0:	20 e0       	ldi	r18, 0x00	; 0
     1c2:	30 e0       	ldi	r19, 0x00	; 0
     1c4:	40 e8       	ldi	r20, 0x80	; 128
     1c6:	53 e4       	ldi	r21, 0x43	; 67
     1c8:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <__mulsf3>
     1cc:	6b 01       	movw	r12, r22
     1ce:	7c 01       	movw	r14, r24
   f32_v_Timer0_time_2 = (PWM_256 - f32_v_Timer0_time_1);
     1d0:	9b 01       	movw	r18, r22
     1d2:	ac 01       	movw	r20, r24
     1d4:	60 e0       	ldi	r22, 0x00	; 0
     1d6:	70 e0       	ldi	r23, 0x00	; 0
     1d8:	80 e8       	ldi	r24, 0x80	; 128
     1da:	93 e4       	ldi	r25, 0x43	; 67
     1dc:	0e 94 ee 07 	call	0xfdc	; 0xfdc <__subsf3>
     1e0:	4b 01       	movw	r8, r22
     1e2:	5c 01       	movw	r10, r24
   if (TIMER_timer0PWM_mode(f32_v_Timer0_time_1) != TIMER_OK) {
     1e4:	c7 01       	movw	r24, r14
     1e6:	b6 01       	movw	r22, r12
     1e8:	0e 94 a1 06 	call	0xd42	; 0xd42 <TIMER_timer0PWM_mode>
     1ec:	81 11       	cpse	r24, r1
     1ee:	14 c0       	rjmp	.+40     	; 0x218 <APP_pwmMode+0x74>
      return APP_TIMER_ERROR;
   } else if (LED_on(PWM_LED_PORT, PWM_LED_PIN) != LED_OK) {
     1f0:	60 e0       	ldi	r22, 0x00	; 0
     1f2:	82 e4       	ldi	r24, 0x42	; 66
     1f4:	0e 94 58 02 	call	0x4b0	; 0x4b0 <LED_on>
     1f8:	81 11       	cpse	r24, r1
     1fa:	10 c0       	rjmp	.+32     	; 0x21c <APP_pwmMode+0x78>
      return APP_LED_ERROR;
   } else if (TIMER_timer0PWM_mode(f32_v_Timer0_time_2) != TIMER_OK) {
     1fc:	c5 01       	movw	r24, r10
     1fe:	b4 01       	movw	r22, r8
     200:	0e 94 a1 06 	call	0xd42	; 0xd42 <TIMER_timer0PWM_mode>
     204:	81 11       	cpse	r24, r1
     206:	0c c0       	rjmp	.+24     	; 0x220 <APP_pwmMode+0x7c>
      return APP_TIMER_ERROR;
   } else if (LED_off(PWM_LED_PORT, PWM_LED_PIN) != LED_OK) {
     208:	60 e0       	ldi	r22, 0x00	; 0
     20a:	82 e4       	ldi	r24, 0x42	; 66
     20c:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LED_off>
     210:	88 23       	and	r24, r24
     212:	41 f0       	breq	.+16     	; 0x224 <APP_pwmMode+0x80>
      return APP_LED_ERROR;
     214:	81 e0       	ldi	r24, 0x01	; 1
     216:	07 c0       	rjmp	.+14     	; 0x226 <APP_pwmMode+0x82>
EN_appError_t APP_pwmMode(float32 f32_a_pwmValue) {
   float32 f32_v_Timer0_time_1, f32_v_Timer0_time_2;
   f32_v_Timer0_time_1 = ((f32_a_pwmValue / PWM_100) * PWM_256);
   f32_v_Timer0_time_2 = (PWM_256 - f32_v_Timer0_time_1);
   if (TIMER_timer0PWM_mode(f32_v_Timer0_time_1) != TIMER_OK) {
      return APP_TIMER_ERROR;
     218:	86 e0       	ldi	r24, 0x06	; 6
     21a:	05 c0       	rjmp	.+10     	; 0x226 <APP_pwmMode+0x82>
   } else if (LED_on(PWM_LED_PORT, PWM_LED_PIN) != LED_OK) {
      return APP_LED_ERROR;
     21c:	81 e0       	ldi	r24, 0x01	; 1
     21e:	03 c0       	rjmp	.+6      	; 0x226 <APP_pwmMode+0x82>
   } else if (TIMER_timer0PWM_mode(f32_v_Timer0_time_2) != TIMER_OK) {
      return APP_TIMER_ERROR;
     220:	86 e0       	ldi	r24, 0x06	; 6
     222:	01 c0       	rjmp	.+2      	; 0x226 <APP_pwmMode+0x82>
   } else if (LED_off(PWM_LED_PORT, PWM_LED_PIN) != LED_OK) {
      return APP_LED_ERROR;
   }
   return APP_OK;
     224:	80 e0       	ldi	r24, 0x00	; 0
}
     226:	ff 90       	pop	r15
     228:	ef 90       	pop	r14
     22a:	df 90       	pop	r13
     22c:	cf 90       	pop	r12
     22e:	bf 90       	pop	r11
     230:	af 90       	pop	r10
     232:	9f 90       	pop	r9
     234:	8f 90       	pop	r8
     236:	08 95       	ret

00000238 <APP_moveShortSlide>:

EN_appError_t APP_moveShortSlide(void) {
   if (LED_off(LED_0_PORT, LED_0_PIN) != LED_OK) {
     238:	60 e0       	ldi	r22, 0x00	; 0
     23a:	81 e4       	ldi	r24, 0x41	; 65
     23c:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LED_off>
     240:	81 11       	cpse	r24, r1
     242:	20 c0       	rjmp	.+64     	; 0x284 <APP_moveShortSlide+0x4c>
      return APP_LED_ERROR;
   }
   i32_g_TimeMode_ovf = MOVE_2_SEC;
     244:	85 e8       	ldi	r24, 0x85	; 133
     246:	9e e1       	ldi	r25, 0x1E	; 30
     248:	a0 e0       	ldi	r26, 0x00	; 0
     24a:	b0 e0       	ldi	r27, 0x00	; 0
     24c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <i32_g_TimeMode_ovf>
     250:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <i32_g_TimeMode_ovf+0x1>
     254:	a0 93 71 00 	sts	0x0071, r26	; 0x800071 <i32_g_TimeMode_ovf+0x2>
     258:	b0 93 72 00 	sts	0x0072, r27	; 0x800072 <i32_g_TimeMode_ovf+0x3>
   if (MOTOR_moveForward() != MOTOR_OK) {
     25c:	0e 94 87 02 	call	0x50e	; 0x50e <MOTOR_moveForward>
     260:	81 11       	cpse	r24, r1
     262:	12 c0       	rjmp	.+36     	; 0x288 <APP_moveShortSlide+0x50>
      return APP_MOTOR_ERROR;
   } else if (LED_on(LED_2_PORT, LED_2_PIN) != LED_OK) {
     264:	65 e0       	ldi	r22, 0x05	; 5
     266:	81 e4       	ldi	r24, 0x41	; 65
     268:	0e 94 58 02 	call	0x4b0	; 0x4b0 <LED_on>
     26c:	81 11       	cpse	r24, r1
     26e:	0e c0       	rjmp	.+28     	; 0x28c <APP_moveShortSlide+0x54>
      return APP_LED_ERROR;
   } else if (APP_pwmMode(_30_PER_OF_MAX_SPEED) != APP_OK) {
     270:	60 e0       	ldi	r22, 0x00	; 0
     272:	70 e0       	ldi	r23, 0x00	; 0
     274:	80 ef       	ldi	r24, 0xF0	; 240
     276:	91 e4       	ldi	r25, 0x41	; 65
     278:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <APP_pwmMode>
     27c:	88 23       	and	r24, r24
     27e:	39 f0       	breq	.+14     	; 0x28e <APP_moveShortSlide+0x56>
      return APP_ERROR_EXIT;
     280:	84 e0       	ldi	r24, 0x04	; 4
     282:	08 95       	ret
   return APP_OK;
}

EN_appError_t APP_moveShortSlide(void) {
   if (LED_off(LED_0_PORT, LED_0_PIN) != LED_OK) {
      return APP_LED_ERROR;
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	08 95       	ret
   }
   i32_g_TimeMode_ovf = MOVE_2_SEC;
   if (MOTOR_moveForward() != MOTOR_OK) {
      return APP_MOTOR_ERROR;
     288:	85 e0       	ldi	r24, 0x05	; 5
     28a:	08 95       	ret
   } else if (LED_on(LED_2_PORT, LED_2_PIN) != LED_OK) {
      return APP_LED_ERROR;
     28c:	81 e0       	ldi	r24, 0x01	; 1
      return APP_ERROR_EXIT;
   }

   return APP_OK;

}
     28e:	08 95       	ret

00000290 <APP_carStop>:

EN_appError_t APP_carStop(void) {

   if (LED_off(LED_1_PORT, LED_1_PIN) != LED_OK) {
     290:	62 e0       	ldi	r22, 0x02	; 2
     292:	81 e4       	ldi	r24, 0x41	; 65
     294:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LED_off>
     298:	81 11       	cpse	r24, r1
     29a:	22 c0       	rjmp	.+68     	; 0x2e0 <APP_carStop+0x50>
      return APP_LED_ERROR;
   } else if (LED_off(LED_2_PORT, LED_2_PIN) != LED_OK) {
     29c:	65 e0       	ldi	r22, 0x05	; 5
     29e:	81 e4       	ldi	r24, 0x41	; 65
     2a0:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LED_off>
     2a4:	81 11       	cpse	r24, r1
     2a6:	1e c0       	rjmp	.+60     	; 0x2e4 <APP_carStop+0x54>
      return APP_LED_ERROR;
   } else if (LED_off(LED_3_PORT, LED_3_PIN) != LED_OK) {
     2a8:	67 e0       	ldi	r22, 0x07	; 7
     2aa:	81 e4       	ldi	r24, 0x41	; 65
     2ac:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LED_off>
     2b0:	81 11       	cpse	r24, r1
     2b2:	1a c0       	rjmp	.+52     	; 0x2e8 <APP_carStop+0x58>
      return APP_LED_ERROR;
   } else if (LED_on(LED_0_PORT, LED_0_PIN) != LED_OK) {
     2b4:	60 e0       	ldi	r22, 0x00	; 0
     2b6:	81 e4       	ldi	r24, 0x41	; 65
     2b8:	0e 94 58 02 	call	0x4b0	; 0x4b0 <LED_on>
     2bc:	81 11       	cpse	r24, r1
     2be:	16 c0       	rjmp	.+44     	; 0x2ec <APP_carStop+0x5c>
      return APP_LED_ERROR;
   } else {
      i32_g_TimeMode_ovf = STOP_HALF_SEC;
     2c0:	81 ea       	ldi	r24, 0xA1	; 161
     2c2:	97 e0       	ldi	r25, 0x07	; 7
     2c4:	a0 e0       	ldi	r26, 0x00	; 0
     2c6:	b0 e0       	ldi	r27, 0x00	; 0
     2c8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <i32_g_TimeMode_ovf>
     2cc:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <i32_g_TimeMode_ovf+0x1>
     2d0:	a0 93 71 00 	sts	0x0071, r26	; 0x800071 <i32_g_TimeMode_ovf+0x2>
     2d4:	b0 93 72 00 	sts	0x0072, r27	; 0x800072 <i32_g_TimeMode_ovf+0x3>
      MOTOR_stop();
     2d8:	0e 94 d5 02 	call	0x5aa	; 0x5aa <MOTOR_stop>
   }

   return APP_OK;
     2dc:	80 e0       	ldi	r24, 0x00	; 0
     2de:	08 95       	ret
}

EN_appError_t APP_carStop(void) {

   if (LED_off(LED_1_PORT, LED_1_PIN) != LED_OK) {
      return APP_LED_ERROR;
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	08 95       	ret
   } else if (LED_off(LED_2_PORT, LED_2_PIN) != LED_OK) {
      return APP_LED_ERROR;
     2e4:	81 e0       	ldi	r24, 0x01	; 1
     2e6:	08 95       	ret
   } else if (LED_off(LED_3_PORT, LED_3_PIN) != LED_OK) {
      return APP_LED_ERROR;
     2e8:	81 e0       	ldi	r24, 0x01	; 1
     2ea:	08 95       	ret
   } else if (LED_on(LED_0_PORT, LED_0_PIN) != LED_OK) {
      return APP_LED_ERROR;
     2ec:	81 e0       	ldi	r24, 0x01	; 1
      MOTOR_stop();
   }

   return APP_OK;

}
     2ee:	08 95       	ret

000002f0 <APP_moveLongSlide>:

EN_appError_t APP_moveLongSlide(void) {
   if (LED_off(LED_0_PORT, LED_0_PIN) != LED_OK) {
     2f0:	60 e0       	ldi	r22, 0x00	; 0
     2f2:	81 e4       	ldi	r24, 0x41	; 65
     2f4:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LED_off>
     2f8:	81 11       	cpse	r24, r1
     2fa:	20 c0       	rjmp	.+64     	; 0x33c <APP_moveLongSlide+0x4c>
      return APP_LED_ERROR;
   }
   i32_g_TimeMode_ovf = MOVE_3_SEC;
     2fc:	87 ec       	ldi	r24, 0xC7	; 199
     2fe:	9d e2       	ldi	r25, 0x2D	; 45
     300:	a0 e0       	ldi	r26, 0x00	; 0
     302:	b0 e0       	ldi	r27, 0x00	; 0
     304:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <i32_g_TimeMode_ovf>
     308:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <i32_g_TimeMode_ovf+0x1>
     30c:	a0 93 71 00 	sts	0x0071, r26	; 0x800071 <i32_g_TimeMode_ovf+0x2>
     310:	b0 93 72 00 	sts	0x0072, r27	; 0x800072 <i32_g_TimeMode_ovf+0x3>
   if (MOTOR_moveForward() != MOTOR_OK) {
     314:	0e 94 87 02 	call	0x50e	; 0x50e <MOTOR_moveForward>
     318:	81 11       	cpse	r24, r1
     31a:	12 c0       	rjmp	.+36     	; 0x340 <APP_moveLongSlide+0x50>
      return APP_MOTOR_ERROR;
   } else if (LED_on(LED_1_PORT, LED_1_PIN) != LED_OK) {
     31c:	62 e0       	ldi	r22, 0x02	; 2
     31e:	81 e4       	ldi	r24, 0x41	; 65
     320:	0e 94 58 02 	call	0x4b0	; 0x4b0 <LED_on>
     324:	81 11       	cpse	r24, r1
     326:	0e c0       	rjmp	.+28     	; 0x344 <APP_moveLongSlide+0x54>
      return APP_LED_ERROR;

   } else if (APP_pwmMode(_50_PER_OF_MAX_SPEED) != APP_OK) {
     328:	60 e0       	ldi	r22, 0x00	; 0
     32a:	70 e0       	ldi	r23, 0x00	; 0
     32c:	88 e4       	ldi	r24, 0x48	; 72
     32e:	92 e4       	ldi	r25, 0x42	; 66
     330:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <APP_pwmMode>
     334:	88 23       	and	r24, r24
     336:	39 f0       	breq	.+14     	; 0x346 <APP_moveLongSlide+0x56>
      return APP_ERROR_EXIT;
     338:	84 e0       	ldi	r24, 0x04	; 4
     33a:	08 95       	ret

}

EN_appError_t APP_moveLongSlide(void) {
   if (LED_off(LED_0_PORT, LED_0_PIN) != LED_OK) {
      return APP_LED_ERROR;
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	08 95       	ret
   }
   i32_g_TimeMode_ovf = MOVE_3_SEC;
   if (MOTOR_moveForward() != MOTOR_OK) {
      return APP_MOTOR_ERROR;
     340:	85 e0       	ldi	r24, 0x05	; 5
     342:	08 95       	ret
   } else if (LED_on(LED_1_PORT, LED_1_PIN) != LED_OK) {
      return APP_LED_ERROR;
     344:	81 e0       	ldi	r24, 0x01	; 1

   } else if (APP_pwmMode(_50_PER_OF_MAX_SPEED) != APP_OK) {
      return APP_ERROR_EXIT;
   }
   return APP_OK;
}
     346:	08 95       	ret

00000348 <APP_carInitialState>:

void APP_carInitialState(void) {
   i32_g_TimeMode_ovf = MOVE_1_SEC;
     348:	83 e4       	ldi	r24, 0x43	; 67
     34a:	9f e0       	ldi	r25, 0x0F	; 15
     34c:	a0 e0       	ldi	r26, 0x00	; 0
     34e:	b0 e0       	ldi	r27, 0x00	; 0
     350:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <i32_g_TimeMode_ovf>
     354:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <i32_g_TimeMode_ovf+0x1>
     358:	a0 93 71 00 	sts	0x0071, r26	; 0x800071 <i32_g_TimeMode_ovf+0x2>
     35c:	b0 93 72 00 	sts	0x0072, r27	; 0x800072 <i32_g_TimeMode_ovf+0x3>
   MOTOR_stop();
     360:	0e 94 d5 02 	call	0x5aa	; 0x5aa <MOTOR_stop>
     364:	08 95       	ret

00000366 <APP_rotateCar_90Deg>:
}

EN_appError_t APP_rotateCar_90Deg(void) {
   if (LED_off(LED_0_PORT, LED_0_PIN) != LED_OK) {
     366:	60 e0       	ldi	r22, 0x00	; 0
     368:	81 e4       	ldi	r24, 0x41	; 65
     36a:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LED_off>
     36e:	81 11       	cpse	r24, r1
     370:	20 c0       	rjmp	.+64     	; 0x3b2 <APP_rotateCar_90Deg+0x4c>
   wheel_circumference = MATH_PI * DISTANCE_BETWEEN_WHEELS;
   wheel_perimeter = MATH_PI * DIAMATER_OF_WHEEL;

   wheel_rotation = ((wheel_circumference) / (wheel_perimeter));
   rotation_time = ((wheel_rotation * QUARATER_CIRCLE) / (MAXIMUM_SPEED * WHEEL_APPROX)) * WHEEL_DEG;
   i32_g_TimeMode_ovf = rotation_time / WHEEL_TIME_FREQ;
     372:	88 e3       	ldi	r24, 0x38	; 56
     374:	99 e3       	ldi	r25, 0x39	; 57
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b0 e0       	ldi	r27, 0x00	; 0
     37a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <i32_g_TimeMode_ovf>
     37e:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <i32_g_TimeMode_ovf+0x1>
     382:	a0 93 71 00 	sts	0x0071, r26	; 0x800071 <i32_g_TimeMode_ovf+0x2>
     386:	b0 93 72 00 	sts	0x0072, r27	; 0x800072 <i32_g_TimeMode_ovf+0x3>

   if (MOTOR_rotate() != MOTOR_OK) {
     38a:	0e 94 ae 02 	call	0x55c	; 0x55c <MOTOR_rotate>
     38e:	81 11       	cpse	r24, r1
     390:	12 c0       	rjmp	.+36     	; 0x3b6 <APP_rotateCar_90Deg+0x50>
      return APP_MOTOR_ERROR;
   } else if (LED_on(LED_3_PORT, LED_3_PIN) != LED_OK) {
     392:	67 e0       	ldi	r22, 0x07	; 7
     394:	81 e4       	ldi	r24, 0x41	; 65
     396:	0e 94 58 02 	call	0x4b0	; 0x4b0 <LED_on>
     39a:	81 11       	cpse	r24, r1
     39c:	0e c0       	rjmp	.+28     	; 0x3ba <APP_rotateCar_90Deg+0x54>
      return APP_LED_ERROR;
   } else if (APP_pwmMode(_20_PER_OF_MAX_SPEED) != APP_OK) {
     39e:	60 e0       	ldi	r22, 0x00	; 0
     3a0:	70 e0       	ldi	r23, 0x00	; 0
     3a2:	80 ea       	ldi	r24, 0xA0	; 160
     3a4:	91 e4       	ldi	r25, 0x41	; 65
     3a6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <APP_pwmMode>
     3aa:	88 23       	and	r24, r24
     3ac:	39 f0       	breq	.+14     	; 0x3bc <APP_rotateCar_90Deg+0x56>
      return APP_ERROR_EXIT;
     3ae:	84 e0       	ldi	r24, 0x04	; 4
     3b0:	08 95       	ret
   MOTOR_stop();
}

EN_appError_t APP_rotateCar_90Deg(void) {
   if (LED_off(LED_0_PORT, LED_0_PIN) != LED_OK) {
      return APP_LED_ERROR;
     3b2:	81 e0       	ldi	r24, 0x01	; 1
     3b4:	08 95       	ret
   wheel_rotation = ((wheel_circumference) / (wheel_perimeter));
   rotation_time = ((wheel_rotation * QUARATER_CIRCLE) / (MAXIMUM_SPEED * WHEEL_APPROX)) * WHEEL_DEG;
   i32_g_TimeMode_ovf = rotation_time / WHEEL_TIME_FREQ;

   if (MOTOR_rotate() != MOTOR_OK) {
      return APP_MOTOR_ERROR;
     3b6:	85 e0       	ldi	r24, 0x05	; 5
     3b8:	08 95       	ret
   } else if (LED_on(LED_3_PORT, LED_3_PIN) != LED_OK) {
      return APP_LED_ERROR;
     3ba:	81 e0       	ldi	r24, 0x01	; 1
   } else if (APP_pwmMode(_20_PER_OF_MAX_SPEED) != APP_OK) {
      return APP_ERROR_EXIT;
   }
   return APP_OK;
}
     3bc:	08 95       	ret

000003be <APP_start>:
}

EN_appError_t APP_start(void) {

   while (INITIAL_VALUE_1) {
      if (u8_g_timerBtn_flag == CASE1) {
     3be:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <u8_g_timerBtn_flag>
     3c2:	81 30       	cpi	r24, 0x01	; 1
     3c4:	09 f0       	breq	.+2      	; 0x3c8 <APP_start+0xa>
     3c6:	47 c0       	rjmp	.+142    	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>

         if (LED_on(TIMER_PORT_CE, led_pin_tst) != LED_OK) {
     3c8:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <led_pin_tst>
     3cc:	82 e4       	ldi	r24, 0x42	; 66
     3ce:	0e 94 58 02 	call	0x4b0	; 0x4b0 <LED_on>
     3d2:	81 11       	cpse	r24, r1
     3d4:	4f c0       	rjmp	.+158    	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
            return APP_LED_ERROR;
         } else if (LED_off(TIMER_PORT_RST, TIMER_PIN_RST) != LED_OK) {
     3d6:	64 e0       	ldi	r22, 0x04	; 4
     3d8:	82 e4       	ldi	r24, 0x42	; 66
     3da:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LED_off>
     3de:	81 11       	cpse	r24, r1
     3e0:	4b c0       	rjmp	.+150    	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
            return APP_LED_ERROR;
         }

         switch (u8_g_currentCarState) {
     3e2:	e0 91 73 00 	lds	r30, 0x0073	; 0x800073 <u8_g_currentCarState>
     3e6:	8e 2f       	mov	r24, r30
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	89 30       	cpi	r24, 0x09	; 9
     3ec:	91 05       	cpc	r25, r1
     3ee:	38 f7       	brcc	.-50     	; 0x3be <APP_start>
     3f0:	fc 01       	movw	r30, r24
     3f2:	e6 5d       	subi	r30, 0xD6	; 214
     3f4:	ff 4f       	sbci	r31, 0xFF	; 255
     3f6:	0c 94 40 0a 	jmp	0x1480	; 0x1480 <__tablejump2__>
         case CASE0:
            APP_carInitialState();
     3fa:	0e 94 a4 01 	call	0x348	; 0x348 <APP_carInitialState>
            break;
     3fe:	df cf       	rjmp	.-66     	; 0x3be <APP_start>
         case CASE1:
            if (APP_moveLongSlide() != APP_OK) {
     400:	0e 94 78 01 	call	0x2f0	; 0x2f0 <APP_moveLongSlide>
     404:	88 23       	and	r24, r24
     406:	d9 f2       	breq	.-74     	; 0x3be <APP_start>
     408:	39 c0       	rjmp	.+114    	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
               return APP_ERROR_EXIT;
            }
            break;
         case CASE2:
            if (APP_carStop() != APP_OK) {
     40a:	0e 94 48 01 	call	0x290	; 0x290 <APP_carStop>
     40e:	88 23       	and	r24, r24
     410:	b1 f2       	breq	.-84     	; 0x3be <APP_start>
     412:	36 c0       	rjmp	.+108    	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
               return APP_ERROR_EXIT;
            }
            break;
         case CASE3:
            if (APP_rotateCar_90Deg() != APP_OK) {
     414:	0e 94 b3 01 	call	0x366	; 0x366 <APP_rotateCar_90Deg>
     418:	88 23       	and	r24, r24
     41a:	89 f2       	breq	.-94     	; 0x3be <APP_start>
     41c:	33 c0       	rjmp	.+102    	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
               return APP_ERROR_EXIT;
            }
            break;
         case CASE4:
            if (APP_carStop() != APP_OK) {
     41e:	0e 94 48 01 	call	0x290	; 0x290 <APP_carStop>
     422:	88 23       	and	r24, r24
     424:	61 f2       	breq	.-104    	; 0x3be <APP_start>
     426:	30 c0       	rjmp	.+96     	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
               return APP_ERROR_EXIT;
            }
            break;
         case CASE5:
            if (APP_moveShortSlide() != APP_OK) {
     428:	0e 94 1c 01 	call	0x238	; 0x238 <APP_moveShortSlide>
     42c:	88 23       	and	r24, r24
     42e:	39 f2       	breq	.-114    	; 0x3be <APP_start>
     430:	2d c0       	rjmp	.+90     	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
               return APP_ERROR_EXIT;

            }
            break;
         case CASE6:
            if (APP_carStop() != APP_OK) {
     432:	0e 94 48 01 	call	0x290	; 0x290 <APP_carStop>
     436:	88 23       	and	r24, r24
     438:	09 f4       	brne	.+2      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
     43a:	c1 cf       	rjmp	.-126    	; 0x3be <APP_start>
     43c:	29 c0       	rjmp	.+82     	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
               return APP_ERROR_EXIT;
            }
            break;
         case CASE7:
            if (APP_rotateCar_90Deg() != APP_OK) {
     43e:	0e 94 b3 01 	call	0x366	; 0x366 <APP_rotateCar_90Deg>
     442:	88 23       	and	r24, r24
     444:	09 f4       	brne	.+2      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
     446:	bb cf       	rjmp	.-138    	; 0x3be <APP_start>
     448:	25 c0       	rjmp	.+74     	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
               return APP_ERROR_EXIT;
            }
            break;
         case CASE8:
            if (APP_carStop() != APP_OK) {
     44a:	0e 94 48 01 	call	0x290	; 0x290 <APP_carStop>
     44e:	88 23       	and	r24, r24
     450:	09 f4       	brne	.+2      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
     452:	b5 cf       	rjmp	.-150    	; 0x3be <APP_start>
     454:	21 c0       	rjmp	.+66     	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
            // do nothing
            break;
         }
      } else {
         //reset timer
         if (LED_off(TIMER_PORT_CE, TIMER_PIN_CE) != LED_OK) {
     456:	63 e0       	ldi	r22, 0x03	; 3
     458:	82 e4       	ldi	r24, 0x42	; 66
     45a:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LED_off>
     45e:	81 11       	cpse	r24, r1
     460:	1d c0       	rjmp	.+58     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
            return APP_LED_ERROR;
         } else if (LED_on(TIMER_PORT_RST, TIMER_PIN_RST) != LED_OK) {
     462:	64 e0       	ldi	r22, 0x04	; 4
     464:	82 e4       	ldi	r24, 0x42	; 66
     466:	0e 94 58 02 	call	0x4b0	; 0x4b0 <LED_on>
     46a:	88 23       	and	r24, r24
     46c:	09 f4       	brne	.+2      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
     46e:	a7 cf       	rjmp	.-178    	; 0x3be <APP_start>
            return APP_LED_ERROR;
     470:	81 e0       	ldi	r24, 0x01	; 1
     472:	08 95       	ret

   while (INITIAL_VALUE_1) {
      if (u8_g_timerBtn_flag == CASE1) {

         if (LED_on(TIMER_PORT_CE, led_pin_tst) != LED_OK) {
            return APP_LED_ERROR;
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	08 95       	ret
         } else if (LED_off(TIMER_PORT_RST, TIMER_PIN_RST) != LED_OK) {
            return APP_LED_ERROR;
     478:	81 e0       	ldi	r24, 0x01	; 1
     47a:	08 95       	ret
         case CASE0:
            APP_carInitialState();
            break;
         case CASE1:
            if (APP_moveLongSlide() != APP_OK) {
               return APP_ERROR_EXIT;
     47c:	84 e0       	ldi	r24, 0x04	; 4
     47e:	08 95       	ret
            }
            break;
         case CASE2:
            if (APP_carStop() != APP_OK) {
               return APP_ERROR_EXIT;
     480:	84 e0       	ldi	r24, 0x04	; 4
     482:	08 95       	ret
            }
            break;
         case CASE3:
            if (APP_rotateCar_90Deg() != APP_OK) {
               return APP_ERROR_EXIT;
     484:	84 e0       	ldi	r24, 0x04	; 4
     486:	08 95       	ret
            }
            break;
         case CASE4:
            if (APP_carStop() != APP_OK) {
               return APP_ERROR_EXIT;
     488:	84 e0       	ldi	r24, 0x04	; 4
     48a:	08 95       	ret
            }
            break;
         case CASE5:
            if (APP_moveShortSlide() != APP_OK) {
               return APP_ERROR_EXIT;
     48c:	84 e0       	ldi	r24, 0x04	; 4
     48e:	08 95       	ret

            }
            break;
         case CASE6:
            if (APP_carStop() != APP_OK) {
               return APP_ERROR_EXIT;
     490:	84 e0       	ldi	r24, 0x04	; 4
     492:	08 95       	ret
            }
            break;
         case CASE7:
            if (APP_rotateCar_90Deg() != APP_OK) {
               return APP_ERROR_EXIT;
     494:	84 e0       	ldi	r24, 0x04	; 4
     496:	08 95       	ret
            }
            break;
         case CASE8:
            if (APP_carStop() != APP_OK) {
               return APP_ERROR_EXIT;
     498:	84 e0       	ldi	r24, 0x04	; 4
     49a:	08 95       	ret
            break;
         }
      } else {
         //reset timer
         if (LED_off(TIMER_PORT_CE, TIMER_PIN_CE) != LED_OK) {
            return APP_LED_ERROR;
     49c:	81 e0       	ldi	r24, 0x01	; 1

      }
   }
   return APP_OK;

}
     49e:	08 95       	ret

000004a0 <BUTTON_init>:
 */

#include "button.h"

EN_btnError_t BUTTON_init(uint8_t u8_a_buttonPort, uint8_t u8_a_buttonPin) {
   return (DIO_init(u8_a_buttonPort, u8_a_buttonPin, IN));
     4a0:	40 e0       	ldi	r20, 0x00	; 0
     4a2:	0e 94 63 03 	call	0x6c6	; 0x6c6 <DIO_init>

}
     4a6:	08 95       	ret

000004a8 <LED_init>:
 */

#include "led.h"

EN_ledError_t LED_init(uint8_t u8_a_ledPort, uint8_t u8_a_ledPin) {
   return (DIO_init(u8_a_ledPort, u8_a_ledPin, OUT));
     4a8:	41 e0       	ldi	r20, 0x01	; 1
     4aa:	0e 94 63 03 	call	0x6c6	; 0x6c6 <DIO_init>
}
     4ae:	08 95       	ret

000004b0 <LED_on>:

EN_ledError_t LED_on(uint8_t u8_a_ledPort, uint8_t u8_a_ledPin) {
   return (DIO_write(u8_a_ledPort, u8_a_ledPin, HIGH));
     4b0:	41 e0       	ldi	r20, 0x01	; 1
     4b2:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_write>
}
     4b6:	08 95       	ret

000004b8 <LED_off>:

EN_ledError_t LED_off(uint8_t u8_a_ledPort, uint8_t u8_a_ledPin) {
   return (DIO_write(u8_a_ledPort, u8_a_ledPin, LOW));
     4b8:	40 e0       	ldi	r20, 0x00	; 0
     4ba:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_write>
}
     4be:	08 95       	ret

000004c0 <MOTOR_init>:
#include "motor.h"

uint8_t u8_g_motorTest = MOTOR_PIN0;

EN_motorError_t MOTOR_init(void) {
   if (DIO_init(MOTOR_PORT0, u8_g_motorTest, OUT) != DIO_OK) {
     4c0:	41 e0       	ldi	r20, 0x01	; 1
     4c2:	60 91 63 00 	lds	r22, 0x0063	; 0x800063 <u8_g_motorTest>
     4c6:	83 e4       	ldi	r24, 0x43	; 67
     4c8:	0e 94 63 03 	call	0x6c6	; 0x6c6 <DIO_init>
     4cc:	81 11       	cpse	r24, r1
     4ce:	17 c0       	rjmp	.+46     	; 0x4fe <MOTOR_init+0x3e>
      return MOTOR_INVALID_INIT;

   } else if (DIO_init(MOTOR_PORT1, MOTOR_PIN1, OUT) != DIO_OK) {
     4d0:	41 e0       	ldi	r20, 0x01	; 1
     4d2:	61 e0       	ldi	r22, 0x01	; 1
     4d4:	83 e4       	ldi	r24, 0x43	; 67
     4d6:	0e 94 63 03 	call	0x6c6	; 0x6c6 <DIO_init>
     4da:	81 11       	cpse	r24, r1
     4dc:	12 c0       	rjmp	.+36     	; 0x502 <MOTOR_init+0x42>
      return MOTOR_INVALID_INIT;
   } else if (DIO_init(MOTOR_PORT2, MOTOR_PIN2, OUT) != DIO_OK) {
     4de:	41 e0       	ldi	r20, 0x01	; 1
     4e0:	62 e0       	ldi	r22, 0x02	; 2
     4e2:	83 e4       	ldi	r24, 0x43	; 67
     4e4:	0e 94 63 03 	call	0x6c6	; 0x6c6 <DIO_init>
     4e8:	81 11       	cpse	r24, r1
     4ea:	0d c0       	rjmp	.+26     	; 0x506 <MOTOR_init+0x46>
      return MOTOR_INVALID_INIT;
   } else if (DIO_init(MOTOR_PORT3, MOTOR_PIN3, OUT) != DIO_OK) {
     4ec:	41 e0       	ldi	r20, 0x01	; 1
     4ee:	63 e0       	ldi	r22, 0x03	; 3
     4f0:	83 e4       	ldi	r24, 0x43	; 67
     4f2:	0e 94 63 03 	call	0x6c6	; 0x6c6 <DIO_init>
     4f6:	88 23       	and	r24, r24
     4f8:	41 f0       	breq	.+16     	; 0x50a <MOTOR_init+0x4a>
      return MOTOR_INVALID_INIT;
     4fa:	81 e0       	ldi	r24, 0x01	; 1
     4fc:	08 95       	ret

uint8_t u8_g_motorTest = MOTOR_PIN0;

EN_motorError_t MOTOR_init(void) {
   if (DIO_init(MOTOR_PORT0, u8_g_motorTest, OUT) != DIO_OK) {
      return MOTOR_INVALID_INIT;
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	08 95       	ret

   } else if (DIO_init(MOTOR_PORT1, MOTOR_PIN1, OUT) != DIO_OK) {
      return MOTOR_INVALID_INIT;
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	08 95       	ret
   } else if (DIO_init(MOTOR_PORT2, MOTOR_PIN2, OUT) != DIO_OK) {
      return MOTOR_INVALID_INIT;
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	08 95       	ret
   } else if (DIO_init(MOTOR_PORT3, MOTOR_PIN3, OUT) != DIO_OK) {
      return MOTOR_INVALID_INIT;

   } else {
      return MOTOR_OK;
     50a:	80 e0       	ldi	r24, 0x00	; 0
   }

}
     50c:	08 95       	ret

0000050e <MOTOR_moveForward>:

EN_motorError_t MOTOR_moveForward(void) {

   if (DIO_write(MOTOR_PORT0, u8_g_motorTest, LOW) != DIO_OK) {
     50e:	40 e0       	ldi	r20, 0x00	; 0
     510:	60 91 63 00 	lds	r22, 0x0063	; 0x800063 <u8_g_motorTest>
     514:	83 e4       	ldi	r24, 0x43	; 67
     516:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_write>
     51a:	81 11       	cpse	r24, r1
     51c:	17 c0       	rjmp	.+46     	; 0x54c <MOTOR_moveForward+0x3e>
      return MOTOR_INVALID_MOVEFWD;

   } else if (DIO_write(MOTOR_PORT1, MOTOR_PIN1, HIGH) != DIO_OK) {
     51e:	41 e0       	ldi	r20, 0x01	; 1
     520:	61 e0       	ldi	r22, 0x01	; 1
     522:	83 e4       	ldi	r24, 0x43	; 67
     524:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_write>
     528:	81 11       	cpse	r24, r1
     52a:	12 c0       	rjmp	.+36     	; 0x550 <MOTOR_moveForward+0x42>
      return MOTOR_INVALID_MOVEFWD;
   } else if (DIO_write(MOTOR_PORT2, MOTOR_PIN2, LOW) != DIO_OK) {
     52c:	40 e0       	ldi	r20, 0x00	; 0
     52e:	62 e0       	ldi	r22, 0x02	; 2
     530:	83 e4       	ldi	r24, 0x43	; 67
     532:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_write>
     536:	81 11       	cpse	r24, r1
     538:	0d c0       	rjmp	.+26     	; 0x554 <MOTOR_moveForward+0x46>
      return MOTOR_INVALID_MOVEFWD;
   } else if (DIO_write(MOTOR_PORT3, MOTOR_PIN3, HIGH) != DIO_OK) {
     53a:	41 e0       	ldi	r20, 0x01	; 1
     53c:	63 e0       	ldi	r22, 0x03	; 3
     53e:	83 e4       	ldi	r24, 0x43	; 67
     540:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_write>
     544:	88 23       	and	r24, r24
     546:	41 f0       	breq	.+16     	; 0x558 <MOTOR_moveForward+0x4a>
      return MOTOR_INVALID_MOVEFWD;
     548:	82 e0       	ldi	r24, 0x02	; 2
     54a:	08 95       	ret
}

EN_motorError_t MOTOR_moveForward(void) {

   if (DIO_write(MOTOR_PORT0, u8_g_motorTest, LOW) != DIO_OK) {
      return MOTOR_INVALID_MOVEFWD;
     54c:	82 e0       	ldi	r24, 0x02	; 2
     54e:	08 95       	ret

   } else if (DIO_write(MOTOR_PORT1, MOTOR_PIN1, HIGH) != DIO_OK) {
      return MOTOR_INVALID_MOVEFWD;
     550:	82 e0       	ldi	r24, 0x02	; 2
     552:	08 95       	ret
   } else if (DIO_write(MOTOR_PORT2, MOTOR_PIN2, LOW) != DIO_OK) {
      return MOTOR_INVALID_MOVEFWD;
     554:	82 e0       	ldi	r24, 0x02	; 2
     556:	08 95       	ret
   } else if (DIO_write(MOTOR_PORT3, MOTOR_PIN3, HIGH) != DIO_OK) {
      return MOTOR_INVALID_MOVEFWD;

   } else {
      return MOTOR_OK;
     558:	80 e0       	ldi	r24, 0x00	; 0
   }

}
     55a:	08 95       	ret

0000055c <MOTOR_rotate>:

EN_motorError_t MOTOR_rotate(void) {

   if (DIO_write(MOTOR_PORT0, u8_g_motorTest, HIGH) != DIO_OK) {
     55c:	41 e0       	ldi	r20, 0x01	; 1
     55e:	60 91 63 00 	lds	r22, 0x0063	; 0x800063 <u8_g_motorTest>
     562:	83 e4       	ldi	r24, 0x43	; 67
     564:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_write>
     568:	81 11       	cpse	r24, r1
     56a:	17 c0       	rjmp	.+46     	; 0x59a <MOTOR_rotate+0x3e>
      return MOTOR_INVALID_ROTATE;

   } else if (DIO_write(MOTOR_PORT1, MOTOR_PIN1, LOW) != DIO_OK) {
     56c:	40 e0       	ldi	r20, 0x00	; 0
     56e:	61 e0       	ldi	r22, 0x01	; 1
     570:	83 e4       	ldi	r24, 0x43	; 67
     572:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_write>
     576:	81 11       	cpse	r24, r1
     578:	12 c0       	rjmp	.+36     	; 0x59e <MOTOR_rotate+0x42>
      return MOTOR_INVALID_ROTATE;
   } else if (DIO_write(MOTOR_PORT2, MOTOR_PIN2, LOW) != DIO_OK) {
     57a:	40 e0       	ldi	r20, 0x00	; 0
     57c:	62 e0       	ldi	r22, 0x02	; 2
     57e:	83 e4       	ldi	r24, 0x43	; 67
     580:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_write>
     584:	81 11       	cpse	r24, r1
     586:	0d c0       	rjmp	.+26     	; 0x5a2 <MOTOR_rotate+0x46>
      return MOTOR_INVALID_ROTATE;
   } else if (DIO_write(MOTOR_PORT3, MOTOR_PIN3, HIGH) != DIO_OK) {
     588:	41 e0       	ldi	r20, 0x01	; 1
     58a:	63 e0       	ldi	r22, 0x03	; 3
     58c:	83 e4       	ldi	r24, 0x43	; 67
     58e:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_write>
     592:	88 23       	and	r24, r24
     594:	41 f0       	breq	.+16     	; 0x5a6 <MOTOR_rotate+0x4a>
      return MOTOR_INVALID_ROTATE;
     596:	83 e0       	ldi	r24, 0x03	; 3
     598:	08 95       	ret
}

EN_motorError_t MOTOR_rotate(void) {

   if (DIO_write(MOTOR_PORT0, u8_g_motorTest, HIGH) != DIO_OK) {
      return MOTOR_INVALID_ROTATE;
     59a:	83 e0       	ldi	r24, 0x03	; 3
     59c:	08 95       	ret

   } else if (DIO_write(MOTOR_PORT1, MOTOR_PIN1, LOW) != DIO_OK) {
      return MOTOR_INVALID_ROTATE;
     59e:	83 e0       	ldi	r24, 0x03	; 3
     5a0:	08 95       	ret
   } else if (DIO_write(MOTOR_PORT2, MOTOR_PIN2, LOW) != DIO_OK) {
      return MOTOR_INVALID_ROTATE;
     5a2:	83 e0       	ldi	r24, 0x03	; 3
     5a4:	08 95       	ret
   } else if (DIO_write(MOTOR_PORT3, MOTOR_PIN3, HIGH) != DIO_OK) {
      return MOTOR_INVALID_ROTATE;

   } else {
      return MOTOR_OK;
     5a6:	80 e0       	ldi	r24, 0x00	; 0
   }

}
     5a8:	08 95       	ret

000005aa <MOTOR_stop>:

void MOTOR_stop(void) {
   DIO_write(MOTOR_PORT0, MOTOR_PIN0, LOW);
     5aa:	40 e0       	ldi	r20, 0x00	; 0
     5ac:	60 e0       	ldi	r22, 0x00	; 0
     5ae:	83 e4       	ldi	r24, 0x43	; 67
     5b0:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_write>
   DIO_write(MOTOR_PORT1, MOTOR_PIN1, LOW);
     5b4:	40 e0       	ldi	r20, 0x00	; 0
     5b6:	61 e0       	ldi	r22, 0x01	; 1
     5b8:	83 e4       	ldi	r24, 0x43	; 67
     5ba:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_write>
   DIO_write(MOTOR_PORT2, MOTOR_PIN2, LOW);
     5be:	40 e0       	ldi	r20, 0x00	; 0
     5c0:	62 e0       	ldi	r22, 0x02	; 2
     5c2:	83 e4       	ldi	r24, 0x43	; 67
     5c4:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_write>
   DIO_write(MOTOR_PORT3, MOTOR_PIN3, LOW);
     5c8:	40 e0       	ldi	r20, 0x00	; 0
     5ca:	63 e0       	ldi	r22, 0x03	; 3
     5cc:	83 e4       	ldi	r24, 0x43	; 67
     5ce:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_write>
     5d2:	08 95       	ret

000005d4 <main>:

#include "./APP/application.h"

int main(void)
{
    APP_init();
     5d4:	0e 94 52 00 	call	0xa4	; 0xa4 <APP_init>
	//while(1){
	APP_start();
     5d8:	0e 94 df 01 	call	0x3be	; 0x3be <APP_start>
	//}
}
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	08 95       	ret

000005e2 <DIO_clearBit>:
// function definitions
#include "dio.h"


void DIO_clearBit(uint8_t u8_a_portNumber, uint8_t u8_a_pinNumber) {
   switch (u8_a_portNumber) {
     5e2:	82 34       	cpi	r24, 0x42	; 66
     5e4:	a9 f0       	breq	.+42     	; 0x610 <DIO_clearBit+0x2e>
     5e6:	18 f4       	brcc	.+6      	; 0x5ee <DIO_clearBit+0xc>
     5e8:	81 34       	cpi	r24, 0x41	; 65
     5ea:	31 f0       	breq	.+12     	; 0x5f8 <DIO_clearBit+0x16>
     5ec:	08 95       	ret
     5ee:	83 34       	cpi	r24, 0x43	; 67
     5f0:	d9 f0       	breq	.+54     	; 0x628 <DIO_clearBit+0x46>
     5f2:	84 34       	cpi	r24, 0x44	; 68
     5f4:	29 f1       	breq	.+74     	; 0x640 <DIO_clearBit+0x5e>
     5f6:	08 95       	ret
   case PORT_A: {
      DDRA &= ~(INITIAL_VALUE_1 << u8_a_pinNumber);
     5f8:	2a b3       	in	r18, 0x1a	; 26
     5fa:	81 e0       	ldi	r24, 0x01	; 1
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	02 c0       	rjmp	.+4      	; 0x604 <DIO_clearBit+0x22>
     600:	88 0f       	add	r24, r24
     602:	99 1f       	adc	r25, r25
     604:	6a 95       	dec	r22
     606:	e2 f7       	brpl	.-8      	; 0x600 <DIO_clearBit+0x1e>
     608:	80 95       	com	r24
     60a:	82 23       	and	r24, r18
     60c:	8a bb       	out	0x1a, r24	; 26
      break;
     60e:	08 95       	ret
   }

   case PORT_B: {
      DDRB &= ~(INITIAL_VALUE_1 << u8_a_pinNumber);
     610:	27 b3       	in	r18, 0x17	; 23
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	02 c0       	rjmp	.+4      	; 0x61c <DIO_clearBit+0x3a>
     618:	88 0f       	add	r24, r24
     61a:	99 1f       	adc	r25, r25
     61c:	6a 95       	dec	r22
     61e:	e2 f7       	brpl	.-8      	; 0x618 <DIO_clearBit+0x36>
     620:	80 95       	com	r24
     622:	82 23       	and	r24, r18
     624:	87 bb       	out	0x17, r24	; 23
      break;
     626:	08 95       	ret
   }
   case PORT_C: {
      DDRC &= ~(INITIAL_VALUE_1 << u8_a_pinNumber);
     628:	24 b3       	in	r18, 0x14	; 20
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	02 c0       	rjmp	.+4      	; 0x634 <DIO_clearBit+0x52>
     630:	88 0f       	add	r24, r24
     632:	99 1f       	adc	r25, r25
     634:	6a 95       	dec	r22
     636:	e2 f7       	brpl	.-8      	; 0x630 <DIO_clearBit+0x4e>
     638:	80 95       	com	r24
     63a:	82 23       	and	r24, r18
     63c:	84 bb       	out	0x14, r24	; 20
      break;
     63e:	08 95       	ret
   }
   case PORT_D: {
      DDRD &= ~(INITIAL_VALUE_1 << u8_a_pinNumber);
     640:	21 b3       	in	r18, 0x11	; 17
     642:	81 e0       	ldi	r24, 0x01	; 1
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	02 c0       	rjmp	.+4      	; 0x64c <DIO_clearBit+0x6a>
     648:	88 0f       	add	r24, r24
     64a:	99 1f       	adc	r25, r25
     64c:	6a 95       	dec	r22
     64e:	e2 f7       	brpl	.-8      	; 0x648 <DIO_clearBit+0x66>
     650:	80 95       	com	r24
     652:	82 23       	and	r24, r18
     654:	81 bb       	out	0x11, r24	; 17
     656:	08 95       	ret

00000658 <DIO_setBit>:
      break;
   }
   }
}
void DIO_setBit(uint8_t u8_a_portNumber, uint8_t u8_a_pinNumber) {
   switch (u8_a_portNumber) {
     658:	82 34       	cpi	r24, 0x42	; 66
     65a:	a1 f0       	breq	.+40     	; 0x684 <DIO_setBit+0x2c>
     65c:	18 f4       	brcc	.+6      	; 0x664 <DIO_setBit+0xc>
     65e:	81 34       	cpi	r24, 0x41	; 65
     660:	31 f0       	breq	.+12     	; 0x66e <DIO_setBit+0x16>
     662:	08 95       	ret
     664:	83 34       	cpi	r24, 0x43	; 67
     666:	c9 f0       	breq	.+50     	; 0x69a <DIO_setBit+0x42>
     668:	84 34       	cpi	r24, 0x44	; 68
     66a:	11 f1       	breq	.+68     	; 0x6b0 <DIO_setBit+0x58>
     66c:	08 95       	ret
   case PORT_A: {
      DDRA |= (INITIAL_VALUE_1 << u8_a_pinNumber);
     66e:	2a b3       	in	r18, 0x1a	; 26
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	02 c0       	rjmp	.+4      	; 0x67a <DIO_setBit+0x22>
     676:	88 0f       	add	r24, r24
     678:	99 1f       	adc	r25, r25
     67a:	6a 95       	dec	r22
     67c:	e2 f7       	brpl	.-8      	; 0x676 <DIO_setBit+0x1e>
     67e:	82 2b       	or	r24, r18
     680:	8a bb       	out	0x1a, r24	; 26
      break;
     682:	08 95       	ret
   }

   case PORT_B: {
      DDRB |= (INITIAL_VALUE_1 << u8_a_pinNumber);
     684:	27 b3       	in	r18, 0x17	; 23
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	02 c0       	rjmp	.+4      	; 0x690 <DIO_setBit+0x38>
     68c:	88 0f       	add	r24, r24
     68e:	99 1f       	adc	r25, r25
     690:	6a 95       	dec	r22
     692:	e2 f7       	brpl	.-8      	; 0x68c <DIO_setBit+0x34>
     694:	82 2b       	or	r24, r18
     696:	87 bb       	out	0x17, r24	; 23
      break;
     698:	08 95       	ret
   }
   case PORT_C: {
      DDRC |= (INITIAL_VALUE_1 << u8_a_pinNumber);
     69a:	24 b3       	in	r18, 0x14	; 20
     69c:	81 e0       	ldi	r24, 0x01	; 1
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <DIO_setBit+0x4e>
     6a2:	88 0f       	add	r24, r24
     6a4:	99 1f       	adc	r25, r25
     6a6:	6a 95       	dec	r22
     6a8:	e2 f7       	brpl	.-8      	; 0x6a2 <DIO_setBit+0x4a>
     6aa:	82 2b       	or	r24, r18
     6ac:	84 bb       	out	0x14, r24	; 20
      break;
     6ae:	08 95       	ret
   }
   case PORT_D: {
      DDRD |= (INITIAL_VALUE_1 << u8_a_pinNumber);
     6b0:	21 b3       	in	r18, 0x11	; 17
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	02 c0       	rjmp	.+4      	; 0x6bc <DIO_setBit+0x64>
     6b8:	88 0f       	add	r24, r24
     6ba:	99 1f       	adc	r25, r25
     6bc:	6a 95       	dec	r22
     6be:	e2 f7       	brpl	.-8      	; 0x6b8 <DIO_setBit+0x60>
     6c0:	82 2b       	or	r24, r18
     6c2:	81 bb       	out	0x11, r24	; 17
     6c4:	08 95       	ret

000006c6 <DIO_init>:
   }
   }
}

EN_dioError_t DIO_init(uint8_t u8_a_portNumber, uint8_t u8_a_pinNumber, uint8_t u8_a_direction) {
   if (u8_a_pinNumber > MAX_PORTS || u8_a_pinNumber < MIN_PORTS) {
     6c6:	68 30       	cpi	r22, 0x08	; 8
     6c8:	08 f0       	brcs	.+2      	; 0x6cc <DIO_init+0x6>
     6ca:	6e c0       	rjmp	.+220    	; 0x7a8 <DIO_init+0xe2>
      return DIO_INVALID_PIN;
   }

   switch (u8_a_portNumber) {
     6cc:	82 34       	cpi	r24, 0x42	; 66
     6ce:	19 f1       	breq	.+70     	; 0x716 <DIO_init+0x50>
     6d0:	18 f4       	brcc	.+6      	; 0x6d8 <DIO_init+0x12>
     6d2:	81 34       	cpi	r24, 0x41	; 65
     6d4:	39 f0       	breq	.+14     	; 0x6e4 <DIO_init+0x1e>
     6d6:	6a c0       	rjmp	.+212    	; 0x7ac <DIO_init+0xe6>
     6d8:	83 34       	cpi	r24, 0x43	; 67
     6da:	b1 f1       	breq	.+108    	; 0x748 <DIO_init+0x82>
     6dc:	84 34       	cpi	r24, 0x44	; 68
     6de:	09 f4       	brne	.+2      	; 0x6e2 <DIO_init+0x1c>
     6e0:	4b c0       	rjmp	.+150    	; 0x778 <DIO_init+0xb2>
     6e2:	64 c0       	rjmp	.+200    	; 0x7ac <DIO_init+0xe6>
   case PORT_A: {
      if (u8_a_direction == IN) {
     6e4:	41 11       	cpse	r20, r1
     6e6:	04 c0       	rjmp	.+8      	; 0x6f0 <DIO_init+0x2a>
         DIO_clearBit(u8_a_portNumber, u8_a_pinNumber);
     6e8:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <DIO_clearBit>
         return DIO_OK;
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	08 95       	ret
      } else if (u8_a_direction == OUT) {
     6f0:	41 30       	cpi	r20, 0x01	; 1
     6f2:	09 f0       	breq	.+2      	; 0x6f6 <DIO_init+0x30>
     6f4:	5d c0       	rjmp	.+186    	; 0x7b0 <DIO_init+0xea>
         CLEAR_BIT(PORTA, u8_a_pinNumber);
     6f6:	9b b3       	in	r25, 0x1b	; 27
     6f8:	21 e0       	ldi	r18, 0x01	; 1
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	06 2e       	mov	r0, r22
     6fe:	02 c0       	rjmp	.+4      	; 0x704 <DIO_init+0x3e>
     700:	22 0f       	add	r18, r18
     702:	33 1f       	adc	r19, r19
     704:	0a 94       	dec	r0
     706:	e2 f7       	brpl	.-8      	; 0x700 <DIO_init+0x3a>
     708:	20 95       	com	r18
     70a:	29 23       	and	r18, r25
     70c:	2b bb       	out	0x1b, r18	; 27
         DIO_setBit(u8_a_portNumber, u8_a_pinNumber);
     70e:	0e 94 2c 03 	call	0x658	; 0x658 <DIO_setBit>
         return DIO_OK;
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	08 95       	ret
      }
      break;
   }

   case PORT_B: {
      if (u8_a_direction == IN) {
     716:	41 11       	cpse	r20, r1
     718:	04 c0       	rjmp	.+8      	; 0x722 <DIO_init+0x5c>
         DIO_clearBit(u8_a_portNumber, u8_a_pinNumber);
     71a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <DIO_clearBit>
         return DIO_OK;
     71e:	80 e0       	ldi	r24, 0x00	; 0
     720:	08 95       	ret

      } else if (u8_a_direction == OUT) {
     722:	41 30       	cpi	r20, 0x01	; 1
     724:	09 f0       	breq	.+2      	; 0x728 <DIO_init+0x62>
     726:	46 c0       	rjmp	.+140    	; 0x7b4 <DIO_init+0xee>
         CLEAR_BIT(PORTB, u8_a_pinNumber);
     728:	98 b3       	in	r25, 0x18	; 24
     72a:	21 e0       	ldi	r18, 0x01	; 1
     72c:	30 e0       	ldi	r19, 0x00	; 0
     72e:	06 2e       	mov	r0, r22
     730:	02 c0       	rjmp	.+4      	; 0x736 <DIO_init+0x70>
     732:	22 0f       	add	r18, r18
     734:	33 1f       	adc	r19, r19
     736:	0a 94       	dec	r0
     738:	e2 f7       	brpl	.-8      	; 0x732 <DIO_init+0x6c>
     73a:	20 95       	com	r18
     73c:	29 23       	and	r18, r25
     73e:	28 bb       	out	0x18, r18	; 24
         DIO_setBit(u8_a_portNumber, u8_a_pinNumber);
     740:	0e 94 2c 03 	call	0x658	; 0x658 <DIO_setBit>
         return DIO_OK;
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	08 95       	ret
      }
      break;
   }

   case PORT_C: {
      if (u8_a_direction == IN) {
     748:	41 11       	cpse	r20, r1
     74a:	04 c0       	rjmp	.+8      	; 0x754 <DIO_init+0x8e>
         DIO_clearBit(u8_a_portNumber, u8_a_pinNumber);
     74c:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <DIO_clearBit>
         return DIO_OK;
     750:	80 e0       	ldi	r24, 0x00	; 0
     752:	08 95       	ret

      } else if (u8_a_direction == OUT) {
     754:	41 30       	cpi	r20, 0x01	; 1
     756:	81 f5       	brne	.+96     	; 0x7b8 <DIO_init+0xf2>
         CLEAR_BIT(PORTC, u8_a_pinNumber);
     758:	95 b3       	in	r25, 0x15	; 21
     75a:	21 e0       	ldi	r18, 0x01	; 1
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	06 2e       	mov	r0, r22
     760:	02 c0       	rjmp	.+4      	; 0x766 <DIO_init+0xa0>
     762:	22 0f       	add	r18, r18
     764:	33 1f       	adc	r19, r19
     766:	0a 94       	dec	r0
     768:	e2 f7       	brpl	.-8      	; 0x762 <DIO_init+0x9c>
     76a:	20 95       	com	r18
     76c:	29 23       	and	r18, r25
     76e:	25 bb       	out	0x15, r18	; 21
         DIO_setBit(u8_a_portNumber, u8_a_pinNumber);
     770:	0e 94 2c 03 	call	0x658	; 0x658 <DIO_setBit>
         return DIO_OK;
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	08 95       	ret
      }
      break;
   }

   case PORT_D: {
      if (u8_a_direction == IN) {
     778:	41 11       	cpse	r20, r1
     77a:	04 c0       	rjmp	.+8      	; 0x784 <DIO_init+0xbe>
         DIO_clearBit(u8_a_portNumber, u8_a_pinNumber);
     77c:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <DIO_clearBit>
         return DIO_OK;
     780:	80 e0       	ldi	r24, 0x00	; 0
     782:	08 95       	ret
      } else if (u8_a_direction == OUT) {
     784:	41 30       	cpi	r20, 0x01	; 1
     786:	d1 f4       	brne	.+52     	; 0x7bc <DIO_init+0xf6>
         CLEAR_BIT(PORTD, u8_a_pinNumber);
     788:	92 b3       	in	r25, 0x12	; 18
     78a:	21 e0       	ldi	r18, 0x01	; 1
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	06 2e       	mov	r0, r22
     790:	02 c0       	rjmp	.+4      	; 0x796 <DIO_init+0xd0>
     792:	22 0f       	add	r18, r18
     794:	33 1f       	adc	r19, r19
     796:	0a 94       	dec	r0
     798:	e2 f7       	brpl	.-8      	; 0x792 <DIO_init+0xcc>
     79a:	20 95       	com	r18
     79c:	29 23       	and	r18, r25
     79e:	22 bb       	out	0x12, r18	; 18
         DIO_setBit(u8_a_portNumber, u8_a_pinNumber);
     7a0:	0e 94 2c 03 	call	0x658	; 0x658 <DIO_setBit>
         return DIO_OK;
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	08 95       	ret
   }
}

EN_dioError_t DIO_init(uint8_t u8_a_portNumber, uint8_t u8_a_pinNumber, uint8_t u8_a_direction) {
   if (u8_a_pinNumber > MAX_PORTS || u8_a_pinNumber < MIN_PORTS) {
      return DIO_INVALID_PIN;
     7a8:	82 e0       	ldi	r24, 0x02	; 2
     7aa:	08 95       	ret
         return DIO_INVALID_INIT;
      }
      break;
   }
   default: {
      return DIO_INVALID_PORT;
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	08 95       	ret
      } else if (u8_a_direction == OUT) {
         CLEAR_BIT(PORTA, u8_a_pinNumber);
         DIO_setBit(u8_a_portNumber, u8_a_pinNumber);
         return DIO_OK;
      } else {
         return DIO_INVALID_INIT;
     7b0:	83 e0       	ldi	r24, 0x03	; 3
     7b2:	08 95       	ret
         CLEAR_BIT(PORTB, u8_a_pinNumber);
         DIO_setBit(u8_a_portNumber, u8_a_pinNumber);
         return DIO_OK;

      } else {
         return DIO_INVALID_INIT;
     7b4:	83 e0       	ldi	r24, 0x03	; 3
     7b6:	08 95       	ret
         CLEAR_BIT(PORTC, u8_a_pinNumber);
         DIO_setBit(u8_a_portNumber, u8_a_pinNumber);
         return DIO_OK;

      } else {
         return DIO_INVALID_INIT;
     7b8:	83 e0       	ldi	r24, 0x03	; 3
     7ba:	08 95       	ret
      } else if (u8_a_direction == OUT) {
         CLEAR_BIT(PORTD, u8_a_pinNumber);
         DIO_setBit(u8_a_portNumber, u8_a_pinNumber);
         return DIO_OK;
      } else {
         return DIO_INVALID_INIT;
     7bc:	83 e0       	ldi	r24, 0x03	; 3
      return DIO_INVALID_PORT;
   }
   }
   return DIO_INVALID_PORT;

}
     7be:	08 95       	ret

000007c0 <DIO_write>:

EN_dioError_t DIO_write(uint8_t u8_a_portNumber, uint8_t u8_a_pinNumber, uint8_t u8_a_value) {
   if (u8_a_pinNumber > MAX_PORTS || u8_a_pinNumber < MIN_PORTS) {
     7c0:	68 30       	cpi	r22, 0x08	; 8
     7c2:	08 f0       	brcs	.+2      	; 0x7c6 <DIO_write+0x6>
     7c4:	83 c0       	rjmp	.+262    	; 0x8cc <__stack+0x6d>
      return DIO_INVALID_PIN;

   }
   switch (u8_a_portNumber) {
     7c6:	82 34       	cpi	r24, 0x42	; 66
     7c8:	49 f1       	breq	.+82     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     7ca:	18 f4       	brcc	.+6      	; 0x7d2 <DIO_write+0x12>
     7cc:	81 34       	cpi	r24, 0x41	; 65
     7ce:	41 f0       	breq	.+16     	; 0x7e0 <DIO_write+0x20>
     7d0:	7f c0       	rjmp	.+254    	; 0x8d0 <__stack+0x71>
     7d2:	83 34       	cpi	r24, 0x43	; 67
     7d4:	09 f4       	brne	.+2      	; 0x7d8 <DIO_write+0x18>
     7d6:	40 c0       	rjmp	.+128    	; 0x858 <__DATA_REGION_LENGTH__+0x58>
     7d8:	84 34       	cpi	r24, 0x44	; 68
     7da:	09 f4       	brne	.+2      	; 0x7de <DIO_write+0x1e>
     7dc:	5a c0       	rjmp	.+180    	; 0x892 <__stack+0x33>
     7de:	78 c0       	rjmp	.+240    	; 0x8d0 <__stack+0x71>
   case PORT_A: {
      if (u8_a_value == LOW) {
     7e0:	41 11       	cpse	r20, r1
     7e2:	0d c0       	rjmp	.+26     	; 0x7fe <DIO_write+0x3e>
         PORTA &= ~(INITIAL_VALUE_1 << u8_a_pinNumber);
     7e4:	2b b3       	in	r18, 0x1b	; 27
     7e6:	81 e0       	ldi	r24, 0x01	; 1
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <DIO_write+0x30>
     7ec:	88 0f       	add	r24, r24
     7ee:	99 1f       	adc	r25, r25
     7f0:	6a 95       	dec	r22
     7f2:	e2 f7       	brpl	.-8      	; 0x7ec <DIO_write+0x2c>
     7f4:	80 95       	com	r24
     7f6:	82 23       	and	r24, r18
     7f8:	8b bb       	out	0x1b, r24	; 27
         return DIO_OK;
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	08 95       	ret
      } else if (u8_a_value == HIGH) {
     7fe:	41 30       	cpi	r20, 0x01	; 1
     800:	09 f0       	breq	.+2      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
     802:	68 c0       	rjmp	.+208    	; 0x8d4 <__stack+0x75>
         PORTA |= (INITIAL_VALUE_1 << u8_a_pinNumber);
     804:	2b b3       	in	r18, 0x1b	; 27
     806:	81 e0       	ldi	r24, 0x01	; 1
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	02 c0       	rjmp	.+4      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
     80c:	88 0f       	add	r24, r24
     80e:	99 1f       	adc	r25, r25
     810:	6a 95       	dec	r22
     812:	e2 f7       	brpl	.-8      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     814:	82 2b       	or	r24, r18
     816:	8b bb       	out	0x1b, r24	; 27
         return DIO_OK;
     818:	80 e0       	ldi	r24, 0x00	; 0
     81a:	08 95       	ret
      }
      break;
   }

   case PORT_B: {
      if (u8_a_value == LOW) {
     81c:	41 11       	cpse	r20, r1
     81e:	0d c0       	rjmp	.+26     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
         PORTB &= ~(INITIAL_VALUE_1 << u8_a_pinNumber);
     820:	28 b3       	in	r18, 0x18	; 24
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	02 c0       	rjmp	.+4      	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
     828:	88 0f       	add	r24, r24
     82a:	99 1f       	adc	r25, r25
     82c:	6a 95       	dec	r22
     82e:	e2 f7       	brpl	.-8      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
     830:	80 95       	com	r24
     832:	82 23       	and	r24, r18
     834:	88 bb       	out	0x18, r24	; 24
         return DIO_OK;
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	08 95       	ret

      } else if (u8_a_value == HIGH) {
     83a:	41 30       	cpi	r20, 0x01	; 1
     83c:	09 f0       	breq	.+2      	; 0x840 <__DATA_REGION_LENGTH__+0x40>
     83e:	4c c0       	rjmp	.+152    	; 0x8d8 <__stack+0x79>
         PORTB |= (INITIAL_VALUE_1 << u8_a_pinNumber);
     840:	28 b3       	in	r18, 0x18	; 24
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	02 c0       	rjmp	.+4      	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
     848:	88 0f       	add	r24, r24
     84a:	99 1f       	adc	r25, r25
     84c:	6a 95       	dec	r22
     84e:	e2 f7       	brpl	.-8      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
     850:	82 2b       	or	r24, r18
     852:	88 bb       	out	0x18, r24	; 24
         return DIO_OK;
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	08 95       	ret
      }
      break;
   }

   case PORT_C: {
      if (u8_a_value == LOW) {
     858:	41 11       	cpse	r20, r1
     85a:	0d c0       	rjmp	.+26     	; 0x876 <__stack+0x17>
         PORTC &= ~(INITIAL_VALUE_1 << u8_a_pinNumber);
     85c:	25 b3       	in	r18, 0x15	; 21
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	02 c0       	rjmp	.+4      	; 0x868 <__stack+0x9>
     864:	88 0f       	add	r24, r24
     866:	99 1f       	adc	r25, r25
     868:	6a 95       	dec	r22
     86a:	e2 f7       	brpl	.-8      	; 0x864 <__stack+0x5>
     86c:	80 95       	com	r24
     86e:	82 23       	and	r24, r18
     870:	85 bb       	out	0x15, r24	; 21
         return DIO_OK;
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	08 95       	ret

      } else if (u8_a_value == HIGH) {
     876:	41 30       	cpi	r20, 0x01	; 1
     878:	89 f5       	brne	.+98     	; 0x8dc <__stack+0x7d>
         PORTC |= (INITIAL_VALUE_1 << u8_a_pinNumber);
     87a:	25 b3       	in	r18, 0x15	; 21
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	02 c0       	rjmp	.+4      	; 0x886 <__stack+0x27>
     882:	88 0f       	add	r24, r24
     884:	99 1f       	adc	r25, r25
     886:	6a 95       	dec	r22
     888:	e2 f7       	brpl	.-8      	; 0x882 <__stack+0x23>
     88a:	82 2b       	or	r24, r18
     88c:	85 bb       	out	0x15, r24	; 21
         return DIO_OK;
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	08 95       	ret
      }
      break;
   }

   case PORT_D: {
      if (u8_a_value == LOW) {
     892:	41 11       	cpse	r20, r1
     894:	0d c0       	rjmp	.+26     	; 0x8b0 <__stack+0x51>
         PORTD &= ~(INITIAL_VALUE_1 << u8_a_pinNumber);
     896:	22 b3       	in	r18, 0x12	; 18
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	02 c0       	rjmp	.+4      	; 0x8a2 <__stack+0x43>
     89e:	88 0f       	add	r24, r24
     8a0:	99 1f       	adc	r25, r25
     8a2:	6a 95       	dec	r22
     8a4:	e2 f7       	brpl	.-8      	; 0x89e <__stack+0x3f>
     8a6:	80 95       	com	r24
     8a8:	82 23       	and	r24, r18
     8aa:	82 bb       	out	0x12, r24	; 18
         return DIO_OK;
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	08 95       	ret

      } else if (u8_a_value == HIGH) {
     8b0:	41 30       	cpi	r20, 0x01	; 1
     8b2:	b1 f4       	brne	.+44     	; 0x8e0 <__stack+0x81>
         PORTD |= (INITIAL_VALUE_1 << u8_a_pinNumber);
     8b4:	22 b3       	in	r18, 0x12	; 18
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	02 c0       	rjmp	.+4      	; 0x8c0 <__stack+0x61>
     8bc:	88 0f       	add	r24, r24
     8be:	99 1f       	adc	r25, r25
     8c0:	6a 95       	dec	r22
     8c2:	e2 f7       	brpl	.-8      	; 0x8bc <__stack+0x5d>
     8c4:	82 2b       	or	r24, r18
     8c6:	82 bb       	out	0x12, r24	; 18
         return DIO_OK;
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	08 95       	ret

}

EN_dioError_t DIO_write(uint8_t u8_a_portNumber, uint8_t u8_a_pinNumber, uint8_t u8_a_value) {
   if (u8_a_pinNumber > MAX_PORTS || u8_a_pinNumber < MIN_PORTS) {
      return DIO_INVALID_PIN;
     8cc:	82 e0       	ldi	r24, 0x02	; 2
     8ce:	08 95       	ret
         return DIO_INVALID_VALUE;
      }
      break;
   }
   default: {
      return DIO_INVALID_PORT;
     8d0:	81 e0       	ldi	r24, 0x01	; 1
     8d2:	08 95       	ret
      } else if (u8_a_value == HIGH) {
         PORTA |= (INITIAL_VALUE_1 << u8_a_pinNumber);
         return DIO_OK;

      } else {
         return DIO_INVALID_VALUE;
     8d4:	84 e0       	ldi	r24, 0x04	; 4
     8d6:	08 95       	ret
      } else if (u8_a_value == HIGH) {
         PORTB |= (INITIAL_VALUE_1 << u8_a_pinNumber);
         return DIO_OK;

      } else {
         return DIO_INVALID_VALUE;
     8d8:	84 e0       	ldi	r24, 0x04	; 4
     8da:	08 95       	ret
      } else if (u8_a_value == HIGH) {
         PORTC |= (INITIAL_VALUE_1 << u8_a_pinNumber);
         return DIO_OK;

      } else {
         return DIO_INVALID_VALUE;
     8dc:	84 e0       	ldi	r24, 0x04	; 4
     8de:	08 95       	ret

      } else if (u8_a_value == HIGH) {
         PORTD |= (INITIAL_VALUE_1 << u8_a_pinNumber);
         return DIO_OK;
      } else {
         return DIO_INVALID_VALUE;
     8e0:	84 e0       	ldi	r24, 0x04	; 4
   }
   default: {
      return DIO_INVALID_PORT;
   }
   }
}
     8e2:	08 95       	ret

000008e4 <INTERRUPTS_enableExternalInterrupts>:

   /* test case 3.. returns INTERRUPT_INVALID_EDGE*/
   INTERRUPTS_extInterruptsEdge(EXTERNAL_INTERRUPT_0, edgeFail);

   /* test case 4.. returns INTERRUPT_OK [example of HAPPY CASE SCENARIO]*/
   INTERRUPTS_extInterruptsEdge(EXTERNAL_INTERRUPT_0, RISING_EDGE);
     8e4:	81 30       	cpi	r24, 0x01	; 1
     8e6:	49 f0       	breq	.+18     	; 0x8fa <INTERRUPTS_enableExternalInterrupts+0x16>
     8e8:	18 f0       	brcs	.+6      	; 0x8f0 <INTERRUPTS_enableExternalInterrupts+0xc>
     8ea:	82 30       	cpi	r24, 0x02	; 2
     8ec:	59 f0       	breq	.+22     	; 0x904 <INTERRUPTS_enableExternalInterrupts+0x20>
     8ee:	0f c0       	rjmp	.+30     	; 0x90e <INTERRUPTS_enableExternalInterrupts+0x2a>
     8f0:	8b b7       	in	r24, 0x3b	; 59
     8f2:	80 64       	ori	r24, 0x40	; 64
     8f4:	8b bf       	out	0x3b, r24	; 59
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	08 95       	ret
     8fa:	8b b7       	in	r24, 0x3b	; 59
     8fc:	80 68       	ori	r24, 0x80	; 128
     8fe:	8b bf       	out	0x3b, r24	; 59
     900:	80 e0       	ldi	r24, 0x00	; 0
     902:	08 95       	ret
     904:	8b b7       	in	r24, 0x3b	; 59
     906:	80 62       	ori	r24, 0x20	; 32
     908:	8b bf       	out	0x3b, r24	; 59
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	08 95       	ret
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	08 95       	ret

00000912 <INTERRUPTS_enableGlobalInterrupt>:
     912:	78 94       	sei
     914:	08 95       	ret

00000916 <INTERRUPTS_extInterruptsEdge>:
     916:	81 30       	cpi	r24, 0x01	; 1
     918:	69 f1       	breq	.+90     	; 0x974 <INTERRUPTS_extInterruptsEdge+0x5e>
     91a:	20 f0       	brcs	.+8      	; 0x924 <INTERRUPTS_extInterruptsEdge+0xe>
     91c:	82 30       	cpi	r24, 0x02	; 2
     91e:	09 f4       	brne	.+2      	; 0x922 <INTERRUPTS_extInterruptsEdge+0xc>
     920:	51 c0       	rjmp	.+162    	; 0x9c4 <INTERRUPTS_extInterruptsEdge+0xae>
     922:	5f c0       	rjmp	.+190    	; 0x9e2 <INTERRUPTS_extInterruptsEdge+0xcc>
     924:	61 30       	cpi	r22, 0x01	; 1
     926:	71 f0       	breq	.+28     	; 0x944 <INTERRUPTS_extInterruptsEdge+0x2e>
     928:	28 f0       	brcs	.+10     	; 0x934 <INTERRUPTS_extInterruptsEdge+0x1e>
     92a:	62 30       	cpi	r22, 0x02	; 2
     92c:	99 f0       	breq	.+38     	; 0x954 <INTERRUPTS_extInterruptsEdge+0x3e>
     92e:	63 30       	cpi	r22, 0x03	; 3
     930:	c9 f0       	breq	.+50     	; 0x964 <INTERRUPTS_extInterruptsEdge+0x4e>
     932:	59 c0       	rjmp	.+178    	; 0x9e6 <INTERRUPTS_extInterruptsEdge+0xd0>
     934:	85 b7       	in	r24, 0x35	; 53
     936:	8e 7f       	andi	r24, 0xFE	; 254
     938:	85 bf       	out	0x35, r24	; 53
     93a:	85 b7       	in	r24, 0x35	; 53
     93c:	8d 7f       	andi	r24, 0xFD	; 253
     93e:	85 bf       	out	0x35, r24	; 53
     940:	80 e0       	ldi	r24, 0x00	; 0
     942:	08 95       	ret
     944:	85 b7       	in	r24, 0x35	; 53
     946:	81 60       	ori	r24, 0x01	; 1
     948:	85 bf       	out	0x35, r24	; 53
     94a:	85 b7       	in	r24, 0x35	; 53
     94c:	8d 7f       	andi	r24, 0xFD	; 253
     94e:	85 bf       	out	0x35, r24	; 53
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	08 95       	ret
     954:	85 b7       	in	r24, 0x35	; 53
     956:	8e 7f       	andi	r24, 0xFE	; 254
     958:	85 bf       	out	0x35, r24	; 53
     95a:	85 b7       	in	r24, 0x35	; 53
     95c:	82 60       	ori	r24, 0x02	; 2
     95e:	85 bf       	out	0x35, r24	; 53
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	08 95       	ret
     964:	85 b7       	in	r24, 0x35	; 53
     966:	81 60       	ori	r24, 0x01	; 1
     968:	85 bf       	out	0x35, r24	; 53
     96a:	85 b7       	in	r24, 0x35	; 53
     96c:	82 60       	ori	r24, 0x02	; 2
     96e:	85 bf       	out	0x35, r24	; 53
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	08 95       	ret
     974:	61 30       	cpi	r22, 0x01	; 1
     976:	71 f0       	breq	.+28     	; 0x994 <INTERRUPTS_extInterruptsEdge+0x7e>
     978:	28 f0       	brcs	.+10     	; 0x984 <INTERRUPTS_extInterruptsEdge+0x6e>
     97a:	62 30       	cpi	r22, 0x02	; 2
     97c:	99 f0       	breq	.+38     	; 0x9a4 <INTERRUPTS_extInterruptsEdge+0x8e>
     97e:	63 30       	cpi	r22, 0x03	; 3
     980:	c9 f0       	breq	.+50     	; 0x9b4 <INTERRUPTS_extInterruptsEdge+0x9e>
     982:	33 c0       	rjmp	.+102    	; 0x9ea <INTERRUPTS_extInterruptsEdge+0xd4>
     984:	85 b7       	in	r24, 0x35	; 53
     986:	8b 7f       	andi	r24, 0xFB	; 251
     988:	85 bf       	out	0x35, r24	; 53
     98a:	85 b7       	in	r24, 0x35	; 53
     98c:	87 7f       	andi	r24, 0xF7	; 247
     98e:	85 bf       	out	0x35, r24	; 53
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	08 95       	ret
     994:	85 b7       	in	r24, 0x35	; 53
     996:	84 60       	ori	r24, 0x04	; 4
     998:	85 bf       	out	0x35, r24	; 53
     99a:	85 b7       	in	r24, 0x35	; 53
     99c:	87 7f       	andi	r24, 0xF7	; 247
     99e:	85 bf       	out	0x35, r24	; 53
     9a0:	80 e0       	ldi	r24, 0x00	; 0
     9a2:	08 95       	ret
     9a4:	85 b7       	in	r24, 0x35	; 53
     9a6:	8b 7f       	andi	r24, 0xFB	; 251
     9a8:	85 bf       	out	0x35, r24	; 53
     9aa:	85 b7       	in	r24, 0x35	; 53
     9ac:	88 60       	ori	r24, 0x08	; 8
     9ae:	85 bf       	out	0x35, r24	; 53
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	08 95       	ret
     9b4:	85 b7       	in	r24, 0x35	; 53
     9b6:	84 60       	ori	r24, 0x04	; 4
     9b8:	85 bf       	out	0x35, r24	; 53
     9ba:	85 b7       	in	r24, 0x35	; 53
     9bc:	88 60       	ori	r24, 0x08	; 8
     9be:	85 bf       	out	0x35, r24	; 53
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	08 95       	ret
     9c4:	62 30       	cpi	r22, 0x02	; 2
     9c6:	19 f0       	breq	.+6      	; 0x9ce <INTERRUPTS_extInterruptsEdge+0xb8>
     9c8:	63 30       	cpi	r22, 0x03	; 3
     9ca:	31 f0       	breq	.+12     	; 0x9d8 <INTERRUPTS_extInterruptsEdge+0xc2>
     9cc:	10 c0       	rjmp	.+32     	; 0x9ee <INTERRUPTS_extInterruptsEdge+0xd8>
     9ce:	84 b7       	in	r24, 0x34	; 52
     9d0:	8f 7b       	andi	r24, 0xBF	; 191
     9d2:	84 bf       	out	0x34, r24	; 52
     9d4:	80 e0       	ldi	r24, 0x00	; 0
     9d6:	08 95       	ret
     9d8:	84 b7       	in	r24, 0x34	; 52
     9da:	80 64       	ori	r24, 0x40	; 64
     9dc:	84 bf       	out	0x34, r24	; 52
     9de:	80 e0       	ldi	r24, 0x00	; 0
     9e0:	08 95       	ret
     9e2:	81 e0       	ldi	r24, 0x01	; 1
     9e4:	08 95       	ret
     9e6:	82 e0       	ldi	r24, 0x02	; 2
     9e8:	08 95       	ret
     9ea:	82 e0       	ldi	r24, 0x02	; 2
     9ec:	08 95       	ret
     9ee:	82 e0       	ldi	r24, 0x02	; 2
     9f0:	08 95       	ret

000009f2 <INTERRUPTS_EXT_SetCallBack>:
     9f2:	81 30       	cpi	r24, 0x01	; 1
     9f4:	51 f0       	breq	.+20     	; 0xa0a <INTERRUPTS_EXT_SetCallBack+0x18>
     9f6:	18 f0       	brcs	.+6      	; 0x9fe <INTERRUPTS_EXT_SetCallBack+0xc>
     9f8:	82 30       	cpi	r24, 0x02	; 2
     9fa:	69 f0       	breq	.+26     	; 0xa16 <INTERRUPTS_EXT_SetCallBack+0x24>
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <INTERRUPTS_EXT_SetCallBack+0x30>
     9fe:	70 93 6a 00 	sts	0x006A, r23	; 0x80006a <INT0_CallBack_ptr+0x1>
     a02:	60 93 69 00 	sts	0x0069, r22	; 0x800069 <INT0_CallBack_ptr>
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	08 95       	ret
     a0a:	70 93 68 00 	sts	0x0068, r23	; 0x800068 <INT1_CallBack_ptr+0x1>
     a0e:	60 93 67 00 	sts	0x0067, r22	; 0x800067 <INT1_CallBack_ptr>
     a12:	80 e0       	ldi	r24, 0x00	; 0
     a14:	08 95       	ret
     a16:	70 93 66 00 	sts	0x0066, r23	; 0x800066 <INT2_CallBack_ptr+0x1>
     a1a:	60 93 65 00 	sts	0x0065, r22	; 0x800065 <INT2_CallBack_ptr>
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	08 95       	ret
     a22:	83 e0       	ldi	r24, 0x03	; 3
     a24:	08 95       	ret

00000a26 <INTERRUPTS_leds_init>:
     a26:	41 e0       	ldi	r20, 0x01	; 1
     a28:	60 e0       	ldi	r22, 0x00	; 0
     a2a:	81 e4       	ldi	r24, 0x41	; 65
     a2c:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_write>
     a30:	40 e0       	ldi	r20, 0x00	; 0
     a32:	62 e0       	ldi	r22, 0x02	; 2
     a34:	81 e4       	ldi	r24, 0x41	; 65
     a36:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_write>
     a3a:	40 e0       	ldi	r20, 0x00	; 0
     a3c:	65 e0       	ldi	r22, 0x05	; 5
     a3e:	81 e4       	ldi	r24, 0x41	; 65
     a40:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_write>
     a44:	40 e0       	ldi	r20, 0x00	; 0
     a46:	67 e0       	ldi	r22, 0x07	; 7
     a48:	81 e4       	ldi	r24, 0x41	; 65
     a4a:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_write>
     a4e:	08 95       	ret

00000a50 <__vector_1>:

}

//ISR functions for EXI0, EXI1 and EXI2

ISR(EXT_INT_0) {
     a50:	1f 92       	push	r1
     a52:	0f 92       	push	r0
     a54:	0f b6       	in	r0, 0x3f	; 63
     a56:	0f 92       	push	r0
     a58:	11 24       	eor	r1, r1
     a5a:	2f 93       	push	r18
     a5c:	3f 93       	push	r19
     a5e:	4f 93       	push	r20
     a60:	5f 93       	push	r21
     a62:	6f 93       	push	r22
     a64:	7f 93       	push	r23
     a66:	8f 93       	push	r24
     a68:	9f 93       	push	r25
     a6a:	af 93       	push	r26
     a6c:	bf 93       	push	r27
     a6e:	ef 93       	push	r30
     a70:	ff 93       	push	r31
   u8_g_timerBtn_flag = INITIAL_VALUE_0;
     a72:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <u8_g_timerBtn_flag>
   if (INT0_CallBack_ptr != NULLPTR) {
     a76:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <INT0_CallBack_ptr>
     a7a:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <INT0_CallBack_ptr+0x1>
     a7e:	30 97       	sbiw	r30, 0x00	; 0
     a80:	19 f0       	breq	.+6      	; 0xa88 <__vector_1+0x38>
      INT0_CallBack_ptr();
     a82:	09 95       	icall
      INTERRUPTS_leds_init();
     a84:	0e 94 13 05 	call	0xa26	; 0xa26 <INTERRUPTS_leds_init>
   }
}
     a88:	ff 91       	pop	r31
     a8a:	ef 91       	pop	r30
     a8c:	bf 91       	pop	r27
     a8e:	af 91       	pop	r26
     a90:	9f 91       	pop	r25
     a92:	8f 91       	pop	r24
     a94:	7f 91       	pop	r23
     a96:	6f 91       	pop	r22
     a98:	5f 91       	pop	r21
     a9a:	4f 91       	pop	r20
     a9c:	3f 91       	pop	r19
     a9e:	2f 91       	pop	r18
     aa0:	0f 90       	pop	r0
     aa2:	0f be       	out	0x3f, r0	; 63
     aa4:	0f 90       	pop	r0
     aa6:	1f 90       	pop	r1
     aa8:	18 95       	reti

00000aaa <__vector_2>:

ISR(EXT_INT_1) {
     aaa:	1f 92       	push	r1
     aac:	0f 92       	push	r0
     aae:	0f b6       	in	r0, 0x3f	; 63
     ab0:	0f 92       	push	r0
     ab2:	11 24       	eor	r1, r1
     ab4:	2f 93       	push	r18
     ab6:	3f 93       	push	r19
     ab8:	4f 93       	push	r20
     aba:	5f 93       	push	r21
     abc:	6f 93       	push	r22
     abe:	7f 93       	push	r23
     ac0:	8f 93       	push	r24
     ac2:	9f 93       	push	r25
     ac4:	af 93       	push	r26
     ac6:	bf 93       	push	r27
     ac8:	ef 93       	push	r30
     aca:	ff 93       	push	r31
   if (INT1_CallBack_ptr != NULLPTR) {
     acc:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <INT1_CallBack_ptr>
     ad0:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <INT1_CallBack_ptr+0x1>
     ad4:	30 97       	sbiw	r30, 0x00	; 0
     ad6:	09 f0       	breq	.+2      	; 0xada <__vector_2+0x30>
      INT1_CallBack_ptr();
     ad8:	09 95       	icall
   }
   u8_g_timerBtn_flag = INITIAL_VALUE_1;
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <u8_g_timerBtn_flag>
}
     ae0:	ff 91       	pop	r31
     ae2:	ef 91       	pop	r30
     ae4:	bf 91       	pop	r27
     ae6:	af 91       	pop	r26
     ae8:	9f 91       	pop	r25
     aea:	8f 91       	pop	r24
     aec:	7f 91       	pop	r23
     aee:	6f 91       	pop	r22
     af0:	5f 91       	pop	r21
     af2:	4f 91       	pop	r20
     af4:	3f 91       	pop	r19
     af6:	2f 91       	pop	r18
     af8:	0f 90       	pop	r0
     afa:	0f be       	out	0x3f, r0	; 63
     afc:	0f 90       	pop	r0
     afe:	1f 90       	pop	r1
     b00:	18 95       	reti

00000b02 <__vector_3>:
ISR(EXT_INT_2) {
     b02:	1f 92       	push	r1
     b04:	0f 92       	push	r0
     b06:	0f b6       	in	r0, 0x3f	; 63
     b08:	0f 92       	push	r0
     b0a:	11 24       	eor	r1, r1
     b0c:	2f 93       	push	r18
     b0e:	3f 93       	push	r19
     b10:	4f 93       	push	r20
     b12:	5f 93       	push	r21
     b14:	6f 93       	push	r22
     b16:	7f 93       	push	r23
     b18:	8f 93       	push	r24
     b1a:	9f 93       	push	r25
     b1c:	af 93       	push	r26
     b1e:	bf 93       	push	r27
     b20:	ef 93       	push	r30
     b22:	ff 93       	push	r31
   if (INT2_CallBack_ptr != NULLPTR) {
     b24:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <INT2_CallBack_ptr>
     b28:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <INT2_CallBack_ptr+0x1>
     b2c:	30 97       	sbiw	r30, 0x00	; 0
     b2e:	09 f0       	breq	.+2      	; 0xb32 <__vector_3+0x30>
      INT2_CallBack_ptr();
     b30:	09 95       	icall
   }
     b32:	ff 91       	pop	r31
     b34:	ef 91       	pop	r30
     b36:	bf 91       	pop	r27
     b38:	af 91       	pop	r26
     b3a:	9f 91       	pop	r25
     b3c:	8f 91       	pop	r24
     b3e:	7f 91       	pop	r23
     b40:	6f 91       	pop	r22
     b42:	5f 91       	pop	r21
     b44:	4f 91       	pop	r20
     b46:	3f 91       	pop	r19
     b48:	2f 91       	pop	r18
     b4a:	0f 90       	pop	r0
     b4c:	0f be       	out	0x3f, r0	; 63
     b4e:	0f 90       	pop	r0
     b50:	1f 90       	pop	r1
     b52:	18 95       	reti

00000b54 <TIMER_timer0InitMode>:

   /* test case 8.. returns TIMER_INVALID_SETINIT*/
   TIMER_timer2SetInitial(FAIL_MAX);

   /* test case 9.. returns TIMER_OK [example of HAPPY CASE SCENARIO]*/
   TIMER_timer2Init();
     b54:	81 11       	cpse	r24, r1
     b56:	08 c0       	rjmp	.+16     	; 0xb68 <TIMER_timer0InitMode+0x14>
     b58:	83 b7       	in	r24, 0x33	; 51
     b5a:	8f 7b       	andi	r24, 0xBF	; 191
     b5c:	83 bf       	out	0x33, r24	; 51
     b5e:	83 b7       	in	r24, 0x33	; 51
     b60:	87 7f       	andi	r24, 0xF7	; 247
     b62:	83 bf       	out	0x33, r24	; 51
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	08 95       	ret
     b68:	81 30       	cpi	r24, 0x01	; 1
     b6a:	41 f4       	brne	.+16     	; 0xb7c <TIMER_timer0InitMode+0x28>
     b6c:	83 b7       	in	r24, 0x33	; 51
     b6e:	8f 7b       	andi	r24, 0xBF	; 191
     b70:	83 bf       	out	0x33, r24	; 51
     b72:	83 b7       	in	r24, 0x33	; 51
     b74:	88 60       	ori	r24, 0x08	; 8
     b76:	83 bf       	out	0x33, r24	; 51
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	08 95       	ret
     b7c:	82 30       	cpi	r24, 0x02	; 2
     b7e:	41 f4       	brne	.+16     	; 0xb90 <TIMER_timer0InitMode+0x3c>
     b80:	83 b7       	in	r24, 0x33	; 51
     b82:	80 64       	ori	r24, 0x40	; 64
     b84:	83 bf       	out	0x33, r24	; 51
     b86:	83 b7       	in	r24, 0x33	; 51
     b88:	87 7f       	andi	r24, 0xF7	; 247
     b8a:	83 bf       	out	0x33, r24	; 51
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	08 95       	ret
     b90:	83 30       	cpi	r24, 0x03	; 3
     b92:	41 f4       	brne	.+16     	; 0xba4 <TIMER_timer0InitMode+0x50>
     b94:	83 b7       	in	r24, 0x33	; 51
     b96:	80 64       	ori	r24, 0x40	; 64
     b98:	83 bf       	out	0x33, r24	; 51
     b9a:	83 b7       	in	r24, 0x33	; 51
     b9c:	88 60       	ori	r24, 0x08	; 8
     b9e:	83 bf       	out	0x33, r24	; 51
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	08 95       	ret
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	08 95       	ret

00000ba8 <TIMER_timer0Prescalar>:
     ba8:	81 11       	cpse	r24, r1
     baa:	0b c0       	rjmp	.+22     	; 0xbc2 <TIMER_timer0Prescalar+0x1a>
     bac:	83 b7       	in	r24, 0x33	; 51
     bae:	8e 7f       	andi	r24, 0xFE	; 254
     bb0:	83 bf       	out	0x33, r24	; 51
     bb2:	83 b7       	in	r24, 0x33	; 51
     bb4:	8d 7f       	andi	r24, 0xFD	; 253
     bb6:	83 bf       	out	0x33, r24	; 51
     bb8:	83 b7       	in	r24, 0x33	; 51
     bba:	8b 7f       	andi	r24, 0xFB	; 251
     bbc:	83 bf       	out	0x33, r24	; 51
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	08 95       	ret
     bc2:	81 30       	cpi	r24, 0x01	; 1
     bc4:	59 f4       	brne	.+22     	; 0xbdc <TIMER_timer0Prescalar+0x34>
     bc6:	83 b7       	in	r24, 0x33	; 51
     bc8:	81 60       	ori	r24, 0x01	; 1
     bca:	83 bf       	out	0x33, r24	; 51
     bcc:	83 b7       	in	r24, 0x33	; 51
     bce:	8d 7f       	andi	r24, 0xFD	; 253
     bd0:	83 bf       	out	0x33, r24	; 51
     bd2:	83 b7       	in	r24, 0x33	; 51
     bd4:	8b 7f       	andi	r24, 0xFB	; 251
     bd6:	83 bf       	out	0x33, r24	; 51
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	08 95       	ret
     bdc:	82 30       	cpi	r24, 0x02	; 2
     bde:	59 f4       	brne	.+22     	; 0xbf6 <TIMER_timer0Prescalar+0x4e>
     be0:	83 b7       	in	r24, 0x33	; 51
     be2:	8e 7f       	andi	r24, 0xFE	; 254
     be4:	83 bf       	out	0x33, r24	; 51
     be6:	83 b7       	in	r24, 0x33	; 51
     be8:	82 60       	ori	r24, 0x02	; 2
     bea:	83 bf       	out	0x33, r24	; 51
     bec:	83 b7       	in	r24, 0x33	; 51
     bee:	8b 7f       	andi	r24, 0xFB	; 251
     bf0:	83 bf       	out	0x33, r24	; 51
     bf2:	80 e0       	ldi	r24, 0x00	; 0
     bf4:	08 95       	ret
     bf6:	83 30       	cpi	r24, 0x03	; 3
     bf8:	59 f4       	brne	.+22     	; 0xc10 <TIMER_timer0Prescalar+0x68>
     bfa:	83 b7       	in	r24, 0x33	; 51
     bfc:	81 60       	ori	r24, 0x01	; 1
     bfe:	83 bf       	out	0x33, r24	; 51
     c00:	83 b7       	in	r24, 0x33	; 51
     c02:	82 60       	ori	r24, 0x02	; 2
     c04:	83 bf       	out	0x33, r24	; 51
     c06:	83 b7       	in	r24, 0x33	; 51
     c08:	8b 7f       	andi	r24, 0xFB	; 251
     c0a:	83 bf       	out	0x33, r24	; 51
     c0c:	80 e0       	ldi	r24, 0x00	; 0
     c0e:	08 95       	ret
     c10:	84 30       	cpi	r24, 0x04	; 4
     c12:	59 f4       	brne	.+22     	; 0xc2a <TIMER_timer0Prescalar+0x82>
     c14:	83 b7       	in	r24, 0x33	; 51
     c16:	8e 7f       	andi	r24, 0xFE	; 254
     c18:	83 bf       	out	0x33, r24	; 51
     c1a:	83 b7       	in	r24, 0x33	; 51
     c1c:	8d 7f       	andi	r24, 0xFD	; 253
     c1e:	83 bf       	out	0x33, r24	; 51
     c20:	83 b7       	in	r24, 0x33	; 51
     c22:	84 60       	ori	r24, 0x04	; 4
     c24:	83 bf       	out	0x33, r24	; 51
     c26:	80 e0       	ldi	r24, 0x00	; 0
     c28:	08 95       	ret
     c2a:	85 30       	cpi	r24, 0x05	; 5
     c2c:	59 f4       	brne	.+22     	; 0xc44 <TIMER_timer0Prescalar+0x9c>
     c2e:	83 b7       	in	r24, 0x33	; 51
     c30:	81 60       	ori	r24, 0x01	; 1
     c32:	83 bf       	out	0x33, r24	; 51
     c34:	83 b7       	in	r24, 0x33	; 51
     c36:	8d 7f       	andi	r24, 0xFD	; 253
     c38:	83 bf       	out	0x33, r24	; 51
     c3a:	83 b7       	in	r24, 0x33	; 51
     c3c:	84 60       	ori	r24, 0x04	; 4
     c3e:	83 bf       	out	0x33, r24	; 51
     c40:	80 e0       	ldi	r24, 0x00	; 0
     c42:	08 95       	ret
     c44:	86 30       	cpi	r24, 0x06	; 6
     c46:	59 f4       	brne	.+22     	; 0xc5e <TIMER_timer0Prescalar+0xb6>
     c48:	83 b7       	in	r24, 0x33	; 51
     c4a:	8e 7f       	andi	r24, 0xFE	; 254
     c4c:	83 bf       	out	0x33, r24	; 51
     c4e:	83 b7       	in	r24, 0x33	; 51
     c50:	82 60       	ori	r24, 0x02	; 2
     c52:	83 bf       	out	0x33, r24	; 51
     c54:	83 b7       	in	r24, 0x33	; 51
     c56:	84 60       	ori	r24, 0x04	; 4
     c58:	83 bf       	out	0x33, r24	; 51
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	08 95       	ret
     c5e:	87 30       	cpi	r24, 0x07	; 7
     c60:	59 f4       	brne	.+22     	; 0xc78 <TIMER_timer0Prescalar+0xd0>
     c62:	83 b7       	in	r24, 0x33	; 51
     c64:	81 60       	ori	r24, 0x01	; 1
     c66:	83 bf       	out	0x33, r24	; 51
     c68:	83 b7       	in	r24, 0x33	; 51
     c6a:	82 60       	ori	r24, 0x02	; 2
     c6c:	83 bf       	out	0x33, r24	; 51
     c6e:	83 b7       	in	r24, 0x33	; 51
     c70:	84 60       	ori	r24, 0x04	; 4
     c72:	83 bf       	out	0x33, r24	; 51
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	08 95       	ret
     c78:	82 e0       	ldi	r24, 0x02	; 2
     c7a:	08 95       	ret

00000c7c <TIMER_timer0_OVF_Number>:
     c7c:	8f 92       	push	r8
     c7e:	9f 92       	push	r9
     c80:	af 92       	push	r10
     c82:	bf 92       	push	r11
     c84:	cf 92       	push	r12
     c86:	df 92       	push	r13
     c88:	ef 92       	push	r14
     c8a:	ff 92       	push	r15
     c8c:	4b 01       	movw	r8, r22
     c8e:	5c 01       	movw	r10, r24
     c90:	20 e0       	ldi	r18, 0x00	; 0
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	a9 01       	movw	r20, r18
     c96:	0e 94 ce 09 	call	0x139c	; 0x139c <__gesf2>
     c9a:	18 16       	cp	r1, r24
     c9c:	94 f0       	brlt	.+36     	; 0xcc2 <TIMER_timer0_OVF_Number+0x46>
     c9e:	1e c0       	rjmp	.+60     	; 0xcdc <TIMER_timer0_OVF_Number+0x60>
     ca0:	08 b6       	in	r0, 0x38	; 56
     ca2:	00 fe       	sbrs	r0, 0
     ca4:	fd cf       	rjmp	.-6      	; 0xca0 <TIMER_timer0_OVF_Number+0x24>
     ca6:	88 b7       	in	r24, 0x38	; 56
     ca8:	81 60       	ori	r24, 0x01	; 1
     caa:	88 bf       	out	0x38, r24	; 56
     cac:	20 e0       	ldi	r18, 0x00	; 0
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	40 e8       	ldi	r20, 0x80	; 128
     cb2:	5f e3       	ldi	r21, 0x3F	; 63
     cb4:	c7 01       	movw	r24, r14
     cb6:	b6 01       	movw	r22, r12
     cb8:	0e 94 ef 07 	call	0xfde	; 0xfde <__addsf3>
     cbc:	6b 01       	movw	r12, r22
     cbe:	7c 01       	movw	r14, r24
     cc0:	03 c0       	rjmp	.+6      	; 0xcc8 <TIMER_timer0_OVF_Number+0x4c>
     cc2:	c1 2c       	mov	r12, r1
     cc4:	d1 2c       	mov	r13, r1
     cc6:	76 01       	movw	r14, r12
     cc8:	a5 01       	movw	r20, r10
     cca:	94 01       	movw	r18, r8
     ccc:	c7 01       	movw	r24, r14
     cce:	b6 01       	movw	r22, r12
     cd0:	0e 94 72 08 	call	0x10e4	; 0x10e4 <__cmpsf2>
     cd4:	88 23       	and	r24, r24
     cd6:	24 f3       	brlt	.-56     	; 0xca0 <TIMER_timer0_OVF_Number+0x24>
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	2a c0       	rjmp	.+84     	; 0xd30 <TIMER_timer0_OVF_Number+0xb4>
     cdc:	20 e0       	ldi	r18, 0x00	; 0
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	a9 01       	movw	r20, r18
     ce2:	c5 01       	movw	r24, r10
     ce4:	b4 01       	movw	r22, r8
     ce6:	0e 94 72 08 	call	0x10e4	; 0x10e4 <__cmpsf2>
     cea:	18 16       	cp	r1, r24
     cec:	9c f4       	brge	.+38     	; 0xd14 <TIMER_timer0_OVF_Number+0x98>
     cee:	85 e0       	ldi	r24, 0x05	; 5
     cf0:	1f c0       	rjmp	.+62     	; 0xd30 <TIMER_timer0_OVF_Number+0xb4>
     cf2:	08 b6       	in	r0, 0x38	; 56
     cf4:	00 fe       	sbrs	r0, 0
     cf6:	fd cf       	rjmp	.-6      	; 0xcf2 <TIMER_timer0_OVF_Number+0x76>
     cf8:	88 b7       	in	r24, 0x38	; 56
     cfa:	81 60       	ori	r24, 0x01	; 1
     cfc:	88 bf       	out	0x38, r24	; 56
     cfe:	20 e0       	ldi	r18, 0x00	; 0
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	40 e8       	ldi	r20, 0x80	; 128
     d04:	5f e3       	ldi	r21, 0x3F	; 63
     d06:	c7 01       	movw	r24, r14
     d08:	b6 01       	movw	r22, r12
     d0a:	0e 94 ef 07 	call	0xfde	; 0xfde <__addsf3>
     d0e:	6b 01       	movw	r12, r22
     d10:	7c 01       	movw	r14, r24
     d12:	03 c0       	rjmp	.+6      	; 0xd1a <TIMER_timer0_OVF_Number+0x9e>
     d14:	c1 2c       	mov	r12, r1
     d16:	d1 2c       	mov	r13, r1
     d18:	76 01       	movw	r14, r12
     d1a:	20 e0       	ldi	r18, 0x00	; 0
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	40 e8       	ldi	r20, 0x80	; 128
     d20:	5f e3       	ldi	r21, 0x3F	; 63
     d22:	c7 01       	movw	r24, r14
     d24:	b6 01       	movw	r22, r12
     d26:	0e 94 72 08 	call	0x10e4	; 0x10e4 <__cmpsf2>
     d2a:	88 23       	and	r24, r24
     d2c:	14 f3       	brlt	.-60     	; 0xcf2 <TIMER_timer0_OVF_Number+0x76>
     d2e:	80 e0       	ldi	r24, 0x00	; 0
     d30:	ff 90       	pop	r15
     d32:	ef 90       	pop	r14
     d34:	df 90       	pop	r13
     d36:	cf 90       	pop	r12
     d38:	bf 90       	pop	r11
     d3a:	af 90       	pop	r10
     d3c:	9f 90       	pop	r9
     d3e:	8f 90       	pop	r8
     d40:	08 95       	ret

00000d42 <TIMER_timer0PWM_mode>:
     d42:	cf 92       	push	r12
     d44:	df 92       	push	r13
     d46:	ef 92       	push	r14
     d48:	ff 92       	push	r15
     d4a:	6b 01       	movw	r12, r22
     d4c:	7c 01       	movw	r14, r24
     d4e:	20 e0       	ldi	r18, 0x00	; 0
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	a9 01       	movw	r20, r18
     d54:	0e 94 72 08 	call	0x10e4	; 0x10e4 <__cmpsf2>
     d58:	88 23       	and	r24, r24
     d5a:	04 f1       	brlt	.+64     	; 0xd9c <TIMER_timer0PWM_mode+0x5a>
     d5c:	c7 01       	movw	r24, r14
     d5e:	b6 01       	movw	r22, r12
     d60:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <ceil>
     d64:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <__fixunssfsi>
     d68:	f6 2e       	mov	r15, r22
     d6a:	80 e0       	ldi	r24, 0x00	; 0
     d6c:	0e 94 aa 05 	call	0xb54	; 0xb54 <TIMER_timer0InitMode>
     d70:	81 11       	cpse	r24, r1
     d72:	16 c0       	rjmp	.+44     	; 0xda0 <TIMER_timer0PWM_mode+0x5e>
     d74:	f2 be       	out	0x32, r15	; 50
     d76:	85 e0       	ldi	r24, 0x05	; 5
     d78:	0e 94 d4 05 	call	0xba8	; 0xba8 <TIMER_timer0Prescalar>
     d7c:	81 11       	cpse	r24, r1
     d7e:	12 c0       	rjmp	.+36     	; 0xda4 <TIMER_timer0PWM_mode+0x62>
     d80:	60 e0       	ldi	r22, 0x00	; 0
     d82:	70 e0       	ldi	r23, 0x00	; 0
     d84:	80 e8       	ldi	r24, 0x80	; 128
     d86:	9f e3       	ldi	r25, 0x3F	; 63
     d88:	0e 94 3e 06 	call	0xc7c	; 0xc7c <TIMER_timer0_OVF_Number>
     d8c:	81 11       	cpse	r24, r1
     d8e:	0c c0       	rjmp	.+24     	; 0xda8 <TIMER_timer0PWM_mode+0x66>
     d90:	13 be       	out	0x33, r1	; 51
     d92:	12 be       	out	0x32, r1	; 50
     d94:	98 b7       	in	r25, 0x38	; 56
     d96:	91 60       	ori	r25, 0x01	; 1
     d98:	98 bf       	out	0x38, r25	; 56
     d9a:	07 c0       	rjmp	.+14     	; 0xdaa <TIMER_timer0PWM_mode+0x68>
     d9c:	86 e0       	ldi	r24, 0x06	; 6
     d9e:	05 c0       	rjmp	.+10     	; 0xdaa <TIMER_timer0PWM_mode+0x68>
     da0:	86 e0       	ldi	r24, 0x06	; 6
     da2:	03 c0       	rjmp	.+6      	; 0xdaa <TIMER_timer0PWM_mode+0x68>
     da4:	86 e0       	ldi	r24, 0x06	; 6
     da6:	01 c0       	rjmp	.+2      	; 0xdaa <TIMER_timer0PWM_mode+0x68>
     da8:	86 e0       	ldi	r24, 0x06	; 6
     daa:	ff 90       	pop	r15
     dac:	ef 90       	pop	r14
     dae:	df 90       	pop	r13
     db0:	cf 90       	pop	r12
     db2:	08 95       	ret

00000db4 <TIMER_timer2InitMode>:
     db4:	81 11       	cpse	r24, r1
     db6:	08 c0       	rjmp	.+16     	; 0xdc8 <TIMER_timer2InitMode+0x14>
     db8:	85 b5       	in	r24, 0x25	; 37
     dba:	8f 7b       	andi	r24, 0xBF	; 191
     dbc:	85 bd       	out	0x25, r24	; 37
     dbe:	85 b5       	in	r24, 0x25	; 37
     dc0:	87 7f       	andi	r24, 0xF7	; 247
     dc2:	85 bd       	out	0x25, r24	; 37
     dc4:	80 e0       	ldi	r24, 0x00	; 0
     dc6:	08 95       	ret
     dc8:	81 30       	cpi	r24, 0x01	; 1
     dca:	41 f4       	brne	.+16     	; 0xddc <TIMER_timer2InitMode+0x28>
     dcc:	85 b5       	in	r24, 0x25	; 37
     dce:	8f 7b       	andi	r24, 0xBF	; 191
     dd0:	85 bd       	out	0x25, r24	; 37
     dd2:	85 b5       	in	r24, 0x25	; 37
     dd4:	88 60       	ori	r24, 0x08	; 8
     dd6:	85 bd       	out	0x25, r24	; 37
     dd8:	80 e0       	ldi	r24, 0x00	; 0
     dda:	08 95       	ret
     ddc:	82 30       	cpi	r24, 0x02	; 2
     dde:	41 f4       	brne	.+16     	; 0xdf0 <TIMER_timer2InitMode+0x3c>
     de0:	85 b5       	in	r24, 0x25	; 37
     de2:	80 64       	ori	r24, 0x40	; 64
     de4:	85 bd       	out	0x25, r24	; 37
     de6:	85 b5       	in	r24, 0x25	; 37
     de8:	87 7f       	andi	r24, 0xF7	; 247
     dea:	85 bd       	out	0x25, r24	; 37
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	08 95       	ret
     df0:	83 30       	cpi	r24, 0x03	; 3
     df2:	41 f4       	brne	.+16     	; 0xe04 <TIMER_timer2InitMode+0x50>
     df4:	85 b5       	in	r24, 0x25	; 37
     df6:	80 64       	ori	r24, 0x40	; 64
     df8:	85 bd       	out	0x25, r24	; 37
     dfa:	85 b5       	in	r24, 0x25	; 37
     dfc:	88 60       	ori	r24, 0x08	; 8
     dfe:	85 bd       	out	0x25, r24	; 37
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	08 95       	ret
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	08 95       	ret

00000e08 <TIMER_timer2Prescalar>:
     e08:	81 11       	cpse	r24, r1
     e0a:	0b c0       	rjmp	.+22     	; 0xe22 <TIMER_timer2Prescalar+0x1a>
     e0c:	85 b5       	in	r24, 0x25	; 37
     e0e:	8e 7f       	andi	r24, 0xFE	; 254
     e10:	85 bd       	out	0x25, r24	; 37
     e12:	85 b5       	in	r24, 0x25	; 37
     e14:	8d 7f       	andi	r24, 0xFD	; 253
     e16:	85 bd       	out	0x25, r24	; 37
     e18:	85 b5       	in	r24, 0x25	; 37
     e1a:	8b 7f       	andi	r24, 0xFB	; 251
     e1c:	85 bd       	out	0x25, r24	; 37
     e1e:	80 e0       	ldi	r24, 0x00	; 0
     e20:	08 95       	ret
     e22:	81 30       	cpi	r24, 0x01	; 1
     e24:	59 f4       	brne	.+22     	; 0xe3c <TIMER_timer2Prescalar+0x34>
     e26:	85 b5       	in	r24, 0x25	; 37
     e28:	81 60       	ori	r24, 0x01	; 1
     e2a:	85 bd       	out	0x25, r24	; 37
     e2c:	85 b5       	in	r24, 0x25	; 37
     e2e:	8d 7f       	andi	r24, 0xFD	; 253
     e30:	85 bd       	out	0x25, r24	; 37
     e32:	85 b5       	in	r24, 0x25	; 37
     e34:	8b 7f       	andi	r24, 0xFB	; 251
     e36:	85 bd       	out	0x25, r24	; 37
     e38:	80 e0       	ldi	r24, 0x00	; 0
     e3a:	08 95       	ret
     e3c:	82 30       	cpi	r24, 0x02	; 2
     e3e:	59 f4       	brne	.+22     	; 0xe56 <TIMER_timer2Prescalar+0x4e>
     e40:	85 b5       	in	r24, 0x25	; 37
     e42:	8e 7f       	andi	r24, 0xFE	; 254
     e44:	85 bd       	out	0x25, r24	; 37
     e46:	85 b5       	in	r24, 0x25	; 37
     e48:	82 60       	ori	r24, 0x02	; 2
     e4a:	85 bd       	out	0x25, r24	; 37
     e4c:	85 b5       	in	r24, 0x25	; 37
     e4e:	8b 7f       	andi	r24, 0xFB	; 251
     e50:	85 bd       	out	0x25, r24	; 37
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	08 95       	ret
     e56:	83 30       	cpi	r24, 0x03	; 3
     e58:	59 f4       	brne	.+22     	; 0xe70 <TIMER_timer2Prescalar+0x68>
     e5a:	85 b5       	in	r24, 0x25	; 37
     e5c:	81 60       	ori	r24, 0x01	; 1
     e5e:	85 bd       	out	0x25, r24	; 37
     e60:	85 b5       	in	r24, 0x25	; 37
     e62:	82 60       	ori	r24, 0x02	; 2
     e64:	85 bd       	out	0x25, r24	; 37
     e66:	85 b5       	in	r24, 0x25	; 37
     e68:	8b 7f       	andi	r24, 0xFB	; 251
     e6a:	85 bd       	out	0x25, r24	; 37
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	08 95       	ret
     e70:	84 30       	cpi	r24, 0x04	; 4
     e72:	59 f4       	brne	.+22     	; 0xe8a <TIMER_timer2Prescalar+0x82>
     e74:	85 b5       	in	r24, 0x25	; 37
     e76:	8e 7f       	andi	r24, 0xFE	; 254
     e78:	85 bd       	out	0x25, r24	; 37
     e7a:	85 b5       	in	r24, 0x25	; 37
     e7c:	8d 7f       	andi	r24, 0xFD	; 253
     e7e:	85 bd       	out	0x25, r24	; 37
     e80:	85 b5       	in	r24, 0x25	; 37
     e82:	84 60       	ori	r24, 0x04	; 4
     e84:	85 bd       	out	0x25, r24	; 37
     e86:	80 e0       	ldi	r24, 0x00	; 0
     e88:	08 95       	ret
     e8a:	84 30       	cpi	r24, 0x04	; 4
     e8c:	59 f4       	brne	.+22     	; 0xea4 <TIMER_timer2Prescalar+0x9c>
     e8e:	85 b5       	in	r24, 0x25	; 37
     e90:	81 60       	ori	r24, 0x01	; 1
     e92:	85 bd       	out	0x25, r24	; 37
     e94:	85 b5       	in	r24, 0x25	; 37
     e96:	8d 7f       	andi	r24, 0xFD	; 253
     e98:	85 bd       	out	0x25, r24	; 37
     e9a:	85 b5       	in	r24, 0x25	; 37
     e9c:	84 60       	ori	r24, 0x04	; 4
     e9e:	85 bd       	out	0x25, r24	; 37
     ea0:	80 e0       	ldi	r24, 0x00	; 0
     ea2:	08 95       	ret
     ea4:	85 30       	cpi	r24, 0x05	; 5
     ea6:	59 f4       	brne	.+22     	; 0xebe <TIMER_timer2Prescalar+0xb6>
     ea8:	85 b5       	in	r24, 0x25	; 37
     eaa:	8e 7f       	andi	r24, 0xFE	; 254
     eac:	85 bd       	out	0x25, r24	; 37
     eae:	85 b5       	in	r24, 0x25	; 37
     eb0:	82 60       	ori	r24, 0x02	; 2
     eb2:	85 bd       	out	0x25, r24	; 37
     eb4:	85 b5       	in	r24, 0x25	; 37
     eb6:	84 60       	ori	r24, 0x04	; 4
     eb8:	85 bd       	out	0x25, r24	; 37
     eba:	80 e0       	ldi	r24, 0x00	; 0
     ebc:	08 95       	ret
     ebe:	86 30       	cpi	r24, 0x06	; 6
     ec0:	59 f4       	brne	.+22     	; 0xed8 <TIMER_timer2Prescalar+0xd0>
     ec2:	85 b5       	in	r24, 0x25	; 37
     ec4:	81 60       	ori	r24, 0x01	; 1
     ec6:	85 bd       	out	0x25, r24	; 37
     ec8:	85 b5       	in	r24, 0x25	; 37
     eca:	82 60       	ori	r24, 0x02	; 2
     ecc:	85 bd       	out	0x25, r24	; 37
     ece:	85 b5       	in	r24, 0x25	; 37
     ed0:	84 60       	ori	r24, 0x04	; 4
     ed2:	85 bd       	out	0x25, r24	; 37
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	08 95       	ret
     ed8:	82 e0       	ldi	r24, 0x02	; 2
     eda:	08 95       	ret

00000edc <TIMER_timer2SetInitial>:
     edc:	8f 3f       	cpi	r24, 0xFF	; 255
     ede:	91 05       	cpc	r25, r1
     ee0:	09 f0       	breq	.+2      	; 0xee4 <TIMER_timer2SetInitial+0x8>
     ee2:	18 f4       	brcc	.+6      	; 0xeea <TIMER_timer2SetInitial+0xe>
     ee4:	84 bd       	out	0x24, r24	; 36
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	08 95       	ret
     eea:	84 e0       	ldi	r24, 0x04	; 4
     eec:	08 95       	ret

00000eee <TIMER_timer2Init>:
     eee:	89 b7       	in	r24, 0x39	; 57
     ef0:	80 64       	ori	r24, 0x40	; 64
     ef2:	89 bf       	out	0x39, r24	; 57
     ef4:	80 e0       	ldi	r24, 0x00	; 0
     ef6:	0e 94 da 06 	call	0xdb4	; 0xdb4 <TIMER_timer2InitMode>
     efa:	81 11       	cpse	r24, r1
     efc:	0e c0       	rjmp	.+28     	; 0xf1a <TIMER_timer2Init+0x2c>
     efe:	80 e0       	ldi	r24, 0x00	; 0
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	0e 94 6e 07 	call	0xedc	; 0xedc <TIMER_timer2SetInitial>
     f06:	81 11       	cpse	r24, r1
     f08:	0a c0       	rjmp	.+20     	; 0xf1e <TIMER_timer2Init+0x30>
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	0e 94 04 07 	call	0xe08	; 0xe08 <TIMER_timer2Prescalar>
     f10:	81 11       	cpse	r24, r1
     f12:	07 c0       	rjmp	.+14     	; 0xf22 <TIMER_timer2Init+0x34>
     f14:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <u8_g_timerBtn_flag>
     f18:	08 95       	ret
     f1a:	87 e0       	ldi	r24, 0x07	; 7
     f1c:	08 95       	ret
     f1e:	87 e0       	ldi	r24, 0x07	; 7
     f20:	08 95       	ret
     f22:	87 e0       	ldi	r24, 0x07	; 7
     f24:	08 95       	ret

00000f26 <__vector_5>:

}

ISR(TIMER2_OVF_vect) {
     f26:	1f 92       	push	r1
     f28:	0f 92       	push	r0
     f2a:	0f b6       	in	r0, 0x3f	; 63
     f2c:	0f 92       	push	r0
     f2e:	11 24       	eor	r1, r1
     f30:	4f 93       	push	r20
     f32:	5f 93       	push	r21
     f34:	6f 93       	push	r22
     f36:	7f 93       	push	r23
     f38:	8f 93       	push	r24
     f3a:	9f 93       	push	r25
     f3c:	af 93       	push	r26
     f3e:	bf 93       	push	r27

   if (u8_g_timerBtn_flag == INITIAL_VALUE_1) {
     f40:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <u8_g_timerBtn_flag>
     f44:	81 30       	cpi	r24, 0x01	; 1
     f46:	e9 f5       	brne	.+122    	; 0xfc2 <__vector_5+0x9c>

      if (i32_gs_TimeDec_ovf < i32_g_TimeMode_ovf) {
     f48:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <i32_gs_TimeDec_ovf>
     f4c:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <i32_gs_TimeDec_ovf+0x1>
     f50:	a0 91 6d 00 	lds	r26, 0x006D	; 0x80006d <i32_gs_TimeDec_ovf+0x2>
     f54:	b0 91 6e 00 	lds	r27, 0x006E	; 0x80006e <i32_gs_TimeDec_ovf+0x3>
     f58:	40 91 6f 00 	lds	r20, 0x006F	; 0x80006f <i32_g_TimeMode_ovf>
     f5c:	50 91 70 00 	lds	r21, 0x0070	; 0x800070 <i32_g_TimeMode_ovf+0x1>
     f60:	60 91 71 00 	lds	r22, 0x0071	; 0x800071 <i32_g_TimeMode_ovf+0x2>
     f64:	70 91 72 00 	lds	r23, 0x0072	; 0x800072 <i32_g_TimeMode_ovf+0x3>
     f68:	84 17       	cp	r24, r20
     f6a:	95 07       	cpc	r25, r21
     f6c:	a6 07       	cpc	r26, r22
     f6e:	b7 07       	cpc	r27, r23
     f70:	64 f4       	brge	.+24     	; 0xf8a <__vector_5+0x64>
         i32_gs_TimeDec_ovf++;
     f72:	01 96       	adiw	r24, 0x01	; 1
     f74:	a1 1d       	adc	r26, r1
     f76:	b1 1d       	adc	r27, r1
     f78:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <i32_gs_TimeDec_ovf>
     f7c:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <i32_gs_TimeDec_ovf+0x1>
     f80:	a0 93 6d 00 	sts	0x006D, r26	; 0x80006d <i32_gs_TimeDec_ovf+0x2>
     f84:	b0 93 6e 00 	sts	0x006E, r27	; 0x80006e <i32_gs_TimeDec_ovf+0x3>
     f88:	1c c0       	rjmp	.+56     	; 0xfc2 <__vector_5+0x9c>
      } else if (i32_gs_TimeDec_ovf == i32_g_TimeMode_ovf && i32_g_TimeMode_ovf != INITIAL_VALUE_0) {
     f8a:	84 17       	cp	r24, r20
     f8c:	95 07       	cpc	r25, r21
     f8e:	a6 07       	cpc	r26, r22
     f90:	b7 07       	cpc	r27, r23
     f92:	b9 f4       	brne	.+46     	; 0xfc2 <__vector_5+0x9c>
     f94:	45 2b       	or	r20, r21
     f96:	46 2b       	or	r20, r22
     f98:	47 2b       	or	r20, r23
     f9a:	99 f0       	breq	.+38     	; 0xfc2 <__vector_5+0x9c>
         i32_gs_TimeDec_ovf = INITIAL_VALUE_0;
     f9c:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <i32_gs_TimeDec_ovf>
     fa0:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <i32_gs_TimeDec_ovf+0x1>
     fa4:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <i32_gs_TimeDec_ovf+0x2>
     fa8:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <i32_gs_TimeDec_ovf+0x3>

         if (u8_g_currentCarState < CAR_MODES) {
     fac:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <u8_g_currentCarState>
     fb0:	88 30       	cpi	r24, 0x08	; 8
     fb2:	20 f4       	brcc	.+8      	; 0xfbc <__vector_5+0x96>
            u8_g_currentCarState++;
     fb4:	8f 5f       	subi	r24, 0xFF	; 255
     fb6:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <u8_g_currentCarState>
     fba:	03 c0       	rjmp	.+6      	; 0xfc2 <__vector_5+0x9c>

         } else {
            u8_g_currentCarState = INITIAL_VALUE_1;
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <u8_g_currentCarState>

      }

   }

     fc2:	bf 91       	pop	r27
     fc4:	af 91       	pop	r26
     fc6:	9f 91       	pop	r25
     fc8:	8f 91       	pop	r24
     fca:	7f 91       	pop	r23
     fcc:	6f 91       	pop	r22
     fce:	5f 91       	pop	r21
     fd0:	4f 91       	pop	r20
     fd2:	0f 90       	pop	r0
     fd4:	0f be       	out	0x3f, r0	; 63
     fd6:	0f 90       	pop	r0
     fd8:	1f 90       	pop	r1
     fda:	18 95       	reti

00000fdc <__subsf3>:
     fdc:	50 58       	subi	r21, 0x80	; 128

00000fde <__addsf3>:
     fde:	bb 27       	eor	r27, r27
     fe0:	aa 27       	eor	r26, r26
     fe2:	0e 94 06 08 	call	0x100c	; 0x100c <__addsf3x>
     fe6:	0c 94 7c 09 	jmp	0x12f8	; 0x12f8 <__fp_round>
     fea:	0e 94 6e 09 	call	0x12dc	; 0x12dc <__fp_pscA>
     fee:	38 f0       	brcs	.+14     	; 0xffe <__addsf3+0x20>
     ff0:	0e 94 75 09 	call	0x12ea	; 0x12ea <__fp_pscB>
     ff4:	20 f0       	brcs	.+8      	; 0xffe <__addsf3+0x20>
     ff6:	39 f4       	brne	.+14     	; 0x1006 <__addsf3+0x28>
     ff8:	9f 3f       	cpi	r25, 0xFF	; 255
     ffa:	19 f4       	brne	.+6      	; 0x1002 <__addsf3+0x24>
     ffc:	26 f4       	brtc	.+8      	; 0x1006 <__addsf3+0x28>
     ffe:	0c 94 6b 09 	jmp	0x12d6	; 0x12d6 <__fp_nan>
    1002:	0e f4       	brtc	.+2      	; 0x1006 <__addsf3+0x28>
    1004:	e0 95       	com	r30
    1006:	e7 fb       	bst	r30, 7
    1008:	0c 94 3c 09 	jmp	0x1278	; 0x1278 <__fp_inf>

0000100c <__addsf3x>:
    100c:	e9 2f       	mov	r30, r25
    100e:	0e 94 8d 09 	call	0x131a	; 0x131a <__fp_split3>
    1012:	58 f3       	brcs	.-42     	; 0xfea <__addsf3+0xc>
    1014:	ba 17       	cp	r27, r26
    1016:	62 07       	cpc	r22, r18
    1018:	73 07       	cpc	r23, r19
    101a:	84 07       	cpc	r24, r20
    101c:	95 07       	cpc	r25, r21
    101e:	20 f0       	brcs	.+8      	; 0x1028 <__addsf3x+0x1c>
    1020:	79 f4       	brne	.+30     	; 0x1040 <__addsf3x+0x34>
    1022:	a6 f5       	brtc	.+104    	; 0x108c <__addsf3x+0x80>
    1024:	0c 94 c7 09 	jmp	0x138e	; 0x138e <__fp_zero>
    1028:	0e f4       	brtc	.+2      	; 0x102c <__addsf3x+0x20>
    102a:	e0 95       	com	r30
    102c:	0b 2e       	mov	r0, r27
    102e:	ba 2f       	mov	r27, r26
    1030:	a0 2d       	mov	r26, r0
    1032:	0b 01       	movw	r0, r22
    1034:	b9 01       	movw	r22, r18
    1036:	90 01       	movw	r18, r0
    1038:	0c 01       	movw	r0, r24
    103a:	ca 01       	movw	r24, r20
    103c:	a0 01       	movw	r20, r0
    103e:	11 24       	eor	r1, r1
    1040:	ff 27       	eor	r31, r31
    1042:	59 1b       	sub	r21, r25
    1044:	99 f0       	breq	.+38     	; 0x106c <__addsf3x+0x60>
    1046:	59 3f       	cpi	r21, 0xF9	; 249
    1048:	50 f4       	brcc	.+20     	; 0x105e <__addsf3x+0x52>
    104a:	50 3e       	cpi	r21, 0xE0	; 224
    104c:	68 f1       	brcs	.+90     	; 0x10a8 <__addsf3x+0x9c>
    104e:	1a 16       	cp	r1, r26
    1050:	f0 40       	sbci	r31, 0x00	; 0
    1052:	a2 2f       	mov	r26, r18
    1054:	23 2f       	mov	r18, r19
    1056:	34 2f       	mov	r19, r20
    1058:	44 27       	eor	r20, r20
    105a:	58 5f       	subi	r21, 0xF8	; 248
    105c:	f3 cf       	rjmp	.-26     	; 0x1044 <__addsf3x+0x38>
    105e:	46 95       	lsr	r20
    1060:	37 95       	ror	r19
    1062:	27 95       	ror	r18
    1064:	a7 95       	ror	r26
    1066:	f0 40       	sbci	r31, 0x00	; 0
    1068:	53 95       	inc	r21
    106a:	c9 f7       	brne	.-14     	; 0x105e <__addsf3x+0x52>
    106c:	7e f4       	brtc	.+30     	; 0x108c <__addsf3x+0x80>
    106e:	1f 16       	cp	r1, r31
    1070:	ba 0b       	sbc	r27, r26
    1072:	62 0b       	sbc	r22, r18
    1074:	73 0b       	sbc	r23, r19
    1076:	84 0b       	sbc	r24, r20
    1078:	ba f0       	brmi	.+46     	; 0x10a8 <__addsf3x+0x9c>
    107a:	91 50       	subi	r25, 0x01	; 1
    107c:	a1 f0       	breq	.+40     	; 0x10a6 <__addsf3x+0x9a>
    107e:	ff 0f       	add	r31, r31
    1080:	bb 1f       	adc	r27, r27
    1082:	66 1f       	adc	r22, r22
    1084:	77 1f       	adc	r23, r23
    1086:	88 1f       	adc	r24, r24
    1088:	c2 f7       	brpl	.-16     	; 0x107a <__addsf3x+0x6e>
    108a:	0e c0       	rjmp	.+28     	; 0x10a8 <__addsf3x+0x9c>
    108c:	ba 0f       	add	r27, r26
    108e:	62 1f       	adc	r22, r18
    1090:	73 1f       	adc	r23, r19
    1092:	84 1f       	adc	r24, r20
    1094:	48 f4       	brcc	.+18     	; 0x10a8 <__addsf3x+0x9c>
    1096:	87 95       	ror	r24
    1098:	77 95       	ror	r23
    109a:	67 95       	ror	r22
    109c:	b7 95       	ror	r27
    109e:	f7 95       	ror	r31
    10a0:	9e 3f       	cpi	r25, 0xFE	; 254
    10a2:	08 f0       	brcs	.+2      	; 0x10a6 <__addsf3x+0x9a>
    10a4:	b0 cf       	rjmp	.-160    	; 0x1006 <__addsf3+0x28>
    10a6:	93 95       	inc	r25
    10a8:	88 0f       	add	r24, r24
    10aa:	08 f0       	brcs	.+2      	; 0x10ae <__addsf3x+0xa2>
    10ac:	99 27       	eor	r25, r25
    10ae:	ee 0f       	add	r30, r30
    10b0:	97 95       	ror	r25
    10b2:	87 95       	ror	r24
    10b4:	08 95       	ret

000010b6 <ceil>:
    10b6:	0e 94 af 09 	call	0x135e	; 0x135e <__fp_trunc>
    10ba:	90 f0       	brcs	.+36     	; 0x10e0 <ceil+0x2a>
    10bc:	9f 37       	cpi	r25, 0x7F	; 127
    10be:	48 f4       	brcc	.+18     	; 0x10d2 <ceil+0x1c>
    10c0:	91 11       	cpse	r25, r1
    10c2:	16 f4       	brtc	.+4      	; 0x10c8 <ceil+0x12>
    10c4:	0c 94 c8 09 	jmp	0x1390	; 0x1390 <__fp_szero>
    10c8:	60 e0       	ldi	r22, 0x00	; 0
    10ca:	70 e0       	ldi	r23, 0x00	; 0
    10cc:	80 e8       	ldi	r24, 0x80	; 128
    10ce:	9f e3       	ldi	r25, 0x3F	; 63
    10d0:	08 95       	ret
    10d2:	26 f0       	brts	.+8      	; 0x10dc <ceil+0x26>
    10d4:	1b 16       	cp	r1, r27
    10d6:	61 1d       	adc	r22, r1
    10d8:	71 1d       	adc	r23, r1
    10da:	81 1d       	adc	r24, r1
    10dc:	0c 94 42 09 	jmp	0x1284	; 0x1284 <__fp_mintl>
    10e0:	0c 94 5d 09 	jmp	0x12ba	; 0x12ba <__fp_mpack>

000010e4 <__cmpsf2>:
    10e4:	0e 94 18 09 	call	0x1230	; 0x1230 <__fp_cmp>
    10e8:	08 f4       	brcc	.+2      	; 0x10ec <__cmpsf2+0x8>
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	08 95       	ret

000010ee <__divsf3>:
    10ee:	0e 94 8b 08 	call	0x1116	; 0x1116 <__divsf3x>
    10f2:	0c 94 7c 09 	jmp	0x12f8	; 0x12f8 <__fp_round>
    10f6:	0e 94 75 09 	call	0x12ea	; 0x12ea <__fp_pscB>
    10fa:	58 f0       	brcs	.+22     	; 0x1112 <__divsf3+0x24>
    10fc:	0e 94 6e 09 	call	0x12dc	; 0x12dc <__fp_pscA>
    1100:	40 f0       	brcs	.+16     	; 0x1112 <__divsf3+0x24>
    1102:	29 f4       	brne	.+10     	; 0x110e <__divsf3+0x20>
    1104:	5f 3f       	cpi	r21, 0xFF	; 255
    1106:	29 f0       	breq	.+10     	; 0x1112 <__divsf3+0x24>
    1108:	0c 94 3c 09 	jmp	0x1278	; 0x1278 <__fp_inf>
    110c:	51 11       	cpse	r21, r1
    110e:	0c 94 c8 09 	jmp	0x1390	; 0x1390 <__fp_szero>
    1112:	0c 94 6b 09 	jmp	0x12d6	; 0x12d6 <__fp_nan>

00001116 <__divsf3x>:
    1116:	0e 94 8d 09 	call	0x131a	; 0x131a <__fp_split3>
    111a:	68 f3       	brcs	.-38     	; 0x10f6 <__divsf3+0x8>

0000111c <__divsf3_pse>:
    111c:	99 23       	and	r25, r25
    111e:	b1 f3       	breq	.-20     	; 0x110c <__divsf3+0x1e>
    1120:	55 23       	and	r21, r21
    1122:	91 f3       	breq	.-28     	; 0x1108 <__divsf3+0x1a>
    1124:	95 1b       	sub	r25, r21
    1126:	55 0b       	sbc	r21, r21
    1128:	bb 27       	eor	r27, r27
    112a:	aa 27       	eor	r26, r26
    112c:	62 17       	cp	r22, r18
    112e:	73 07       	cpc	r23, r19
    1130:	84 07       	cpc	r24, r20
    1132:	38 f0       	brcs	.+14     	; 0x1142 <__divsf3_pse+0x26>
    1134:	9f 5f       	subi	r25, 0xFF	; 255
    1136:	5f 4f       	sbci	r21, 0xFF	; 255
    1138:	22 0f       	add	r18, r18
    113a:	33 1f       	adc	r19, r19
    113c:	44 1f       	adc	r20, r20
    113e:	aa 1f       	adc	r26, r26
    1140:	a9 f3       	breq	.-22     	; 0x112c <__divsf3_pse+0x10>
    1142:	35 d0       	rcall	.+106    	; 0x11ae <__divsf3_pse+0x92>
    1144:	0e 2e       	mov	r0, r30
    1146:	3a f0       	brmi	.+14     	; 0x1156 <__divsf3_pse+0x3a>
    1148:	e0 e8       	ldi	r30, 0x80	; 128
    114a:	32 d0       	rcall	.+100    	; 0x11b0 <__divsf3_pse+0x94>
    114c:	91 50       	subi	r25, 0x01	; 1
    114e:	50 40       	sbci	r21, 0x00	; 0
    1150:	e6 95       	lsr	r30
    1152:	00 1c       	adc	r0, r0
    1154:	ca f7       	brpl	.-14     	; 0x1148 <__divsf3_pse+0x2c>
    1156:	2b d0       	rcall	.+86     	; 0x11ae <__divsf3_pse+0x92>
    1158:	fe 2f       	mov	r31, r30
    115a:	29 d0       	rcall	.+82     	; 0x11ae <__divsf3_pse+0x92>
    115c:	66 0f       	add	r22, r22
    115e:	77 1f       	adc	r23, r23
    1160:	88 1f       	adc	r24, r24
    1162:	bb 1f       	adc	r27, r27
    1164:	26 17       	cp	r18, r22
    1166:	37 07       	cpc	r19, r23
    1168:	48 07       	cpc	r20, r24
    116a:	ab 07       	cpc	r26, r27
    116c:	b0 e8       	ldi	r27, 0x80	; 128
    116e:	09 f0       	breq	.+2      	; 0x1172 <__divsf3_pse+0x56>
    1170:	bb 0b       	sbc	r27, r27
    1172:	80 2d       	mov	r24, r0
    1174:	bf 01       	movw	r22, r30
    1176:	ff 27       	eor	r31, r31
    1178:	93 58       	subi	r25, 0x83	; 131
    117a:	5f 4f       	sbci	r21, 0xFF	; 255
    117c:	3a f0       	brmi	.+14     	; 0x118c <__divsf3_pse+0x70>
    117e:	9e 3f       	cpi	r25, 0xFE	; 254
    1180:	51 05       	cpc	r21, r1
    1182:	78 f0       	brcs	.+30     	; 0x11a2 <__divsf3_pse+0x86>
    1184:	0c 94 3c 09 	jmp	0x1278	; 0x1278 <__fp_inf>
    1188:	0c 94 c8 09 	jmp	0x1390	; 0x1390 <__fp_szero>
    118c:	5f 3f       	cpi	r21, 0xFF	; 255
    118e:	e4 f3       	brlt	.-8      	; 0x1188 <__divsf3_pse+0x6c>
    1190:	98 3e       	cpi	r25, 0xE8	; 232
    1192:	d4 f3       	brlt	.-12     	; 0x1188 <__divsf3_pse+0x6c>
    1194:	86 95       	lsr	r24
    1196:	77 95       	ror	r23
    1198:	67 95       	ror	r22
    119a:	b7 95       	ror	r27
    119c:	f7 95       	ror	r31
    119e:	9f 5f       	subi	r25, 0xFF	; 255
    11a0:	c9 f7       	brne	.-14     	; 0x1194 <__divsf3_pse+0x78>
    11a2:	88 0f       	add	r24, r24
    11a4:	91 1d       	adc	r25, r1
    11a6:	96 95       	lsr	r25
    11a8:	87 95       	ror	r24
    11aa:	97 f9       	bld	r25, 7
    11ac:	08 95       	ret
    11ae:	e1 e0       	ldi	r30, 0x01	; 1
    11b0:	66 0f       	add	r22, r22
    11b2:	77 1f       	adc	r23, r23
    11b4:	88 1f       	adc	r24, r24
    11b6:	bb 1f       	adc	r27, r27
    11b8:	62 17       	cp	r22, r18
    11ba:	73 07       	cpc	r23, r19
    11bc:	84 07       	cpc	r24, r20
    11be:	ba 07       	cpc	r27, r26
    11c0:	20 f0       	brcs	.+8      	; 0x11ca <__divsf3_pse+0xae>
    11c2:	62 1b       	sub	r22, r18
    11c4:	73 0b       	sbc	r23, r19
    11c6:	84 0b       	sbc	r24, r20
    11c8:	ba 0b       	sbc	r27, r26
    11ca:	ee 1f       	adc	r30, r30
    11cc:	88 f7       	brcc	.-30     	; 0x11b0 <__divsf3_pse+0x94>
    11ce:	e0 95       	com	r30
    11d0:	08 95       	ret

000011d2 <__fixunssfsi>:
    11d2:	0e 94 95 09 	call	0x132a	; 0x132a <__fp_splitA>
    11d6:	88 f0       	brcs	.+34     	; 0x11fa <__fixunssfsi+0x28>
    11d8:	9f 57       	subi	r25, 0x7F	; 127
    11da:	98 f0       	brcs	.+38     	; 0x1202 <__fixunssfsi+0x30>
    11dc:	b9 2f       	mov	r27, r25
    11de:	99 27       	eor	r25, r25
    11e0:	b7 51       	subi	r27, 0x17	; 23
    11e2:	b0 f0       	brcs	.+44     	; 0x1210 <__fixunssfsi+0x3e>
    11e4:	e1 f0       	breq	.+56     	; 0x121e <__fixunssfsi+0x4c>
    11e6:	66 0f       	add	r22, r22
    11e8:	77 1f       	adc	r23, r23
    11ea:	88 1f       	adc	r24, r24
    11ec:	99 1f       	adc	r25, r25
    11ee:	1a f0       	brmi	.+6      	; 0x11f6 <__fixunssfsi+0x24>
    11f0:	ba 95       	dec	r27
    11f2:	c9 f7       	brne	.-14     	; 0x11e6 <__fixunssfsi+0x14>
    11f4:	14 c0       	rjmp	.+40     	; 0x121e <__fixunssfsi+0x4c>
    11f6:	b1 30       	cpi	r27, 0x01	; 1
    11f8:	91 f0       	breq	.+36     	; 0x121e <__fixunssfsi+0x4c>
    11fa:	0e 94 c7 09 	call	0x138e	; 0x138e <__fp_zero>
    11fe:	b1 e0       	ldi	r27, 0x01	; 1
    1200:	08 95       	ret
    1202:	0c 94 c7 09 	jmp	0x138e	; 0x138e <__fp_zero>
    1206:	67 2f       	mov	r22, r23
    1208:	78 2f       	mov	r23, r24
    120a:	88 27       	eor	r24, r24
    120c:	b8 5f       	subi	r27, 0xF8	; 248
    120e:	39 f0       	breq	.+14     	; 0x121e <__fixunssfsi+0x4c>
    1210:	b9 3f       	cpi	r27, 0xF9	; 249
    1212:	cc f3       	brlt	.-14     	; 0x1206 <__fixunssfsi+0x34>
    1214:	86 95       	lsr	r24
    1216:	77 95       	ror	r23
    1218:	67 95       	ror	r22
    121a:	b3 95       	inc	r27
    121c:	d9 f7       	brne	.-10     	; 0x1214 <__fixunssfsi+0x42>
    121e:	3e f4       	brtc	.+14     	; 0x122e <__fixunssfsi+0x5c>
    1220:	90 95       	com	r25
    1222:	80 95       	com	r24
    1224:	70 95       	com	r23
    1226:	61 95       	neg	r22
    1228:	7f 4f       	sbci	r23, 0xFF	; 255
    122a:	8f 4f       	sbci	r24, 0xFF	; 255
    122c:	9f 4f       	sbci	r25, 0xFF	; 255
    122e:	08 95       	ret

00001230 <__fp_cmp>:
    1230:	99 0f       	add	r25, r25
    1232:	00 08       	sbc	r0, r0
    1234:	55 0f       	add	r21, r21
    1236:	aa 0b       	sbc	r26, r26
    1238:	e0 e8       	ldi	r30, 0x80	; 128
    123a:	fe ef       	ldi	r31, 0xFE	; 254
    123c:	16 16       	cp	r1, r22
    123e:	17 06       	cpc	r1, r23
    1240:	e8 07       	cpc	r30, r24
    1242:	f9 07       	cpc	r31, r25
    1244:	c0 f0       	brcs	.+48     	; 0x1276 <__fp_cmp+0x46>
    1246:	12 16       	cp	r1, r18
    1248:	13 06       	cpc	r1, r19
    124a:	e4 07       	cpc	r30, r20
    124c:	f5 07       	cpc	r31, r21
    124e:	98 f0       	brcs	.+38     	; 0x1276 <__fp_cmp+0x46>
    1250:	62 1b       	sub	r22, r18
    1252:	73 0b       	sbc	r23, r19
    1254:	84 0b       	sbc	r24, r20
    1256:	95 0b       	sbc	r25, r21
    1258:	39 f4       	brne	.+14     	; 0x1268 <__fp_cmp+0x38>
    125a:	0a 26       	eor	r0, r26
    125c:	61 f0       	breq	.+24     	; 0x1276 <__fp_cmp+0x46>
    125e:	23 2b       	or	r18, r19
    1260:	24 2b       	or	r18, r20
    1262:	25 2b       	or	r18, r21
    1264:	21 f4       	brne	.+8      	; 0x126e <__fp_cmp+0x3e>
    1266:	08 95       	ret
    1268:	0a 26       	eor	r0, r26
    126a:	09 f4       	brne	.+2      	; 0x126e <__fp_cmp+0x3e>
    126c:	a1 40       	sbci	r26, 0x01	; 1
    126e:	a6 95       	lsr	r26
    1270:	8f ef       	ldi	r24, 0xFF	; 255
    1272:	81 1d       	adc	r24, r1
    1274:	81 1d       	adc	r24, r1
    1276:	08 95       	ret

00001278 <__fp_inf>:
    1278:	97 f9       	bld	r25, 7
    127a:	9f 67       	ori	r25, 0x7F	; 127
    127c:	80 e8       	ldi	r24, 0x80	; 128
    127e:	70 e0       	ldi	r23, 0x00	; 0
    1280:	60 e0       	ldi	r22, 0x00	; 0
    1282:	08 95       	ret

00001284 <__fp_mintl>:
    1284:	88 23       	and	r24, r24
    1286:	71 f4       	brne	.+28     	; 0x12a4 <__fp_mintl+0x20>
    1288:	77 23       	and	r23, r23
    128a:	21 f0       	breq	.+8      	; 0x1294 <__fp_mintl+0x10>
    128c:	98 50       	subi	r25, 0x08	; 8
    128e:	87 2b       	or	r24, r23
    1290:	76 2f       	mov	r23, r22
    1292:	07 c0       	rjmp	.+14     	; 0x12a2 <__fp_mintl+0x1e>
    1294:	66 23       	and	r22, r22
    1296:	11 f4       	brne	.+4      	; 0x129c <__fp_mintl+0x18>
    1298:	99 27       	eor	r25, r25
    129a:	0d c0       	rjmp	.+26     	; 0x12b6 <__fp_mintl+0x32>
    129c:	90 51       	subi	r25, 0x10	; 16
    129e:	86 2b       	or	r24, r22
    12a0:	70 e0       	ldi	r23, 0x00	; 0
    12a2:	60 e0       	ldi	r22, 0x00	; 0
    12a4:	2a f0       	brmi	.+10     	; 0x12b0 <__fp_mintl+0x2c>
    12a6:	9a 95       	dec	r25
    12a8:	66 0f       	add	r22, r22
    12aa:	77 1f       	adc	r23, r23
    12ac:	88 1f       	adc	r24, r24
    12ae:	da f7       	brpl	.-10     	; 0x12a6 <__fp_mintl+0x22>
    12b0:	88 0f       	add	r24, r24
    12b2:	96 95       	lsr	r25
    12b4:	87 95       	ror	r24
    12b6:	97 f9       	bld	r25, 7
    12b8:	08 95       	ret

000012ba <__fp_mpack>:
    12ba:	9f 3f       	cpi	r25, 0xFF	; 255
    12bc:	31 f0       	breq	.+12     	; 0x12ca <__fp_mpack_finite+0xc>

000012be <__fp_mpack_finite>:
    12be:	91 50       	subi	r25, 0x01	; 1
    12c0:	20 f4       	brcc	.+8      	; 0x12ca <__fp_mpack_finite+0xc>
    12c2:	87 95       	ror	r24
    12c4:	77 95       	ror	r23
    12c6:	67 95       	ror	r22
    12c8:	b7 95       	ror	r27
    12ca:	88 0f       	add	r24, r24
    12cc:	91 1d       	adc	r25, r1
    12ce:	96 95       	lsr	r25
    12d0:	87 95       	ror	r24
    12d2:	97 f9       	bld	r25, 7
    12d4:	08 95       	ret

000012d6 <__fp_nan>:
    12d6:	9f ef       	ldi	r25, 0xFF	; 255
    12d8:	80 ec       	ldi	r24, 0xC0	; 192
    12da:	08 95       	ret

000012dc <__fp_pscA>:
    12dc:	00 24       	eor	r0, r0
    12de:	0a 94       	dec	r0
    12e0:	16 16       	cp	r1, r22
    12e2:	17 06       	cpc	r1, r23
    12e4:	18 06       	cpc	r1, r24
    12e6:	09 06       	cpc	r0, r25
    12e8:	08 95       	ret

000012ea <__fp_pscB>:
    12ea:	00 24       	eor	r0, r0
    12ec:	0a 94       	dec	r0
    12ee:	12 16       	cp	r1, r18
    12f0:	13 06       	cpc	r1, r19
    12f2:	14 06       	cpc	r1, r20
    12f4:	05 06       	cpc	r0, r21
    12f6:	08 95       	ret

000012f8 <__fp_round>:
    12f8:	09 2e       	mov	r0, r25
    12fa:	03 94       	inc	r0
    12fc:	00 0c       	add	r0, r0
    12fe:	11 f4       	brne	.+4      	; 0x1304 <__fp_round+0xc>
    1300:	88 23       	and	r24, r24
    1302:	52 f0       	brmi	.+20     	; 0x1318 <__fp_round+0x20>
    1304:	bb 0f       	add	r27, r27
    1306:	40 f4       	brcc	.+16     	; 0x1318 <__fp_round+0x20>
    1308:	bf 2b       	or	r27, r31
    130a:	11 f4       	brne	.+4      	; 0x1310 <__fp_round+0x18>
    130c:	60 ff       	sbrs	r22, 0
    130e:	04 c0       	rjmp	.+8      	; 0x1318 <__fp_round+0x20>
    1310:	6f 5f       	subi	r22, 0xFF	; 255
    1312:	7f 4f       	sbci	r23, 0xFF	; 255
    1314:	8f 4f       	sbci	r24, 0xFF	; 255
    1316:	9f 4f       	sbci	r25, 0xFF	; 255
    1318:	08 95       	ret

0000131a <__fp_split3>:
    131a:	57 fd       	sbrc	r21, 7
    131c:	90 58       	subi	r25, 0x80	; 128
    131e:	44 0f       	add	r20, r20
    1320:	55 1f       	adc	r21, r21
    1322:	59 f0       	breq	.+22     	; 0x133a <__fp_splitA+0x10>
    1324:	5f 3f       	cpi	r21, 0xFF	; 255
    1326:	71 f0       	breq	.+28     	; 0x1344 <__fp_splitA+0x1a>
    1328:	47 95       	ror	r20

0000132a <__fp_splitA>:
    132a:	88 0f       	add	r24, r24
    132c:	97 fb       	bst	r25, 7
    132e:	99 1f       	adc	r25, r25
    1330:	61 f0       	breq	.+24     	; 0x134a <__fp_splitA+0x20>
    1332:	9f 3f       	cpi	r25, 0xFF	; 255
    1334:	79 f0       	breq	.+30     	; 0x1354 <__fp_splitA+0x2a>
    1336:	87 95       	ror	r24
    1338:	08 95       	ret
    133a:	12 16       	cp	r1, r18
    133c:	13 06       	cpc	r1, r19
    133e:	14 06       	cpc	r1, r20
    1340:	55 1f       	adc	r21, r21
    1342:	f2 cf       	rjmp	.-28     	; 0x1328 <__fp_split3+0xe>
    1344:	46 95       	lsr	r20
    1346:	f1 df       	rcall	.-30     	; 0x132a <__fp_splitA>
    1348:	08 c0       	rjmp	.+16     	; 0x135a <__fp_splitA+0x30>
    134a:	16 16       	cp	r1, r22
    134c:	17 06       	cpc	r1, r23
    134e:	18 06       	cpc	r1, r24
    1350:	99 1f       	adc	r25, r25
    1352:	f1 cf       	rjmp	.-30     	; 0x1336 <__fp_splitA+0xc>
    1354:	86 95       	lsr	r24
    1356:	71 05       	cpc	r23, r1
    1358:	61 05       	cpc	r22, r1
    135a:	08 94       	sec
    135c:	08 95       	ret

0000135e <__fp_trunc>:
    135e:	0e 94 95 09 	call	0x132a	; 0x132a <__fp_splitA>
    1362:	a0 f0       	brcs	.+40     	; 0x138c <__fp_trunc+0x2e>
    1364:	be e7       	ldi	r27, 0x7E	; 126
    1366:	b9 17       	cp	r27, r25
    1368:	88 f4       	brcc	.+34     	; 0x138c <__fp_trunc+0x2e>
    136a:	bb 27       	eor	r27, r27
    136c:	9f 38       	cpi	r25, 0x8F	; 143
    136e:	60 f4       	brcc	.+24     	; 0x1388 <__fp_trunc+0x2a>
    1370:	16 16       	cp	r1, r22
    1372:	b1 1d       	adc	r27, r1
    1374:	67 2f       	mov	r22, r23
    1376:	78 2f       	mov	r23, r24
    1378:	88 27       	eor	r24, r24
    137a:	98 5f       	subi	r25, 0xF8	; 248
    137c:	f7 cf       	rjmp	.-18     	; 0x136c <__fp_trunc+0xe>
    137e:	86 95       	lsr	r24
    1380:	77 95       	ror	r23
    1382:	67 95       	ror	r22
    1384:	b1 1d       	adc	r27, r1
    1386:	93 95       	inc	r25
    1388:	96 39       	cpi	r25, 0x96	; 150
    138a:	c8 f3       	brcs	.-14     	; 0x137e <__fp_trunc+0x20>
    138c:	08 95       	ret

0000138e <__fp_zero>:
    138e:	e8 94       	clt

00001390 <__fp_szero>:
    1390:	bb 27       	eor	r27, r27
    1392:	66 27       	eor	r22, r22
    1394:	77 27       	eor	r23, r23
    1396:	cb 01       	movw	r24, r22
    1398:	97 f9       	bld	r25, 7
    139a:	08 95       	ret

0000139c <__gesf2>:
    139c:	0e 94 18 09 	call	0x1230	; 0x1230 <__fp_cmp>
    13a0:	08 f4       	brcc	.+2      	; 0x13a4 <__gesf2+0x8>
    13a2:	8f ef       	ldi	r24, 0xFF	; 255
    13a4:	08 95       	ret

000013a6 <__mulsf3>:
    13a6:	0e 94 e6 09 	call	0x13cc	; 0x13cc <__mulsf3x>
    13aa:	0c 94 7c 09 	jmp	0x12f8	; 0x12f8 <__fp_round>
    13ae:	0e 94 6e 09 	call	0x12dc	; 0x12dc <__fp_pscA>
    13b2:	38 f0       	brcs	.+14     	; 0x13c2 <__mulsf3+0x1c>
    13b4:	0e 94 75 09 	call	0x12ea	; 0x12ea <__fp_pscB>
    13b8:	20 f0       	brcs	.+8      	; 0x13c2 <__mulsf3+0x1c>
    13ba:	95 23       	and	r25, r21
    13bc:	11 f0       	breq	.+4      	; 0x13c2 <__mulsf3+0x1c>
    13be:	0c 94 3c 09 	jmp	0x1278	; 0x1278 <__fp_inf>
    13c2:	0c 94 6b 09 	jmp	0x12d6	; 0x12d6 <__fp_nan>
    13c6:	11 24       	eor	r1, r1
    13c8:	0c 94 c8 09 	jmp	0x1390	; 0x1390 <__fp_szero>

000013cc <__mulsf3x>:
    13cc:	0e 94 8d 09 	call	0x131a	; 0x131a <__fp_split3>
    13d0:	70 f3       	brcs	.-36     	; 0x13ae <__mulsf3+0x8>

000013d2 <__mulsf3_pse>:
    13d2:	95 9f       	mul	r25, r21
    13d4:	c1 f3       	breq	.-16     	; 0x13c6 <__mulsf3+0x20>
    13d6:	95 0f       	add	r25, r21
    13d8:	50 e0       	ldi	r21, 0x00	; 0
    13da:	55 1f       	adc	r21, r21
    13dc:	62 9f       	mul	r22, r18
    13de:	f0 01       	movw	r30, r0
    13e0:	72 9f       	mul	r23, r18
    13e2:	bb 27       	eor	r27, r27
    13e4:	f0 0d       	add	r31, r0
    13e6:	b1 1d       	adc	r27, r1
    13e8:	63 9f       	mul	r22, r19
    13ea:	aa 27       	eor	r26, r26
    13ec:	f0 0d       	add	r31, r0
    13ee:	b1 1d       	adc	r27, r1
    13f0:	aa 1f       	adc	r26, r26
    13f2:	64 9f       	mul	r22, r20
    13f4:	66 27       	eor	r22, r22
    13f6:	b0 0d       	add	r27, r0
    13f8:	a1 1d       	adc	r26, r1
    13fa:	66 1f       	adc	r22, r22
    13fc:	82 9f       	mul	r24, r18
    13fe:	22 27       	eor	r18, r18
    1400:	b0 0d       	add	r27, r0
    1402:	a1 1d       	adc	r26, r1
    1404:	62 1f       	adc	r22, r18
    1406:	73 9f       	mul	r23, r19
    1408:	b0 0d       	add	r27, r0
    140a:	a1 1d       	adc	r26, r1
    140c:	62 1f       	adc	r22, r18
    140e:	83 9f       	mul	r24, r19
    1410:	a0 0d       	add	r26, r0
    1412:	61 1d       	adc	r22, r1
    1414:	22 1f       	adc	r18, r18
    1416:	74 9f       	mul	r23, r20
    1418:	33 27       	eor	r19, r19
    141a:	a0 0d       	add	r26, r0
    141c:	61 1d       	adc	r22, r1
    141e:	23 1f       	adc	r18, r19
    1420:	84 9f       	mul	r24, r20
    1422:	60 0d       	add	r22, r0
    1424:	21 1d       	adc	r18, r1
    1426:	82 2f       	mov	r24, r18
    1428:	76 2f       	mov	r23, r22
    142a:	6a 2f       	mov	r22, r26
    142c:	11 24       	eor	r1, r1
    142e:	9f 57       	subi	r25, 0x7F	; 127
    1430:	50 40       	sbci	r21, 0x00	; 0
    1432:	9a f0       	brmi	.+38     	; 0x145a <__mulsf3_pse+0x88>
    1434:	f1 f0       	breq	.+60     	; 0x1472 <__mulsf3_pse+0xa0>
    1436:	88 23       	and	r24, r24
    1438:	4a f0       	brmi	.+18     	; 0x144c <__mulsf3_pse+0x7a>
    143a:	ee 0f       	add	r30, r30
    143c:	ff 1f       	adc	r31, r31
    143e:	bb 1f       	adc	r27, r27
    1440:	66 1f       	adc	r22, r22
    1442:	77 1f       	adc	r23, r23
    1444:	88 1f       	adc	r24, r24
    1446:	91 50       	subi	r25, 0x01	; 1
    1448:	50 40       	sbci	r21, 0x00	; 0
    144a:	a9 f7       	brne	.-22     	; 0x1436 <__mulsf3_pse+0x64>
    144c:	9e 3f       	cpi	r25, 0xFE	; 254
    144e:	51 05       	cpc	r21, r1
    1450:	80 f0       	brcs	.+32     	; 0x1472 <__mulsf3_pse+0xa0>
    1452:	0c 94 3c 09 	jmp	0x1278	; 0x1278 <__fp_inf>
    1456:	0c 94 c8 09 	jmp	0x1390	; 0x1390 <__fp_szero>
    145a:	5f 3f       	cpi	r21, 0xFF	; 255
    145c:	e4 f3       	brlt	.-8      	; 0x1456 <__mulsf3_pse+0x84>
    145e:	98 3e       	cpi	r25, 0xE8	; 232
    1460:	d4 f3       	brlt	.-12     	; 0x1456 <__mulsf3_pse+0x84>
    1462:	86 95       	lsr	r24
    1464:	77 95       	ror	r23
    1466:	67 95       	ror	r22
    1468:	b7 95       	ror	r27
    146a:	f7 95       	ror	r31
    146c:	e7 95       	ror	r30
    146e:	9f 5f       	subi	r25, 0xFF	; 255
    1470:	c1 f7       	brne	.-16     	; 0x1462 <__mulsf3_pse+0x90>
    1472:	fe 2b       	or	r31, r30
    1474:	88 0f       	add	r24, r24
    1476:	91 1d       	adc	r25, r1
    1478:	96 95       	lsr	r25
    147a:	87 95       	ror	r24
    147c:	97 f9       	bld	r25, 7
    147e:	08 95       	ret

00001480 <__tablejump2__>:
    1480:	ee 0f       	add	r30, r30
    1482:	ff 1f       	adc	r31, r31
    1484:	05 90       	lpm	r0, Z+
    1486:	f4 91       	lpm	r31, Z
    1488:	e0 2d       	mov	r30, r0
    148a:	09 94       	ijmp

0000148c <_exit>:
    148c:	f8 94       	cli

0000148e <__stop_program>:
    148e:	ff cf       	rjmp	.-2      	; 0x148e <__stop_program>
